
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001a0 <Reset_Handler>:
 80001a0:	b672      	cpsid	i
 80001a2:	4822      	ldr	r0, [pc, #136]	; (800022c <endfiniloop+0x4>)
 80001a4:	f380 8809 	msr	PSP, r0
 80001a8:	2002      	movs	r0, #2
 80001aa:	f380 8814 	msr	CONTROL, r0
 80001ae:	f3bf 8f6f 	isb	sy
 80001b2:	f001 fb0d 	bl	80017d0 <__core_init>
 80001b6:	f000 fe1b 	bl	8000df0 <__early_init>
 80001ba:	481d      	ldr	r0, [pc, #116]	; (8000230 <endfiniloop+0x8>)
 80001bc:	491d      	ldr	r1, [pc, #116]	; (8000234 <endfiniloop+0xc>)
 80001be:	4a1e      	ldr	r2, [pc, #120]	; (8000238 <endfiniloop+0x10>)

080001c0 <msloop>:
 80001c0:	4291      	cmp	r1, r2
 80001c2:	bf3c      	itt	cc
 80001c4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001c8:	e7fa      	bcc.n	80001c0 <msloop>
 80001ca:	491c      	ldr	r1, [pc, #112]	; (800023c <endfiniloop+0x14>)
 80001cc:	4a17      	ldr	r2, [pc, #92]	; (800022c <endfiniloop+0x4>)

080001ce <psloop>:
 80001ce:	4291      	cmp	r1, r2
 80001d0:	bf3c      	itt	cc
 80001d2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001d6:	e7fa      	bcc.n	80001ce <psloop>
 80001d8:	4919      	ldr	r1, [pc, #100]	; (8000240 <endfiniloop+0x18>)
 80001da:	4a1a      	ldr	r2, [pc, #104]	; (8000244 <endfiniloop+0x1c>)
 80001dc:	4b1a      	ldr	r3, [pc, #104]	; (8000248 <endfiniloop+0x20>)

080001de <dloop>:
 80001de:	429a      	cmp	r2, r3
 80001e0:	bf3e      	ittt	cc
 80001e2:	f851 0b04 	ldrcc.w	r0, [r1], #4
 80001e6:	f842 0b04 	strcc.w	r0, [r2], #4
 80001ea:	e7f8      	bcc.n	80001de <dloop>
 80001ec:	2000      	movs	r0, #0
 80001ee:	4917      	ldr	r1, [pc, #92]	; (800024c <endfiniloop+0x24>)
 80001f0:	4a17      	ldr	r2, [pc, #92]	; (8000250 <endfiniloop+0x28>)

080001f2 <bloop>:
 80001f2:	4291      	cmp	r1, r2
 80001f4:	bf3c      	itt	cc
 80001f6:	f841 0b04 	strcc.w	r0, [r1], #4
 80001fa:	e7fa      	bcc.n	80001f2 <bloop>
 80001fc:	f001 fab0 	bl	8001760 <__init_ram_areas>
 8000200:	f001 fade 	bl	80017c0 <__late_init>
 8000204:	4c13      	ldr	r4, [pc, #76]	; (8000254 <endfiniloop+0x2c>)
 8000206:	4d14      	ldr	r5, [pc, #80]	; (8000258 <endfiniloop+0x30>)

08000208 <initloop>:
 8000208:	42ac      	cmp	r4, r5
 800020a:	da03      	bge.n	8000214 <endinitloop>
 800020c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000210:	4788      	blx	r1
 8000212:	e7f9      	b.n	8000208 <initloop>

08000214 <endinitloop>:
 8000214:	f001 fae4 	bl	80017e0 <main>
 8000218:	4c10      	ldr	r4, [pc, #64]	; (800025c <endfiniloop+0x34>)
 800021a:	4d11      	ldr	r5, [pc, #68]	; (8000260 <endfiniloop+0x38>)

0800021c <finiloop>:
 800021c:	42ac      	cmp	r4, r5
 800021e:	da03      	bge.n	8000228 <endfiniloop>
 8000220:	f854 1b04 	ldr.w	r1, [r4], #4
 8000224:	4788      	blx	r1
 8000226:	e7f9      	b.n	800021c <finiloop>

08000228 <endfiniloop>:
 8000228:	f001 bac2 	b.w	80017b0 <__default_exit>
 800022c:	20000800 	.word	0x20000800
 8000230:	55555555 	.word	0x55555555
 8000234:	20000000 	.word	0x20000000
 8000238:	20000400 	.word	0x20000400
 800023c:	20000400 	.word	0x20000400
 8000240:	08003f40 	.word	0x08003f40
 8000244:	20000800 	.word	0x20000800
 8000248:	20000874 	.word	0x20000874
 800024c:	20000878 	.word	0x20000878
 8000250:	200013e4 	.word	0x200013e4
 8000254:	080001a0 	.word	0x080001a0
 8000258:	080001a0 	.word	0x080001a0
 800025c:	080001a0 	.word	0x080001a0
 8000260:	080001a0 	.word	0x080001a0
	...

08000270 <_port_switch>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000278:	68c3      	ldr	r3, [r0, #12]
 800027a:	469d      	mov	sp, r3
 800027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000280 <_port_thread_start>:
 8000280:	2300      	movs	r3, #0
 8000282:	f383 8811 	msr	BASEPRI, r3
 8000286:	4628      	mov	r0, r5
 8000288:	47a0      	blx	r4
 800028a:	2000      	movs	r0, #0
 800028c:	f001 f890 	bl	80013b0 <chThdExit>

08000290 <_port_switch_from_isr>:
 8000290:	f000 fec6 	bl	8001020 <chSchDoReschedule>

08000294 <_port_exit_from_isr>:
 8000294:	df00      	svc	0
 8000296:	e7fe      	b.n	8000296 <_port_exit_from_isr+0x2>
	...
 80002a0:	eba2 0003 	sub.w	r0, r2, r3
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop

080002a8 <strcmp>:
 80002a8:	7802      	ldrb	r2, [r0, #0]
 80002aa:	780b      	ldrb	r3, [r1, #0]
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d1f5      	bne.n	80002a0 <_port_exit_from_isr+0xc>
 80002b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80002b8:	ea40 0401 	orr.w	r4, r0, r1
 80002bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80002c0:	f06f 0c00 	mvn.w	ip, #0
 80002c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80002c8:	b312      	cbz	r2, 8000310 <strcmp+0x68>
 80002ca:	ea80 0401 	eor.w	r4, r0, r1
 80002ce:	f014 0f07 	tst.w	r4, #7
 80002d2:	d16a      	bne.n	80003aa <strcmp+0x102>
 80002d4:	f000 0407 	and.w	r4, r0, #7
 80002d8:	f020 0007 	bic.w	r0, r0, #7
 80002dc:	f004 0503 	and.w	r5, r4, #3
 80002e0:	f021 0107 	bic.w	r1, r1, #7
 80002e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80002e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80002ec:	f014 0f04 	tst.w	r4, #4
 80002f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80002f4:	fa0c f405 	lsl.w	r4, ip, r5
 80002f8:	ea62 0204 	orn	r2, r2, r4
 80002fc:	ea66 0604 	orn	r6, r6, r4
 8000300:	d00a      	beq.n	8000318 <strcmp+0x70>
 8000302:	ea63 0304 	orn	r3, r3, r4
 8000306:	4662      	mov	r2, ip
 8000308:	ea67 0704 	orn	r7, r7, r4
 800030c:	4666      	mov	r6, ip
 800030e:	e003      	b.n	8000318 <strcmp+0x70>
 8000310:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000314:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000318:	fa82 f54c 	uadd8	r5, r2, ip
 800031c:	ea82 0406 	eor.w	r4, r2, r6
 8000320:	faa4 f48c 	sel	r4, r4, ip
 8000324:	bb6c      	cbnz	r4, 8000382 <strcmp+0xda>
 8000326:	fa83 f54c 	uadd8	r5, r3, ip
 800032a:	ea83 0507 	eor.w	r5, r3, r7
 800032e:	faa5 f58c 	sel	r5, r5, ip
 8000332:	b995      	cbnz	r5, 800035a <strcmp+0xb2>
 8000334:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000338:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800033c:	fa82 f54c 	uadd8	r5, r2, ip
 8000340:	ea82 0406 	eor.w	r4, r2, r6
 8000344:	faa4 f48c 	sel	r4, r4, ip
 8000348:	fa83 f54c 	uadd8	r5, r3, ip
 800034c:	ea83 0507 	eor.w	r5, r3, r7
 8000350:	faa5 f58c 	sel	r5, r5, ip
 8000354:	4325      	orrs	r5, r4
 8000356:	d0db      	beq.n	8000310 <strcmp+0x68>
 8000358:	b99c      	cbnz	r4, 8000382 <strcmp+0xda>
 800035a:	ba2d      	rev	r5, r5
 800035c:	fab5 f485 	clz	r4, r5
 8000360:	f024 0407 	bic.w	r4, r4, #7
 8000364:	fa27 f104 	lsr.w	r1, r7, r4
 8000368:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800036c:	fa23 f304 	lsr.w	r3, r3, r4
 8000370:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000374:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000378:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800037c:	eba0 0001 	sub.w	r0, r0, r1
 8000380:	4770      	bx	lr
 8000382:	ba24      	rev	r4, r4
 8000384:	fab4 f484 	clz	r4, r4
 8000388:	f024 0407 	bic.w	r4, r4, #7
 800038c:	fa26 f104 	lsr.w	r1, r6, r4
 8000390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000394:	fa22 f204 	lsr.w	r2, r2, r4
 8000398:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800039c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80003a4:	eba0 0001 	sub.w	r0, r0, r1
 80003a8:	4770      	bx	lr
 80003aa:	f014 0f03 	tst.w	r4, #3
 80003ae:	d13c      	bne.n	800042a <strcmp+0x182>
 80003b0:	f010 0403 	ands.w	r4, r0, #3
 80003b4:	d128      	bne.n	8000408 <strcmp+0x160>
 80003b6:	f850 2b08 	ldr.w	r2, [r0], #8
 80003ba:	f851 3b08 	ldr.w	r3, [r1], #8
 80003be:	fa82 f54c 	uadd8	r5, r2, ip
 80003c2:	ea82 0503 	eor.w	r5, r2, r3
 80003c6:	faa5 f58c 	sel	r5, r5, ip
 80003ca:	b95d      	cbnz	r5, 80003e4 <strcmp+0x13c>
 80003cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80003d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80003d4:	fa82 f54c 	uadd8	r5, r2, ip
 80003d8:	ea82 0503 	eor.w	r5, r2, r3
 80003dc:	faa5 f58c 	sel	r5, r5, ip
 80003e0:	2d00      	cmp	r5, #0
 80003e2:	d0e8      	beq.n	80003b6 <strcmp+0x10e>
 80003e4:	ba2d      	rev	r5, r5
 80003e6:	fab5 f485 	clz	r4, r5
 80003ea:	f024 0407 	bic.w	r4, r4, #7
 80003ee:	fa23 f104 	lsr.w	r1, r3, r4
 80003f2:	fa22 f204 	lsr.w	r2, r2, r4
 80003f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80003fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000402:	eba0 0001 	sub.w	r0, r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800040c:	f020 0003 	bic.w	r0, r0, #3
 8000410:	f850 2b08 	ldr.w	r2, [r0], #8
 8000414:	f021 0103 	bic.w	r1, r1, #3
 8000418:	f851 3b08 	ldr.w	r3, [r1], #8
 800041c:	fa0c f404 	lsl.w	r4, ip, r4
 8000420:	ea62 0204 	orn	r2, r2, r4
 8000424:	ea63 0304 	orn	r3, r3, r4
 8000428:	e7c9      	b.n	80003be <strcmp+0x116>
 800042a:	f010 0403 	ands.w	r4, r0, #3
 800042e:	d01a      	beq.n	8000466 <strcmp+0x1be>
 8000430:	eba1 0104 	sub.w	r1, r1, r4
 8000434:	f020 0003 	bic.w	r0, r0, #3
 8000438:	07e4      	lsls	r4, r4, #31
 800043a:	f850 2b04 	ldr.w	r2, [r0], #4
 800043e:	d006      	beq.n	800044e <strcmp+0x1a6>
 8000440:	d20f      	bcs.n	8000462 <strcmp+0x1ba>
 8000442:	788b      	ldrb	r3, [r1, #2]
 8000444:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	d106      	bne.n	800045a <strcmp+0x1b2>
 800044c:	b12b      	cbz	r3, 800045a <strcmp+0x1b2>
 800044e:	78cb      	ldrb	r3, [r1, #3]
 8000450:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	d100      	bne.n	800045a <strcmp+0x1b2>
 8000458:	b91b      	cbnz	r3, 8000462 <strcmp+0x1ba>
 800045a:	4620      	mov	r0, r4
 800045c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000460:	4770      	bx	lr
 8000462:	f101 0104 	add.w	r1, r1, #4
 8000466:	f850 2b04 	ldr.w	r2, [r0], #4
 800046a:	07cc      	lsls	r4, r1, #31
 800046c:	f021 0103 	bic.w	r1, r1, #3
 8000470:	f851 3b04 	ldr.w	r3, [r1], #4
 8000474:	d848      	bhi.n	8000508 <strcmp+0x260>
 8000476:	d224      	bcs.n	80004c2 <strcmp+0x21a>
 8000478:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 800047c:	fa82 f54c 	uadd8	r5, r2, ip
 8000480:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000484:	faa5 f58c 	sel	r5, r5, ip
 8000488:	d10a      	bne.n	80004a0 <strcmp+0x1f8>
 800048a:	b965      	cbnz	r5, 80004a6 <strcmp+0x1fe>
 800048c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000490:	ea84 0402 	eor.w	r4, r4, r2
 8000494:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000498:	d10e      	bne.n	80004b8 <strcmp+0x210>
 800049a:	f850 2b04 	ldr.w	r2, [r0], #4
 800049e:	e7eb      	b.n	8000478 <strcmp+0x1d0>
 80004a0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80004a4:	e055      	b.n	8000552 <strcmp+0x2aa>
 80004a6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 80004aa:	d14d      	bne.n	8000548 <strcmp+0x2a0>
 80004ac:	7808      	ldrb	r0, [r1, #0]
 80004ae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80004b2:	f1c0 0000 	rsb	r0, r0, #0
 80004b6:	4770      	bx	lr
 80004b8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004bc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80004c0:	e047      	b.n	8000552 <strcmp+0x2aa>
 80004c2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 80004c6:	fa82 f54c 	uadd8	r5, r2, ip
 80004ca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 80004ce:	faa5 f58c 	sel	r5, r5, ip
 80004d2:	d10a      	bne.n	80004ea <strcmp+0x242>
 80004d4:	b965      	cbnz	r5, 80004f0 <strcmp+0x248>
 80004d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80004da:	ea84 0402 	eor.w	r4, r4, r2
 80004de:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 80004e2:	d10c      	bne.n	80004fe <strcmp+0x256>
 80004e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80004e8:	e7eb      	b.n	80004c2 <strcmp+0x21a>
 80004ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80004ee:	e030      	b.n	8000552 <strcmp+0x2aa>
 80004f0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 80004f4:	d128      	bne.n	8000548 <strcmp+0x2a0>
 80004f6:	880b      	ldrh	r3, [r1, #0]
 80004f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80004fc:	e029      	b.n	8000552 <strcmp+0x2aa>
 80004fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000502:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000506:	e024      	b.n	8000552 <strcmp+0x2aa>
 8000508:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 800050c:	fa82 f54c 	uadd8	r5, r2, ip
 8000510:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000514:	faa5 f58c 	sel	r5, r5, ip
 8000518:	d10a      	bne.n	8000530 <strcmp+0x288>
 800051a:	b965      	cbnz	r5, 8000536 <strcmp+0x28e>
 800051c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000520:	ea84 0402 	eor.w	r4, r4, r2
 8000524:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000528:	d109      	bne.n	800053e <strcmp+0x296>
 800052a:	f850 2b04 	ldr.w	r2, [r0], #4
 800052e:	e7eb      	b.n	8000508 <strcmp+0x260>
 8000530:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000534:	e00d      	b.n	8000552 <strcmp+0x2aa>
 8000536:	f015 0fff 	tst.w	r5, #255	; 0xff
 800053a:	d105      	bne.n	8000548 <strcmp+0x2a0>
 800053c:	680b      	ldr	r3, [r1, #0]
 800053e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000546:	e004      	b.n	8000552 <strcmp+0x2aa>
 8000548:	f04f 0000 	mov.w	r0, #0
 800054c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000550:	4770      	bx	lr
 8000552:	ba12      	rev	r2, r2
 8000554:	ba1b      	rev	r3, r3
 8000556:	fa82 f44c 	uadd8	r4, r2, ip
 800055a:	ea82 0403 	eor.w	r4, r2, r3
 800055e:	faa4 f58c 	sel	r5, r4, ip
 8000562:	fab5 f485 	clz	r4, r5
 8000566:	fa02 f204 	lsl.w	r2, r2, r4
 800056a:	fa03 f304 	lsl.w	r3, r3, r4
 800056e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8000572:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000576:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800057a:	4770      	bx	lr
 800057c:	0000      	movs	r0, r0
	...

08000580 <notify1.lto_priv.81>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8000580:	4a02      	ldr	r2, [pc, #8]	; (800058c <notify1.lto_priv.81+0xc>)
 8000582:	6813      	ldr	r3, [r2, #0]
 8000584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000588:	6013      	str	r3, [r2, #0]
 800058a:	4770      	bx	lr
 800058c:	40013800 	.word	0x40013800

08000590 <spi_lld_serve_tx_interrupt.lto_priv.79>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8000590:	070b      	lsls	r3, r1, #28
 8000592:	d400      	bmi.n	8000596 <spi_lld_serve_tx_interrupt.lto_priv.79+0x6>
 8000594:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000596:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <spi_lld_serve_tx_interrupt.lto_priv.79+0x10>)
 800059a:	4a02      	ldr	r2, [pc, #8]	; (80005a4 <spi_lld_serve_tx_interrupt.lto_priv.79+0x14>)
 800059c:	62da      	str	r2, [r3, #44]	; 0x2c
 800059e:	e7fe      	b.n	800059e <spi_lld_serve_tx_interrupt.lto_priv.79+0xe>
 80005a0:	20001138 	.word	0x20001138
 80005a4:	080037f0 	.word	0x080037f0
	...

080005b0 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80005b0:	2320      	movs	r3, #32
 80005b2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <_port_irq_epilogue+0x44>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80005be:	d102      	bne.n	80005c6 <_port_irq_epilogue+0x16>
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80005c6:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80005ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005ce:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80005d2:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80005d6:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80005da:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <_port_irq_epilogue+0x48>)
 80005dc:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 80005de:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80005e0:	6889      	ldr	r1, [r1, #8]
 80005e2:	6892      	ldr	r2, [r2, #8]
 80005e4:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80005e6:	bf8c      	ite	hi
 80005e8:	4a04      	ldrhi	r2, [pc, #16]	; (80005fc <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80005ea:	4a05      	ldrls	r2, [pc, #20]	; (8000600 <_port_irq_epilogue+0x50>)
 80005ec:	f843 2c08 	str.w	r2, [r3, #-8]
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	20001138 	.word	0x20001138
 80005fc:	08000291 	.word	0x08000291
 8000600:	08000294 	.word	0x08000294
	...

08000610 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000614:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8000618:	692b      	ldr	r3, [r5, #16]
 800061a:	079b      	lsls	r3, r3, #30
 800061c:	d403      	bmi.n	8000626 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800061e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000622:	f7ff bfc5 	b.w	80005b0 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000626:	2700      	movs	r7, #0
 8000628:	612f      	str	r7, [r5, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800062a:	2620      	movs	r6, #32
 800062c:	f386 8811 	msr	BASEPRI, r6
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000630:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80006ac <VectorB0+0x9c>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000634:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000636:	f8d9 301c 	ldr.w	r3, [r9, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800063a:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28
 800063e:	689a      	ldr	r2, [r3, #8]
 8000640:	ebce 0001 	rsb	r0, lr, r1
 8000644:	4290      	cmp	r0, r2
 8000646:	f109 081c 	add.w	r8, r9, #28
 800064a:	d31c      	bcc.n	8000686 <VectorB0+0x76>
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800064c:	6819      	ldr	r1, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 800064e:	68dc      	ldr	r4, [r3, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000650:	4472      	add	r2, lr
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000652:	4541      	cmp	r1, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000654:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000658:	f8c1 8004 	str.w	r8, [r1, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800065c:	f8c9 101c 	str.w	r1, [r9, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000660:	60df      	str	r7, [r3, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000662:	bf08      	it	eq
 8000664:	60ef      	streq	r7, [r5, #12]
 8000666:	f387 8811 	msr	BASEPRI, r7
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 800066a:	6918      	ldr	r0, [r3, #16]
 800066c:	47a0      	blx	r4
 800066e:	f386 8811 	msr	BASEPRI, r6
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000672:	f8d9 301c 	ldr.w	r3, [r9, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000676:	6a69      	ldr	r1, [r5, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000678:	f8d9 e028 	ldr.w	lr, [r9, #40]	; 0x28
 800067c:	689a      	ldr	r2, [r3, #8]
 800067e:	ebce 0001 	rsb	r0, lr, r1
 8000682:	4282      	cmp	r2, r0
 8000684:	d9e2      	bls.n	800064c <VectorB0+0x3c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000686:	4543      	cmp	r3, r8
 8000688:	d008      	beq.n	800069c <VectorB0+0x8c>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800068a:	4472      	add	r2, lr
 800068c:	1a52      	subs	r2, r2, r1
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800068e:	2a01      	cmp	r2, #1
 8000690:	bf98      	it	ls
 8000692:	2202      	movls	r2, #2
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  }
  port_timer_set_alarm(now + delta);
 8000698:	440a      	add	r2, r1
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
 800069c:	2300      	movs	r3, #0
 800069e:	f383 8811 	msr	BASEPRI, r3
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 80006a2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80006a6:	f7ff bf83 	b.w	80005b0 <_port_irq_epilogue>
 80006aa:	bf00      	nop
 80006ac:	20001138 	.word	0x20001138

080006b0 <Vector130>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <Vector130+0x28>)
 80006b2:	6819      	ldr	r1, [r3, #0]
 80006b4:	f3c1 4103 	ubfx	r1, r1, #16, #4
 80006b8:	b159      	cbz	r1, 80006d2 <Vector130+0x22>
 80006ba:	4808      	ldr	r0, [pc, #32]	; (80006dc <Vector130+0x2c>)
 80006bc:	6d82      	ldr	r2, [r0, #88]	; 0x58
/**
 * @brief   DMA2 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80006be:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 80006c0:	040c      	lsls	r4, r1, #16
 80006c2:	605c      	str	r4, [r3, #4]
 80006c4:	b10a      	cbz	r2, 80006ca <Vector130+0x1a>
 80006c6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80006c8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80006ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);

  OSAL_IRQ_EPILOGUE();
 80006ce:	f7ff bf6f 	b.w	80005b0 <_port_irq_epilogue>
 80006d2:	f7ff bf6d 	b.w	80005b0 <_port_irq_epilogue>
 80006d6:	bf00      	nop
 80006d8:	40020400 	.word	0x40020400
 80006dc:	200010d8 	.word	0x200010d8

080006e0 <Vector12C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <Vector12C+0x28>)
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80006e8:	b159      	cbz	r1, 8000702 <Vector12C+0x22>
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <Vector12C+0x2c>)
 80006ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
/**
 * @brief   DMA2 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 80006ee:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 80006f0:	030c      	lsls	r4, r1, #12
 80006f2:	605c      	str	r4, [r3, #4]
 80006f4:	b10a      	cbz	r2, 80006fa <Vector12C+0x1a>
 80006f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80006f8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80006fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);

  OSAL_IRQ_EPILOGUE();
 80006fe:	f7ff bf57 	b.w	80005b0 <_port_irq_epilogue>
 8000702:	f7ff bf55 	b.w	80005b0 <_port_irq_epilogue>
 8000706:	bf00      	nop
 8000708:	40020400 	.word	0x40020400
 800070c:	200010d8 	.word	0x200010d8

08000710 <Vector128>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <Vector128+0x28>)
 8000712:	6819      	ldr	r1, [r3, #0]
 8000714:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8000718:	b159      	cbz	r1, 8000732 <Vector128+0x22>
 800071a:	4808      	ldr	r0, [pc, #32]	; (800073c <Vector128+0x2c>)
 800071c:	6c82      	ldr	r2, [r0, #72]	; 0x48
/**
 * @brief   DMA2 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800071e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 8000720:	020c      	lsls	r4, r1, #8
 8000722:	605c      	str	r4, [r3, #4]
 8000724:	b10a      	cbz	r2, 800072a <Vector128+0x1a>
 8000726:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8000728:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);

  OSAL_IRQ_EPILOGUE();
 800072e:	f7ff bf3f 	b.w	80005b0 <_port_irq_epilogue>
 8000732:	f7ff bf3d 	b.w	80005b0 <_port_irq_epilogue>
 8000736:	bf00      	nop
 8000738:	40020400 	.word	0x40020400
 800073c:	200010d8 	.word	0x200010d8

08000740 <Vector124>:
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <Vector124+0x28>)
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8000748:	b159      	cbz	r1, 8000762 <Vector124+0x22>
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <Vector124+0x2c>)
 800074c:	6c02      	ldr	r2, [r0, #64]	; 0x40
/**
 * @brief   DMA2 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800074e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8000750:	010c      	lsls	r4, r1, #4
 8000752:	605c      	str	r4, [r3, #4]
 8000754:	b10a      	cbz	r2, 800075a <Vector124+0x1a>
 8000756:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000758:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800075a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);

  OSAL_IRQ_EPILOGUE();
 800075e:	f7ff bf27 	b.w	80005b0 <_port_irq_epilogue>
 8000762:	f7ff bf25 	b.w	80005b0 <_port_irq_epilogue>
 8000766:	bf00      	nop
 8000768:	40020400 	.word	0x40020400
 800076c:	200010d8 	.word	0x200010d8

08000770 <Vector120>:
/**
 * @brief   DMA2 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8000770:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <Vector120+0x20>)
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	f011 010f 	ands.w	r1, r1, #15
 800077a:	d005      	beq.n	8000788 <Vector120+0x18>
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <Vector120+0x24>)
 800077e:	6059      	str	r1, [r3, #4]
 8000780:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000782:	b10b      	cbz	r3, 8000788 <Vector120+0x18>
 8000784:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8000786:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8000788:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);

  OSAL_IRQ_EPILOGUE();
 800078c:	f7ff bf10 	b.w	80005b0 <_port_irq_epilogue>
 8000790:	40020400 	.word	0x40020400
 8000794:	200010d8 	.word	0x200010d8
	...

080007a0 <Vector84>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <Vector84+0x28>)
 80007a2:	6819      	ldr	r1, [r3, #0]
 80007a4:	f3c1 6103 	ubfx	r1, r1, #24, #4
 80007a8:	b159      	cbz	r1, 80007c2 <Vector84+0x22>
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <Vector84+0x2c>)
 80007ac:	6b02      	ldr	r2, [r0, #48]	; 0x30
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 80007ae:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 80007b0:	060c      	lsls	r4, r1, #24
 80007b2:	605c      	str	r4, [r3, #4]
 80007b4:	b10a      	cbz	r2, 80007ba <Vector84+0x1a>
 80007b6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80007b8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80007ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 80007be:	f7ff bef7 	b.w	80005b0 <_port_irq_epilogue>
 80007c2:	f7ff bef5 	b.w	80005b0 <_port_irq_epilogue>
 80007c6:	bf00      	nop
 80007c8:	40020000 	.word	0x40020000
 80007cc:	200010d8 	.word	0x200010d8

080007d0 <Vector80>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <Vector80+0x28>)
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	f3c1 5103 	ubfx	r1, r1, #20, #4
 80007d8:	b159      	cbz	r1, 80007f2 <Vector80+0x22>
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <Vector80+0x2c>)
 80007dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80007de:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 80007e0:	050c      	lsls	r4, r1, #20
 80007e2:	605c      	str	r4, [r3, #4]
 80007e4:	b10a      	cbz	r2, 80007ea <Vector80+0x1a>
 80007e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80007e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80007ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 80007ee:	f7ff bedf 	b.w	80005b0 <_port_irq_epilogue>
 80007f2:	f7ff bedd 	b.w	80005b0 <_port_irq_epilogue>
 80007f6:	bf00      	nop
 80007f8:	40020000 	.word	0x40020000
 80007fc:	200010d8 	.word	0x200010d8

08000800 <Vector7C>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <Vector7C+0x28>)
 8000802:	6819      	ldr	r1, [r3, #0]
 8000804:	f3c1 4103 	ubfx	r1, r1, #16, #4
 8000808:	b159      	cbz	r1, 8000822 <Vector7C+0x22>
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <Vector7C+0x2c>)
 800080c:	6a02      	ldr	r2, [r0, #32]
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800080e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8000810:	040c      	lsls	r4, r1, #16
 8000812:	605c      	str	r4, [r3, #4]
 8000814:	b10a      	cbz	r2, 800081a <Vector7C+0x1a>
 8000816:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000818:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800081a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 800081e:	f7ff bec7 	b.w	80005b0 <_port_irq_epilogue>
 8000822:	f7ff bec5 	b.w	80005b0 <_port_irq_epilogue>
 8000826:	bf00      	nop
 8000828:	40020000 	.word	0x40020000
 800082c:	200010d8 	.word	0x200010d8

08000830 <Vector78>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <Vector78+0x28>)
 8000832:	6819      	ldr	r1, [r3, #0]
 8000834:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8000838:	b159      	cbz	r1, 8000852 <Vector78+0x22>
 800083a:	4808      	ldr	r0, [pc, #32]	; (800085c <Vector78+0x2c>)
 800083c:	6982      	ldr	r2, [r0, #24]
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 800083e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000840:	030c      	lsls	r4, r1, #12
 8000842:	605c      	str	r4, [r3, #4]
 8000844:	b10a      	cbz	r2, 800084a <Vector78+0x1a>
 8000846:	69c0      	ldr	r0, [r0, #28]
 8000848:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800084a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 800084e:	f7ff beaf 	b.w	80005b0 <_port_irq_epilogue>
 8000852:	f7ff bead 	b.w	80005b0 <_port_irq_epilogue>
 8000856:	bf00      	nop
 8000858:	40020000 	.word	0x40020000
 800085c:	200010d8 	.word	0x200010d8

08000860 <Vector74>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <Vector74+0x28>)
 8000862:	6819      	ldr	r1, [r3, #0]
 8000864:	f3c1 2103 	ubfx	r1, r1, #8, #4
 8000868:	b159      	cbz	r1, 8000882 <Vector74+0x22>
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <Vector74+0x2c>)
 800086c:	6902      	ldr	r2, [r0, #16]
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800086e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000870:	020c      	lsls	r4, r1, #8
 8000872:	605c      	str	r4, [r3, #4]
 8000874:	b10a      	cbz	r2, 800087a <Vector74+0x1a>
 8000876:	6940      	ldr	r0, [r0, #20]
 8000878:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800087a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 800087e:	f7ff be97 	b.w	80005b0 <_port_irq_epilogue>
 8000882:	f7ff be95 	b.w	80005b0 <_port_irq_epilogue>
 8000886:	bf00      	nop
 8000888:	40020000 	.word	0x40020000
 800088c:	200010d8 	.word	0x200010d8

08000890 <Vector70>:
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <Vector70+0x28>)
 8000892:	6819      	ldr	r1, [r3, #0]
 8000894:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8000898:	b159      	cbz	r1, 80008b2 <Vector70+0x22>
 800089a:	4808      	ldr	r0, [pc, #32]	; (80008bc <Vector70+0x2c>)
 800089c:	6882      	ldr	r2, [r0, #8]
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800089e:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 80008a0:	010c      	lsls	r4, r1, #4
 80008a2:	605c      	str	r4, [r3, #4]
 80008a4:	b10a      	cbz	r2, 80008aa <Vector70+0x1a>
 80008a6:	68c0      	ldr	r0, [r0, #12]
 80008a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 80008aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 80008ae:	f7ff be7f 	b.w	80005b0 <_port_irq_epilogue>
 80008b2:	f7ff be7d 	b.w	80005b0 <_port_irq_epilogue>
 80008b6:	bf00      	nop
 80008b8:	40020000 	.word	0x40020000
 80008bc:	200010d8 	.word	0x200010d8

080008c0 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 80008c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 80008c2:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <Vector6C+0x20>)
 80008c4:	6819      	ldr	r1, [r3, #0]
 80008c6:	f011 010f 	ands.w	r1, r1, #15
 80008ca:	d005      	beq.n	80008d8 <Vector6C+0x18>
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <Vector6C+0x24>)
 80008ce:	6059      	str	r1, [r3, #4]
 80008d0:	6813      	ldr	r3, [r2, #0]
 80008d2:	b10b      	cbz	r3, 80008d8 <Vector6C+0x18>
 80008d4:	6850      	ldr	r0, [r2, #4]
 80008d6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80008d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 80008dc:	f7ff be68 	b.w	80005b0 <_port_irq_epilogue>
 80008e0:	40020000 	.word	0x40020000
 80008e4:	200010d8 	.word	0x200010d8
	...

080008f0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80008f0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80008f4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80008f6:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80008fa:	2300      	movs	r3, #0
 80008fc:	f383 8811 	msr	BASEPRI, r3
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
	...

08000910 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8000910:	b410      	push	{r4}
 8000912:	2320      	movs	r3, #32
 8000914:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000918:	4c09      	ldr	r4, [pc, #36]	; (8000940 <chCoreAlloc+0x30>)
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <chCoreAlloc+0x34>)
 800091c:	6822      	ldr	r2, [r4, #0]
 800091e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8000920:	1dc3      	adds	r3, r0, #7
 8000922:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8000926:	1a89      	subs	r1, r1, r2
 8000928:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800092a:	bf9d      	ittte	ls
 800092c:	189b      	addls	r3, r3, r2
 800092e:	6023      	strls	r3, [r4, #0]

  return p;
 8000930:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8000932:	2000      	movhi	r0, #0
 8000934:	2300      	movs	r3, #0
 8000936:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800093a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	20000bb4 	.word	0x20000bb4
 8000944:	20000bac 	.word	0x20000bac
	...

08000950 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8000950:	b410      	push	{r4}
 8000952:	2320      	movs	r3, #32
 8000954:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000958:	7f03      	ldrb	r3, [r0, #28]
 800095a:	2b07      	cmp	r3, #7
 800095c:	d80e      	bhi.n	800097c <wakeup+0x2c>
 800095e:	e8df f003 	tbb	[pc, r3]
 8000962:	0d27      	.short	0x0d27
 8000964:	0408230d 	.word	0x0408230d
 8000968:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800096a:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800096c:	6893      	ldr	r3, [r2, #8]
 800096e:	3301      	adds	r3, #1
 8000970:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000972:	e890 000c 	ldmia.w	r0, {r2, r3}
 8000976:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8000978:	6802      	ldr	r2, [r0, #0]
 800097a:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800097c:	f04f 34ff 	mov.w	r4, #4294967295
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000980:	2200      	movs	r2, #0
 8000982:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000984:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000986:	6204      	str	r4, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000988:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800098a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	428a      	cmp	r2, r1
 8000990:	d2fb      	bcs.n	800098a <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8000996:	6003      	str	r3, [r0, #0]
 8000998:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800099a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800099c:	6058      	str	r0, [r3, #4]
 800099e:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80009a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009a6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80009a8:	6a03      	ldr	r3, [r0, #32]
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	e7e5      	b.n	800097c <wakeup+0x2c>
 80009b0:	2300      	movs	r3, #0
 80009b2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80009b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20001138 	.word	0x20001138

080009c0 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80009c0:	2200      	movs	r2, #0
 80009c2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80009c6:	b410      	push	{r4}
 80009c8:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80009ca:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80009cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	428a      	cmp	r2, r1
 80009d2:	d2fb      	bcs.n	80009cc <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80009d8:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80009da:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80009dc:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80009de:	605c      	str	r4, [r3, #4]

  return tp;
}
 80009e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20001138 	.word	0x20001138
 80009ec:	00000000 	.word	0x00000000

080009f0 <spi_lld_serve_rx_interrupt.lto_priv.78>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80009f2:	070b      	lsls	r3, r1, #28
 80009f4:	d434      	bmi.n	8000a60 <spi_lld_serve_rx_interrupt.lto_priv.78+0x70>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80009f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  dmaStreamDisable(spip->dmarx);
 80009f8:	6a02      	ldr	r2, [r0, #32]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 80009fa:	6845      	ldr	r5, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 80009fc:	6856      	ldr	r6, [r2, #4]
 80009fe:	6817      	ldr	r7, [r2, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8000a00:	682d      	ldr	r5, [r5, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8000a02:	e893 5000 	ldmia.w	r3, {ip, lr}
 8000a06:	f8de 1000 	ldr.w	r1, [lr]
 8000a0a:	f021 010f 	bic.w	r1, r1, #15
 8000a0e:	f8ce 1000 	str.w	r1, [lr]
 8000a12:	7c19      	ldrb	r1, [r3, #16]
 8000a14:	230f      	movs	r3, #15
 8000a16:	fa03 f101 	lsl.w	r1, r3, r1
 8000a1a:	f8cc 1004 	str.w	r1, [ip, #4]
  dmaStreamDisable(spip->dmarx);
 8000a1e:	6831      	ldr	r1, [r6, #0]
 8000a20:	f021 010f 	bic.w	r1, r1, #15
 8000a24:	6031      	str	r1, [r6, #0]
 8000a26:	7c12      	ldrb	r2, [r2, #16]
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	607b      	str	r3, [r7, #4]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8000a2e:	b1a5      	cbz	r5, 8000a5a <spi_lld_serve_rx_interrupt.lto_priv.78+0x6a>
 8000a30:	2304      	movs	r3, #4
 8000a32:	7003      	strb	r3, [r0, #0]
 8000a34:	47a8      	blx	r5
 8000a36:	7823      	ldrb	r3, [r4, #0]
 8000a38:	2b04      	cmp	r3, #4
 8000a3a:	d00e      	beq.n	8000a5a <spi_lld_serve_rx_interrupt.lto_priv.78+0x6a>
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000a42:	68a3      	ldr	r3, [r4, #8]
 8000a44:	b12b      	cbz	r3, 8000a52 <spi_lld_serve_rx_interrupt.lto_priv.78+0x62>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8000a46:	2200      	movs	r2, #0
 8000a48:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000a4a:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8000a4c:	621a      	str	r2, [r3, #32]
    (void) chSchReadyI(tp);
 8000a4e:	f7ff ffb7 	bl	80009c0 <chSchReadyI>
 8000a52:	2300      	movs	r3, #0
 8000a54:	f383 8811 	msr	BASEPRI, r3
 8000a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	7023      	strb	r3, [r4, #0]
 8000a5e:	e7ed      	b.n	8000a3c <spi_lld_serve_rx_interrupt.lto_priv.78+0x4c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
 8000a62:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <spi_lld_serve_rx_interrupt.lto_priv.78+0x7c>)
 8000a64:	4a02      	ldr	r2, [pc, #8]	; (8000a70 <spi_lld_serve_rx_interrupt.lto_priv.78+0x80>)
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a68:	e7fe      	b.n	8000a68 <spi_lld_serve_rx_interrupt.lto_priv.78+0x78>
 8000a6a:	bf00      	nop
 8000a6c:	20001138 	.word	0x20001138
 8000a70:	080037f0 	.word	0x080037f0
	...

08000a80 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8000a82:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a84:	42a0      	cmp	r0, r4
 8000a86:	d021      	beq.n	8000acc <chEvtBroadcastFlagsI+0x4c>
 8000a88:	460e      	mov	r6, r1
 8000a8a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	e002      	b.n	8000a96 <chEvtBroadcastFlagsI+0x16>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000a90:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000a92:	42a7      	cmp	r7, r4
 8000a94:	d01a      	beq.n	8000acc <chEvtBroadcastFlagsI+0x4c>
  /*lint -restore*/
    elp->el_flags |= flags;
 8000a96:	68e3      	ldr	r3, [r4, #12]
 8000a98:	4333      	orrs	r3, r6
 8000a9a:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000a9c:	b116      	cbz	r6, 8000aa4 <chEvtBroadcastFlagsI+0x24>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8000a9e:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8000aa0:	4213      	tst	r3, r2
 8000aa2:	d0f5      	beq.n	8000a90 <chEvtBroadcastFlagsI+0x10>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 8000aa4:	6860      	ldr	r0, [r4, #4]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000aa6:	68a3      	ldr	r3, [r4, #8]
 8000aa8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000aaa:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000aac:	430b      	orrs	r3, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000aae:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8000ab0:	6343      	str	r3, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000ab2:	d00c      	beq.n	8000ace <chEvtBroadcastFlagsI+0x4e>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000ab4:	2a0b      	cmp	r2, #11
 8000ab6:	d1eb      	bne.n	8000a90 <chEvtBroadcastFlagsI+0x10>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8000ab8:	6a02      	ldr	r2, [r0, #32]
 8000aba:	4013      	ands	r3, r2

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d1e7      	bne.n	8000a90 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000ac0:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8000ac2:	f7ff ff7d 	bl	80009c0 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
    }
    elp = elp->el_next;
 8000ac6:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000ac8:	42a7      	cmp	r7, r4
 8000aca:	d1e4      	bne.n	8000a96 <chEvtBroadcastFlagsI+0x16>
 8000acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8000ace:	6a02      	ldr	r2, [r0, #32]
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8000ad0:	4213      	tst	r3, r2
 8000ad2:	d0dd      	beq.n	8000a90 <chEvtBroadcastFlagsI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 8000ad4:	6205      	str	r5, [r0, #32]
    (void) chSchReadyI(tp);
 8000ad6:	f7ff ff73 	bl	80009c0 <chSchReadyI>
 8000ada:	e7f4      	b.n	8000ac6 <chEvtBroadcastFlagsI+0x46>
 8000adc:	0000      	movs	r0, r0
	...

08000ae0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8000ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8000ae4:	4d63      	ldr	r5, [pc, #396]	; (8000c74 <VectorD4+0x194>)
 8000ae6:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint32_t cr1 = u->CR1;
 8000ae8:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8000aea:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 8000aec:	6234      	str	r4, [r6, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8000aee:	0722      	lsls	r2, r4, #28
 8000af0:	d154      	bne.n	8000b9c <VectorD4+0xbc>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8000af2:	05e3      	lsls	r3, r4, #23
 8000af4:	d446      	bmi.n	8000b84 <VectorD4+0xa4>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 8000af6:	06a0      	lsls	r0, r4, #26
 8000af8:	d418      	bmi.n	8000b2c <VectorD4+0x4c>
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 8000afa:	0639      	lsls	r1, r7, #24
 8000afc:	d501      	bpl.n	8000b02 <VectorD4+0x22>
 8000afe:	0622      	lsls	r2, r4, #24
 8000b00:	d467      	bmi.n	8000bd2 <VectorD4+0xf2>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 8000b02:	0663      	lsls	r3, r4, #25
 8000b04:	d50e      	bpl.n	8000b24 <VectorD4+0x44>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000b06:	2320      	movs	r3, #32
 8000b08:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000b0c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000b0e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000b10:	4858      	ldr	r0, [pc, #352]	; (8000c74 <VectorD4+0x194>)
 8000b12:	429a      	cmp	r2, r3
 8000b14:	f000 808a 	beq.w	8000c2c <VectorD4+0x14c>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8000b18:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8000b1c:	6037      	str	r7, [r6, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 8000b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 8000b28:	f7ff bd42 	b.w	80005b0 <_port_irq_epilogue>
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	f383 8811 	msr	BASEPRI, r3
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR);
 8000b32:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8000b34:	696b      	ldr	r3, [r5, #20]
 8000b36:	fa5f f882 	uxtb.w	r8, r2
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d07f      	beq.n	8000c3e <VectorD4+0x15e>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000b3e:	6a2b      	ldr	r3, [r5, #32]
 8000b40:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000b42:	484c      	ldr	r0, [pc, #304]	; (8000c74 <VectorD4+0x194>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d07f      	beq.n	8000c48 <VectorD4+0x168>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000b48:	696a      	ldr	r2, [r5, #20]
 8000b4a:	494a      	ldr	r1, [pc, #296]	; (8000c74 <VectorD4+0x194>)
 8000b4c:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
 8000b4e:	1c58      	adds	r0, r3, #1

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 8000b50:	616a      	str	r2, [r5, #20]
  *iqp->q_wrptr++ = b;
 8000b52:	6228      	str	r0, [r5, #32]
 8000b54:	f883 8000 	strb.w	r8, [r3]
  if (iqp->q_wrptr >= iqp->q_top) {
 8000b58:	6a2a      	ldr	r2, [r5, #32]
 8000b5a:	69eb      	ldr	r3, [r5, #28]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d262      	bcs.n	8000c26 <VectorD4+0x146>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000b60:	4944      	ldr	r1, [pc, #272]	; (8000c74 <VectorD4+0x194>)
 8000b62:	68eb      	ldr	r3, [r5, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8000b64:	f101 020c 	add.w	r2, r1, #12
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d007      	beq.n	8000b7c <VectorD4+0x9c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	60c8      	str	r0, [r1, #12]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000b70:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000b72:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 8000b74:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000b76:	6219      	str	r1, [r3, #32]
  (void) chSchReadyI(tp);
 8000b78:	f7ff ff22 	bl	80009c0 <chSchReadyI>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f383 8811 	msr	BASEPRI, r3
 8000b82:	e7ba      	b.n	8000afa <VectorD4+0x1a>
 8000b84:	2320      	movs	r3, #32
 8000b86:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000b8a:	483b      	ldr	r0, [pc, #236]	; (8000c78 <VectorD4+0x198>)
 8000b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b90:	f7ff ff76 	bl	8000a80 <chEvtBroadcastFlagsI>
 8000b94:	2300      	movs	r3, #0
 8000b96:	f383 8811 	msr	BASEPRI, r3
 8000b9a:	e7ac      	b.n	8000af6 <VectorD4+0x16>
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;

  if (isr & USART_ISR_ORE)
    sts |= SD_OVERRUN_ERROR;
 8000b9c:	f014 0f08 	tst.w	r4, #8
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2100      	moveq	r1, #0
 8000ba4:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
 8000ba6:	07e3      	lsls	r3, r4, #31
    sts |= SD_PARITY_ERROR;
 8000ba8:	bf48      	it	mi
 8000baa:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
 8000bae:	07a0      	lsls	r0, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000bb0:	bf48      	it	mi
 8000bb2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
 8000bb6:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
 8000bb8:	bf48      	it	mi
 8000bba:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	f383 8811 	msr	BASEPRI, r3
 8000bc4:	482c      	ldr	r0, [pc, #176]	; (8000c78 <VectorD4+0x198>)
 8000bc6:	f7ff ff5b 	bl	8000a80 <chEvtBroadcastFlagsI>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f383 8811 	msr	BASEPRI, r3
 8000bd0:	e78f      	b.n	8000af2 <VectorD4+0x12>
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	f383 8811 	msr	BASEPRI, r3
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000bd8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000bda:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000bdc:	4825      	ldr	r0, [pc, #148]	; (8000c74 <VectorD4+0x194>)
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d03b      	beq.n	8000c5a <VectorD4+0x17a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000be2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000be4:	4923      	ldr	r1, [pc, #140]	; (8000c74 <VectorD4+0x194>)
  b = *oqp->q_rdptr++;
 8000be6:	1c58      	adds	r0, r3, #1

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 8000be8:	3201      	adds	r2, #1
 8000bea:	63aa      	str	r2, [r5, #56]	; 0x38
  b = *oqp->q_rdptr++;
 8000bec:	64a8      	str	r0, [r5, #72]	; 0x48
 8000bee:	f893 8000 	ldrb.w	r8, [r3]
  if (oqp->q_rdptr >= oqp->q_top) {
 8000bf2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000bf4:	4298      	cmp	r0, r3
 8000bf6:	d301      	bcc.n	8000bfc <VectorD4+0x11c>
    oqp->q_rdptr = oqp->q_buffer;
 8000bf8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000bfa:	648b      	str	r3, [r1, #72]	; 0x48
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000bfc:	491d      	ldr	r1, [pc, #116]	; (8000c74 <VectorD4+0x194>)
 8000bfe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000c00:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d007      	beq.n	8000c18 <VectorD4+0x138>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000c08:	6818      	ldr	r0, [r3, #0]
 8000c0a:	6308      	str	r0, [r1, #48]	; 0x30

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000c0c:	2100      	movs	r1, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000c0e:	6042      	str	r2, [r0, #4]
  (void) chSchReadyI(tp);
 8000c10:	4618      	mov	r0, r3

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8000c12:	6219      	str	r1, [r3, #32]
  (void) chSchReadyI(tp);
 8000c14:	f7ff fed4 	bl	80009c0 <chSchReadyI>
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 8000c18:	fa1f f388 	uxth.w	r3, r8
 8000c1c:	8533      	strh	r3, [r6, #40]	; 0x28
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f383 8811 	msr	BASEPRI, r3
 8000c24:	e76d      	b.n	8000b02 <VectorD4+0x22>
  }

  iqp->q_counter++;
  *iqp->q_wrptr++ = b;
  if (iqp->q_wrptr >= iqp->q_top) {
    iqp->q_wrptr = iqp->q_buffer;
 8000c26:	698b      	ldr	r3, [r1, #24]
 8000c28:	620b      	str	r3, [r1, #32]
 8000c2a:	e799      	b.n	8000b60 <VectorD4+0x80>
 8000c2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f43f af72 	beq.w	8000b18 <VectorD4+0x38>
 8000c34:	3004      	adds	r0, #4
 8000c36:	2110      	movs	r1, #16
 8000c38:	f7ff ff22 	bl	8000a80 <chEvtBroadcastFlagsI>
 8000c3c:	e76c      	b.n	8000b18 <VectorD4+0x38>
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <VectorD4+0x198>)
 8000c40:	2104      	movs	r1, #4
 8000c42:	f7ff ff1d 	bl	8000a80 <chEvtBroadcastFlagsI>
 8000c46:	e77a      	b.n	8000b3e <VectorD4+0x5e>
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 8000c48:	6942      	ldr	r2, [r0, #20]
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	f43f af7c 	beq.w	8000b48 <VectorD4+0x68>
 8000c50:	3004      	adds	r0, #4
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	f7ff ff14 	bl	8000a80 <chEvtBroadcastFlagsI>
 8000c58:	e790      	b.n	8000b7c <VectorD4+0x9c>
static inline bool chOQIsEmptyI(output_queue_t *oqp) {

  chDbgCheckClassI();

  /*lint -save -e9007 [13.5] No side effects.*/
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 8000c5a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d0c0      	beq.n	8000be2 <VectorD4+0x102>
 8000c60:	3004      	adds	r0, #4
 8000c62:	2108      	movs	r1, #8
 8000c64:	f7ff ff0c 	bl	8000a80 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < Q_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8000c68:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	6033      	str	r3, [r6, #0]
 8000c72:	e7d4      	b.n	8000c1e <VectorD4+0x13e>
 8000c74:	20000b30 	.word	0x20000b30
 8000c78:	20000b34 	.word	0x20000b34
 8000c7c:	00000000 	.word	0x00000000

08000c80 <_idle_thread.lto_priv.80>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000c80:	e7fe      	b.n	8000c80 <_idle_thread.lto_priv.80>
 8000c82:	bf00      	nop
	...

08000c90 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000c90:	e7fe      	b.n	8000c90 <BusFault_Handler>
 8000c92:	bf00      	nop
	...

08000ca0 <cmd_systime>:
}

static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	dd03      	ble.n	8000cac <cmd_systime+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <cmd_systime+0x24>)
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <cmd_systime+0x28>)
 8000ca8:	f002 b97a 	b.w	8002fa0 <chprintf>
 8000cac:	2320      	movs	r3, #32
 8000cae:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000cba:	f383 8811 	msr	BASEPRI, r3
  (void)argv;
  if (argc > 0) {
    usage(chp, "systime");
    return;
  }
  chprintf(chp, "%lu\r\n", (unsigned long)chVTGetSystemTime());
 8000cbe:	4903      	ldr	r1, [pc, #12]	; (8000ccc <cmd_systime+0x2c>)
 8000cc0:	f002 b96e 	b.w	8002fa0 <chprintf>
 8000cc4:	080037fc 	.word	0x080037fc
 8000cc8:	08003808 	.word	0x08003808
 8000ccc:	08003810 	.word	0x08003810

08000cd0 <cmd_info>:
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {

  (void)argv;
  if (argc > 0) {
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	dd03      	ble.n	8000cdc <cmd_info+0xc>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8000cd4:	4919      	ldr	r1, [pc, #100]	; (8000d3c <cmd_info+0x6c>)
 8000cd6:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <cmd_info+0x70>)
 8000cd8:	f002 b962 	b.w	8002fa0 <chprintf>
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8000cdc:	b510      	push	{r4, lr}
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8000cde:	4919      	ldr	r1, [pc, #100]	; (8000d44 <cmd_info+0x74>)
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <cmd_info+0x78>)
    chprintf(chp, "%s ", scp->sc_name);
    scp++;
  }
}

static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	4604      	mov	r4, r0
  if (argc > 0) {
    usage(chp, "info");
    return;
  }

  chprintf(chp, "Kernel:       %s\r\n", CH_KERNEL_VERSION);
 8000ce6:	f002 f95b 	bl	8002fa0 <chprintf>
#ifdef PORT_COMPILER_NAME
  chprintf(chp, "Compiler:     %s\r\n", PORT_COMPILER_NAME);
 8000cea:	4620      	mov	r0, r4
 8000cec:	4917      	ldr	r1, [pc, #92]	; (8000d4c <cmd_info+0x7c>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <cmd_info+0x80>)
 8000cf0:	f002 f956 	bl	8002fa0 <chprintf>
#endif
  chprintf(chp, "Architecture: %s\r\n", PORT_ARCHITECTURE_NAME);
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	4917      	ldr	r1, [pc, #92]	; (8000d54 <cmd_info+0x84>)
 8000cf8:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <cmd_info+0x88>)
 8000cfa:	f002 f951 	bl	8002fa0 <chprintf>
#ifdef PORT_CORE_VARIANT_NAME
  chprintf(chp, "Core Variant: %s\r\n", PORT_CORE_VARIANT_NAME);
 8000cfe:	4620      	mov	r0, r4
 8000d00:	4916      	ldr	r1, [pc, #88]	; (8000d5c <cmd_info+0x8c>)
 8000d02:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <cmd_info+0x90>)
 8000d04:	f002 f94c 	bl	8002fa0 <chprintf>
#endif
#ifdef PORT_INFO
  chprintf(chp, "Port Info:    %s\r\n", PORT_INFO);
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4916      	ldr	r1, [pc, #88]	; (8000d64 <cmd_info+0x94>)
 8000d0c:	4a16      	ldr	r2, [pc, #88]	; (8000d68 <cmd_info+0x98>)
 8000d0e:	f002 f947 	bl	8002fa0 <chprintf>
#endif
#ifdef PLATFORM_NAME
  chprintf(chp, "Platform:     %s\r\n", PLATFORM_NAME);
 8000d12:	4620      	mov	r0, r4
 8000d14:	4915      	ldr	r1, [pc, #84]	; (8000d6c <cmd_info+0x9c>)
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <cmd_info+0xa0>)
 8000d18:	f002 f942 	bl	8002fa0 <chprintf>
#endif
#ifdef BOARD_NAME
  chprintf(chp, "Board:        %s\r\n", BOARD_NAME);
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	4915      	ldr	r1, [pc, #84]	; (8000d74 <cmd_info+0xa4>)
 8000d20:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <cmd_info+0xa8>)
 8000d22:	f002 f93d 	bl	8002fa0 <chprintf>
#endif
#ifdef __DATE__
#ifdef __TIME__
  chprintf(chp, "Build time:   %s%s%s\r\n", __DATE__, " - ", __TIME__);
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <cmd_info+0xac>)
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	4914      	ldr	r1, [pc, #80]	; (8000d80 <cmd_info+0xb0>)
 8000d2e:	4a15      	ldr	r2, [pc, #84]	; (8000d84 <cmd_info+0xb4>)
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <cmd_info+0xb8>)
 8000d32:	f002 f935 	bl	8002fa0 <chprintf>
#endif
#endif
}
 8000d36:	b002      	add	sp, #8
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	bf00      	nop
 8000d3c:	080037fc 	.word	0x080037fc
 8000d40:	08003818 	.word	0x08003818
 8000d44:	08003820 	.word	0x08003820
 8000d48:	08003834 	.word	0x08003834
 8000d4c:	0800383c 	.word	0x0800383c
 8000d50:	08003850 	.word	0x08003850
 8000d54:	08003898 	.word	0x08003898
 8000d58:	080038ac 	.word	0x080038ac
 8000d5c:	080038b8 	.word	0x080038b8
 8000d60:	080038cc 	.word	0x080038cc
 8000d64:	080038d8 	.word	0x080038d8
 8000d68:	080038ec 	.word	0x080038ec
 8000d6c:	08003904 	.word	0x08003904
 8000d70:	08003918 	.word	0x08003918
 8000d74:	08003934 	.word	0x08003934
 8000d78:	08003948 	.word	0x08003948
 8000d7c:	08003998 	.word	0x08003998
 8000d80:	08003970 	.word	0x08003970
 8000d84:	08003988 	.word	0x08003988
 8000d88:	08003994 	.word	0x08003994
 8000d8c:	00000000 	.word	0x00000000

08000d90 <VectorAC>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
 8000d90:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);
 8000d92:	f001 fcb5 	bl	8002700 <pwm_lld_serve_interrupt.constprop.33>

  OSAL_IRQ_EPILOGUE();
}
 8000d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 8000d9a:	f7ff bc09 	b.w	80005b0 <_port_irq_epilogue>
 8000d9e:	bf00      	nop

08000da0 <VectorA4>:
 *          pointer is not equal to @p NULL in order to not perform an extra
 *          check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
 8000da0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);
 8000da2:	f001 fcad 	bl	8002700 <pwm_lld_serve_interrupt.constprop.33>

  OSAL_IRQ_EPILOGUE();
}
 8000da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD1);

  OSAL_IRQ_EPILOGUE();
 8000daa:	f7ff bc01 	b.w	80005b0 <_port_irq_epilogue>
 8000dae:	bf00      	nop

08000db0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000db2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8000db4:	b470      	push	{r4, r5, r6}

  tqp->p_next = tp->p_next;
 8000db6:	6803      	ldr	r3, [r0, #0]
  thread_t *otp, *cp;

  otp = currp;
 8000db8:	6994      	ldr	r4, [r2, #24]
 8000dba:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000dbc:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 8000dbe:	2500      	movs	r5, #0
 8000dc0:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000dc2:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000dc4:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000dc6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 8000dc8:	7725      	strb	r5, [r4, #28]
 8000dca:	e000      	b.n	8000dce <chSchDoRescheduleAhead+0x1e>
 8000dcc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	428a      	cmp	r2, r1
 8000dd2:	d8fb      	bhi.n	8000dcc <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000dd8:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000dda:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 8000ddc:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 8000dde:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 8000de0:	bc70      	pop	{r4, r5, r6}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 8000de2:	f7ff ba45 	b.w	8000270 <_port_switch>
 8000de6:	bf00      	nop
 8000de8:	20001138 	.word	0x20001138
 8000dec:	00000000 	.word	0x00000000

08000df0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000df0:	4924      	ldr	r1, [pc, #144]	; (8000e84 <__early_init+0x94>)
 8000df2:	680b      	ldr	r3, [r1, #0]
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000dfa:	680a      	ldr	r2, [r1, #0]
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <__early_init+0x94>)
 8000dfe:	0790      	lsls	r0, r2, #30
 8000e00:	d5fb      	bpl.n	8000dfa <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	f022 0203 	bic.w	r2, r2, #3
 8000e08:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000e0e:	4619      	mov	r1, r3
 8000e10:	684b      	ldr	r3, [r1, #4]
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <__early_init+0x94>)
 8000e14:	f013 030c 	ands.w	r3, r3, #12
 8000e18:	d1fa      	bne.n	8000e10 <__early_init+0x20>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000e1a:	6811      	ldr	r1, [r2, #0]
 8000e1c:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8000e20:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000e22:	6053      	str	r3, [r2, #4]

#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8000e24:	6813      	ldr	r3, [r2, #0]
 8000e26:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000e2a:	6013      	str	r3, [r2, #0]
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while (!(RCC->CR & RCC_CR_HSERDY))
 8000e2c:	6811      	ldr	r1, [r2, #0]
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <__early_init+0x94>)
 8000e30:	0389      	lsls	r1, r1, #14
 8000e32:	d5fb      	bpl.n	8000e2c <__early_init+0x3c>
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e36:	f042 0201 	orr.w	r2, r2, #1
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <__early_init+0x94>)
 8000e42:	0788      	lsls	r0, r1, #30
 8000e44:	d5fb      	bpl.n	8000e3e <__early_init+0x4e>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <__early_init+0x98>)
 8000e48:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8000e4a:	f44f 5104 	mov.w	r1, #8448	; 0x2100
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8000e4e:	2230      	movs	r2, #48	; 0x30

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8000e50:	62d9      	str	r1, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000e5a:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <__early_init+0x94>)
 8000e60:	0189      	lsls	r1, r1, #6
 8000e62:	d5fb      	bpl.n	8000e5c <__early_init+0x6c>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <__early_init+0x9c>)
 8000e66:	2112      	movs	r1, #18
 8000e68:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8000e6a:	6853      	ldr	r3, [r2, #4]
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000e72:	6853      	ldr	r3, [r2, #4]
 8000e74:	4903      	ldr	r1, [pc, #12]	; (8000e84 <__early_init+0x94>)
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d1f9      	bne.n	8000e72 <__early_init+0x82>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_TIM8SW | STM32_TIM1SW;
 8000e7e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000e80:	630b      	str	r3, [r1, #48]	; 0x30
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000
 8000e88:	001d2400 	.word	0x001d2400
 8000e8c:	40022000 	.word	0x40022000

08000e90 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8000e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8000e94:	f3c2 1c41 	ubfx	ip, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000e98:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8000e9c:	f3c2 0980 	ubfx	r9, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 8000ea0:	f3c2 08c1 	ubfx	r8, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8000ea4:	2700      	movs	r7, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8000ea6:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000eaa:	f04f 0b0f 	mov.w	fp, #15
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8000eae:	f04f 0a01 	mov.w	sl, #1
 8000eb2:	e00f      	b.n	8000ed4 <_pal_lld_setgroupmode+0x44>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000eb4:	6a04      	ldr	r4, [r0, #32]
 8000eb6:	ea24 0303 	bic.w	r3, r4, r3
 8000eba:	431d      	orrs	r5, r3
 8000ebc:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 8000ebe:	0849      	lsrs	r1, r1, #1
 8000ec0:	d039      	beq.n	8000f36 <_pal_lld_setgroupmode+0xa6>
      return;
    otyper <<= 1;
 8000ec2:	ea4f 0949 	mov.w	r9, r9, lsl #1
    ospeedr <<= 2;
 8000ec6:	ea4f 0888 	mov.w	r8, r8, lsl #2
    pupdr <<= 2;
 8000eca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 8000ece:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 8000ed2:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 8000ed4:	07cb      	lsls	r3, r1, #31
 8000ed6:	d5f2      	bpl.n	8000ebe <_pal_lld_setgroupmode+0x2e>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000ed8:	6843      	ldr	r3, [r0, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 8000eda:	fa0a f407 	lsl.w	r4, sl, r7
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000ede:	ea23 0304 	bic.w	r3, r3, r4
 8000ee2:	ea43 0309 	orr.w	r3, r3, r9
 8000ee6:	6043      	str	r3, [r0, #4]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8000ee8:	2503      	movs	r5, #3
 8000eea:	007c      	lsls	r4, r7, #1
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000eec:	6883      	ldr	r3, [r0, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8000eee:	fa05 f404 	lsl.w	r4, r5, r4
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000ef2:	43e4      	mvns	r4, r4
 8000ef4:	4023      	ands	r3, r4
 8000ef6:	ea43 0308 	orr.w	r3, r3, r8
 8000efa:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000efc:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000efe:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000f02:	4025      	ands	r5, r4
 8000f04:	ea45 050c 	orr.w	r5, r5, ip
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000f08:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8000f0a:	f1be 0f02 	cmp.w	lr, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000f0e:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000f10:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000f14:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8000f18:	d00f      	beq.n	8000f3a <_pal_lld_setgroupmode+0xaa>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000f1a:	6806      	ldr	r6, [r0, #0]
 8000f1c:	4034      	ands	r4, r6
 8000f1e:	ea44 040e 	orr.w	r4, r4, lr
        if (bit < 8)
 8000f22:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000f24:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 8000f26:	d9c5      	bls.n	8000eb4 <_pal_lld_setgroupmode+0x24>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000f28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000f2a:	ea24 0303 	bic.w	r3, r4, r3
 8000f2e:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 8000f30:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000f32:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8000f34:	d1c5      	bne.n	8000ec2 <_pal_lld_setgroupmode+0x32>
 8000f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8000f3a:	2f07      	cmp	r7, #7
 8000f3c:	d80a      	bhi.n	8000f54 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000f3e:	6a06      	ldr	r6, [r0, #32]
 8000f40:	ea26 0303 	bic.w	r3, r6, r3
 8000f44:	431d      	orrs	r5, r3
 8000f46:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8000f48:	6803      	ldr	r3, [r0, #0]
 8000f4a:	401c      	ands	r4, r3
 8000f4c:	f044 0402 	orr.w	r4, r4, #2
 8000f50:	6004      	str	r4, [r0, #0]
 8000f52:	e7b4      	b.n	8000ebe <_pal_lld_setgroupmode+0x2e>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000f54:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000f56:	ea26 0303 	bic.w	r3, r6, r3
 8000f5a:	431d      	orrs	r5, r3
 8000f5c:	6245      	str	r5, [r0, #36]	; 0x24
 8000f5e:	e7f3      	b.n	8000f48 <_pal_lld_setgroupmode+0xb8>

08000f60 <chMtxUnlock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8000f62:	4d1a      	ldr	r5, [pc, #104]	; (8000fcc <chMtxUnlock+0x6c>)
 8000f64:	2320      	movs	r3, #32
 8000f66:	69ae      	ldr	r6, [r5, #24]
 8000f68:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8000f6c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8000f6e:	68c3      	ldr	r3, [r0, #12]
 8000f70:	63b3      	str	r3, [r6, #56]	; 0x38

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8000f72:	42a0      	cmp	r0, r4
 8000f74:	d023      	beq.n	8000fbe <chMtxUnlock+0x5e>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8000f76:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000f78:	b14b      	cbz	r3, 8000f8e <chMtxUnlock+0x2e>
 8000f7a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d003      	beq.n	8000f88 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8000f80:	6892      	ldr	r2, [r2, #8]
 8000f82:	4291      	cmp	r1, r2
 8000f84:	bf38      	it	cc
 8000f86:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8000f88:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f5      	bne.n	8000f7a <chMtxUnlock+0x1a>
 8000f8e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8000f90:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8000f92:	6ba7      	ldr	r7, [r4, #56]	; 0x38
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8000f94:	60b1      	str	r1, [r6, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000f96:	4620      	mov	r0, r4
 8000f98:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000f9a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8000f9c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 8000f9e:	60df      	str	r7, [r3, #12]
      tp->p_mtxlist = mp;
 8000fa0:	63a3      	str	r3, [r4, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8000fa2:	f7ff fd0d 	bl	80009c0 <chSchReadyI>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8000fa6:	682a      	ldr	r2, [r5, #0]
 8000fa8:	69ab      	ldr	r3, [r5, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 8000faa:	6892      	ldr	r2, [r2, #8]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d901      	bls.n	8000fb6 <chMtxUnlock+0x56>
    chSchDoRescheduleAhead();
 8000fb2:	f7ff fefd 	bl	8000db0 <chSchDoRescheduleAhead>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f383 8811 	msr	BASEPRI, r3
 8000fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chSchRescheduleS();
    }
    else {
      mp->m_owner = NULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	6083      	str	r3, [r0, #8]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f383 8811 	msr	BASEPRI, r3
 8000fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20001138 	.word	0x20001138

08000fd0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000fd2:	490f      	ldr	r1, [pc, #60]	; (8001010 <chTMStopMeasurementX+0x40>)
 8000fd4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000fd6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000fd8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000fda:	6f4f      	ldr	r7, [r1, #116]	; 0x74
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 8000fdc:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000fde:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000fe0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000fe8:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 8000fea:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000fec:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000fee:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8000ff2:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000ff4:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000ff8:	bf88      	it	hi
 8000ffa:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 8000ffc:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000ffe:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8001000:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8001004:	bf38      	it	cc
 8001006:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8001008:	bcf0      	pop	{r4, r5, r6, r7}
 800100a:	4770      	bx	lr
 800100c:	e0001000 	.word	0xe0001000
 8001010:	20001138 	.word	0x20001138
	...

08001020 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8001020:	f7ff bec6 	b.w	8000db0 <chSchDoRescheduleAhead>
	...

08001030 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <chSchGoSleepS+0x20>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001032:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001034:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001036:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8001038:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 800103a:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800103c:	2501      	movs	r5, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800103e:	6063      	str	r3, [r4, #4]
 8001040:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001042:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001044:	4610      	mov	r0, r2
}
 8001046:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001048:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800104a:	f7ff b911 	b.w	8000270 <_port_switch>
 800104e:	bf00      	nop
 8001050:	20001138 	.word	0x20001138
	...

08001060 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	2320      	movs	r3, #32
 8001064:	f383 8811 	msr	BASEPRI, r3
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001068:	4b32      	ldr	r3, [pc, #200]	; (8001134 <chMtxLock+0xd4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800106a:	6882      	ldr	r2, [r0, #8]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800106c:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 800106e:	2a00      	cmp	r2, #0
 8001070:	d057      	beq.n	8001122 <chMtxLock+0xc2>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001072:	68a1      	ldr	r1, [r4, #8]
 8001074:	6893      	ldr	r3, [r2, #8]
 8001076:	4299      	cmp	r1, r3
 8001078:	4605      	mov	r5, r0
 800107a:	d906      	bls.n	800108a <chMtxLock+0x2a>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800107c:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 800107e:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001080:	2b06      	cmp	r3, #6
 8001082:	d035      	beq.n	80010f0 <chMtxLock+0x90>
 8001084:	2b07      	cmp	r3, #7
 8001086:	d01f      	beq.n	80010c8 <chMtxLock+0x68>
 8001088:	b1ab      	cbz	r3, 80010b6 <chMtxLock+0x56>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800108a:	462b      	mov	r3, r5
 800108c:	e003      	b.n	8001096 <chMtxLock+0x36>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 800108e:	6899      	ldr	r1, [r3, #8]
 8001090:	68a2      	ldr	r2, [r4, #8]
 8001092:	4291      	cmp	r1, r2
 8001094:	d302      	bcc.n	800109c <chMtxLock+0x3c>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001096:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001098:	429d      	cmp	r5, r3
 800109a:	d1f8      	bne.n	800108e <chMtxLock+0x2e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80010a0:	6023      	str	r3, [r4, #0]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80010a2:	2006      	movs	r0, #6
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010a4:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 80010a6:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80010a8:	6225      	str	r5, [r4, #32]
      chSchGoSleepS(CH_STATE_WTMTX);
 80010aa:	f7ff ffc1 	bl	8001030 <chSchGoSleepS>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f383 8811 	msr	BASEPRI, r3
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010b6:	e892 000a 	ldmia.w	r2, {r1, r3}
 80010ba:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80010bc:	6811      	ldr	r1, [r2, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80010be:	4610      	mov	r0, r2
 80010c0:	604b      	str	r3, [r1, #4]
 80010c2:	f7ff fc7d 	bl	80009c0 <chSchReadyI>
 80010c6:	e7e0      	b.n	800108a <chMtxLock+0x2a>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010c8:	e892 0009 	ldmia.w	r2, {r0, r3}
 80010cc:	6018      	str	r0, [r3, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80010ce:	6a16      	ldr	r6, [r2, #32]
  tp->p_next->p_prev = tp->p_prev;
 80010d0:	6810      	ldr	r0, [r2, #0]
 80010d2:	6043      	str	r3, [r0, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80010d4:	4633      	mov	r3, r6
 80010d6:	e002      	b.n	80010de <chMtxLock+0x7e>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010d8:	6898      	ldr	r0, [r3, #8]
 80010da:	4281      	cmp	r1, r0
 80010dc:	d802      	bhi.n	80010e4 <chMtxLock+0x84>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80010de:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80010e0:	429e      	cmp	r6, r3
 80010e2:	d1f9      	bne.n	80010d8 <chMtxLock+0x78>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010e4:	6859      	ldr	r1, [r3, #4]
 80010e6:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80010e8:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010ea:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	e7cc      	b.n	800108a <chMtxLock+0x2a>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010f0:	e892 0009 	ldmia.w	r2, {r0, r3}
 80010f4:	6018      	str	r0, [r3, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80010f6:	6a16      	ldr	r6, [r2, #32]
  tp->p_next->p_prev = tp->p_prev;
 80010f8:	6810      	ldr	r0, [r2, #0]
 80010fa:	6043      	str	r3, [r0, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80010fc:	4633      	mov	r3, r6
 80010fe:	e002      	b.n	8001106 <chMtxLock+0xa6>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001100:	6898      	ldr	r0, [r3, #8]
 8001102:	4288      	cmp	r0, r1
 8001104:	d302      	bcc.n	800110c <chMtxLock+0xac>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001106:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001108:	429e      	cmp	r6, r3
 800110a:	d1f9      	bne.n	8001100 <chMtxLock+0xa0>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800110c:	6859      	ldr	r1, [r3, #4]
 800110e:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001110:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001112:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 8001114:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 8001116:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001118:	68a1      	ldr	r1, [r4, #8]
 800111a:	6893      	ldr	r3, [r2, #8]
 800111c:	4299      	cmp	r1, r3
 800111e:	d8ad      	bhi.n	800107c <chMtxLock+0x1c>
 8001120:	e7b3      	b.n	800108a <chMtxLock+0x2a>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001122:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001124:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8001126:	6084      	str	r4, [r0, #8]
 8001128:	2300      	movs	r3, #0
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 800112a:	63a0      	str	r0, [r4, #56]	; 0x38
 800112c:	f383 8811 	msr	BASEPRI, r3
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	bf00      	nop
 8001134:	20001138 	.word	0x20001138
	...

08001140 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001140:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <chThdExitS+0x3c>)
 8001144:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001146:	6a63      	ldr	r3, [r4, #36]	; 0x24

  tp->p_u.exitcode = msg;
 8001148:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800114a:	f104 0524 	add.w	r5, r4, #36	; 0x24
 800114e:	429d      	cmp	r5, r3
 8001150:	d007      	beq.n	8001162 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	6262      	str	r2, [r4, #36]	; 0x24
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fc32 	bl	80009c0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800115c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800115e:	42ab      	cmp	r3, r5
 8001160:	d1f7      	bne.n	8001152 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001162:	7f63      	ldrb	r3, [r4, #29]
 8001164:	079b      	lsls	r3, r3, #30
 8001166:	d104      	bne.n	8001172 <chThdExitS+0x32>
    REG_REMOVE(tp);
 8001168:	6963      	ldr	r3, [r4, #20]
 800116a:	6922      	ldr	r2, [r4, #16]
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	6922      	ldr	r2, [r4, #16]
 8001170:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001172:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 8001174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001178:	f7ff bf5a 	b.w	8001030 <chSchGoSleepS>
 800117c:	20001138 	.word	0x20001138

08001180 <shell_thread.lto_priv.77>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8001180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8001184:	4b79      	ldr	r3, [pc, #484]	; (800136c <shell_thread.lto_priv.77+0x1ec>)
  int n;
  BaseSequentialStream *chp = ((ShellConfig *)p)->sc_channel;
 8001186:	6804      	ldr	r4, [r0, #0]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a79      	ldr	r2, [pc, #484]	; (8001370 <shell_thread.lto_priv.77+0x1f0>)
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
 800118c:	f8d0 8004 	ldr.w	r8, [r0, #4]
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\n\rmanual command for instructions\n\r");
 8001190:	4978      	ldr	r1, [pc, #480]	; (8001374 <shell_thread.lto_priv.77+0x1f4>)
 8001192:	619a      	str	r2, [r3, #24]
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
static THD_FUNCTION(shell_thread, p) {
 8001194:	b098      	sub	sp, #96	; 0x60
  const ShellCommand *scp = ((ShellConfig *)p)->sc_commands;
  char *lp, *cmd, *tokp, line[SHELL_MAX_LINE_LENGTH];
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\n\rmanual command for instructions\n\r");
 8001196:	4620      	mov	r0, r4
 8001198:	f001 ff02 	bl	8002fa0 <chprintf>
 800119c:	ae08      	add	r6, sp, #32
      *p = 0;
      return false;
    }
    if (c < 0x20)
      continue;
    if (p < line + size - 1) {
 800119e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
  char *args[SHELL_MAX_ARGUMENTS + 1];

  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\n\rmanual command for instructions\n\r");
  while (true) {
    chprintf(chp, "ch> ");
 80011a2:	4620      	mov	r0, r4
 80011a4:	4974      	ldr	r1, [pc, #464]	; (8001378 <shell_thread.lto_priv.77+0x1f8>)
 80011a6:	f001 fefb 	bl	8002fa0 <chprintf>
 * @retval false        operation successful.
 *
 * @api
 */
bool shellGetLine(BaseSequentialStream *chp, char *line, unsigned size) {
  char *p = line;
 80011aa:	4635      	mov	r5, r6

  while (true) {
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	4620      	mov	r0, r4
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f10d 0107 	add.w	r1, sp, #7
 80011b6:	2201      	movs	r2, #1
 80011b8:	4798      	blx	r3
 80011ba:	b368      	cbz	r0, 8001218 <shell_thread.lto_priv.77+0x98>
      return true;
    if (c == 4) {
 80011bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80011c0:	2904      	cmp	r1, #4
 80011c2:	d025      	beq.n	8001210 <shell_thread.lto_priv.77+0x90>
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
 80011c4:	2908      	cmp	r1, #8
 80011c6:	d010      	beq.n	80011ea <shell_thread.lto_priv.77+0x6a>
 80011c8:	297f      	cmp	r1, #127	; 0x7f
 80011ca:	d00e      	beq.n	80011ea <shell_thread.lto_priv.77+0x6a>
        chSequentialStreamPut(chp, c);
        p--;
      }
      continue;
    }
    if (c == '\r') {
 80011cc:	290d      	cmp	r1, #13
 80011ce:	d034      	beq.n	800123a <shell_thread.lto_priv.77+0xba>
      chprintf(chp, "\r\n");
      *p = 0;
      return false;
    }
    if (c < 0x20)
 80011d0:	291f      	cmp	r1, #31
 80011d2:	d9eb      	bls.n	80011ac <shell_thread.lto_priv.77+0x2c>
      continue;
    if (p < line + size - 1) {
 80011d4:	42bd      	cmp	r5, r7
 80011d6:	d2e9      	bcs.n	80011ac <shell_thread.lto_priv.77+0x2c>
      chSequentialStreamPut(chp, c);
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	4620      	mov	r0, r4
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	4798      	blx	r3
      *p++ = (char)c;
 80011e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011e4:	702b      	strb	r3, [r5, #0]
 80011e6:	3501      	adds	r5, #1
 80011e8:	e7e0      	b.n	80011ac <shell_thread.lto_priv.77+0x2c>
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 80011ea:	42b5      	cmp	r5, r6
        chSequentialStreamPut(chp, c);
 80011ec:	4620      	mov	r0, r4
    if (c == 4) {
      chprintf(chp, "^D");
      return true;
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
 80011ee:	d0dd      	beq.n	80011ac <shell_thread.lto_priv.77+0x2c>
        chSequentialStreamPut(chp, c);
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4798      	blx	r3
        chSequentialStreamPut(chp, 0x20);
 80011f6:	6823      	ldr	r3, [r4, #0]
 80011f8:	4620      	mov	r0, r4
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2120      	movs	r1, #32
 80011fe:	4798      	blx	r3
        chSequentialStreamPut(chp, c);
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4620      	mov	r0, r4
        p--;
 800120a:	3d01      	subs	r5, #1
    }
    if ((c == 8) || (c == 127)) {
      if (p != line) {
        chSequentialStreamPut(chp, c);
        chSequentialStreamPut(chp, 0x20);
        chSequentialStreamPut(chp, c);
 800120c:	4798      	blx	r3
 800120e:	e7cd      	b.n	80011ac <shell_thread.lto_priv.77+0x2c>
    char c;

    if (chSequentialStreamRead(chp, (uint8_t *)&c, 1) == 0)
      return true;
    if (c == 4) {
      chprintf(chp, "^D");
 8001210:	4620      	mov	r0, r4
 8001212:	495a      	ldr	r1, [pc, #360]	; (800137c <shell_thread.lto_priv.77+0x1fc>)
 8001214:	f001 fec4 	bl	8002fa0 <chprintf>
  chRegSetThreadName("shell");
  chprintf(chp, "\r\nChibiOS/RT Shell\n\rmanual command for instructions\n\r");
  while (true) {
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
 8001218:	4620      	mov	r0, r4
 800121a:	4959      	ldr	r1, [pc, #356]	; (8001380 <shell_thread.lto_priv.77+0x200>)
 800121c:	f001 fec0 	bl	8002fa0 <chprintf>
 8001220:	2320      	movs	r3, #32
 8001222:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void chEvtBroadcastI(event_source_t *esp) {

  chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 8001226:	2100      	movs	r1, #0
 8001228:	4856      	ldr	r0, [pc, #344]	; (8001384 <shell_thread.lto_priv.77+0x204>)
 800122a:	f7ff fc29 	bl	8000a80 <chEvtBroadcastFlagsI>

  /* Atomically broadcasting the event source and terminating the thread,
     there is not a chSysUnlock() because the thread terminates upon return.*/
  chSysLock();
  chEvtBroadcastI(&shell_terminated);
  chThdExitS(msg);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ff86 	bl	8001140 <chThdExitS>
        chprintf(chp, " ?\r\n");
      }
    }
  }
  shellExit(MSG_OK);
}
 8001234:	b018      	add	sp, #96	; 0x60
 8001236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
 800123a:	4953      	ldr	r1, [pc, #332]	; (8001388 <shell_thread.lto_priv.77+0x208>)
 800123c:	4620      	mov	r0, r4
 800123e:	f001 feaf 	bl	8002fa0 <chprintf>
      *p = 0;
 8001242:	2300      	movs	r3, #0
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001244:	a902      	add	r1, sp, #8
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, "\r\n");
      *p = 0;
 8001246:	702b      	strb	r3, [r5, #0]
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001248:	4630      	mov	r0, r6
    cmd = lp;
    n = 0;
 800124a:	461d      	mov	r5, r3
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 800124c:	f001 fa90 	bl	8002770 <_strtok.constprop.30>
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001250:	a902      	add	r1, sp, #8
    chprintf(chp, "ch> ");
    if (shellGetLine(chp, line, sizeof(line))) {
      chprintf(chp, "\r\nlogout");
      break;
    }
    lp = _strtok(line, " \t", &tokp);
 8001252:	4682      	mov	sl, r0
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001254:	2000      	movs	r0, #0
 8001256:	f10d 090c 	add.w	r9, sp, #12
 800125a:	f001 fa89 	bl	8002770 <_strtok.constprop.30>
 800125e:	b150      	cbz	r0, 8001276 <shell_thread.lto_priv.77+0xf6>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8001260:	2d04      	cmp	r5, #4
 8001262:	d01d      	beq.n	80012a0 <shell_thread.lto_priv.77+0x120>
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 8001264:	f849 0b04 	str.w	r0, [r9], #4
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 8001268:	a902      	add	r1, sp, #8
 800126a:	2000      	movs	r0, #0
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
        cmd = NULL;
        break;
      }
      args[n++] = lp;
 800126c:	3501      	adds	r5, #1
      break;
    }
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
 800126e:	f001 fa7f 	bl	8002770 <_strtok.constprop.30>
 8001272:	2800      	cmp	r0, #0
 8001274:	d1f4      	bne.n	8001260 <shell_thread.lto_priv.77+0xe0>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 8001276:	ab18      	add	r3, sp, #96	; 0x60
 8001278:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800127c:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 8001280:	f1ba 0f00 	cmp.w	sl, #0
 8001284:	d08d      	beq.n	80011a2 <shell_thread.lto_priv.77+0x22>
      if (strcmp(cmd, "exit") == 0) {
 8001286:	4650      	mov	r0, sl
 8001288:	4940      	ldr	r1, [pc, #256]	; (800138c <shell_thread.lto_priv.77+0x20c>)
 800128a:	f7ff f80d 	bl	80002a8 <strcmp>
 800128e:	b970      	cbnz	r0, 80012ae <shell_thread.lto_priv.77+0x12e>
        if (n > 0) {
 8001290:	2d00      	cmp	r5, #0
 8001292:	d0c5      	beq.n	8001220 <shell_thread.lto_priv.77+0xa0>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 8001294:	4620      	mov	r0, r4
 8001296:	493e      	ldr	r1, [pc, #248]	; (8001390 <shell_thread.lto_priv.77+0x210>)
 8001298:	4a3c      	ldr	r2, [pc, #240]	; (800138c <shell_thread.lto_priv.77+0x20c>)
 800129a:	f001 fe81 	bl	8002fa0 <chprintf>
 800129e:	e780      	b.n	80011a2 <shell_thread.lto_priv.77+0x22>
    lp = _strtok(line, " \t", &tokp);
    cmd = lp;
    n = 0;
    while ((lp = _strtok(NULL, " \t", &tokp)) != NULL) {
      if (n >= SHELL_MAX_ARGUMENTS) {
        chprintf(chp, "too many arguments\r\n");
 80012a0:	4620      	mov	r0, r4
 80012a2:	493c      	ldr	r1, [pc, #240]	; (8001394 <shell_thread.lto_priv.77+0x214>)
 80012a4:	f001 fe7c 	bl	8002fa0 <chprintf>
        cmd = NULL;
        break;
      }
      args[n++] = lp;
    }
    args[n] = NULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	9307      	str	r3, [sp, #28]
 80012ac:	e779      	b.n	80011a2 <shell_thread.lto_priv.77+0x22>
          usage(chp, "exit");
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
 80012ae:	4650      	mov	r0, sl
 80012b0:	4939      	ldr	r1, [pc, #228]	; (8001398 <shell_thread.lto_priv.77+0x218>)
 80012b2:	f7fe fff9 	bl	80002a8 <strcmp>
 80012b6:	b930      	cbnz	r0, 80012c6 <shell_thread.lto_priv.77+0x146>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80012b8:	4620      	mov	r0, r4
          continue;
        }
        break;
      }
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
 80012ba:	b1c5      	cbz	r5, 80012ee <shell_thread.lto_priv.77+0x16e>
  return *token ? token : NULL;
}

static void usage(BaseSequentialStream *chp, char *p) {

  chprintf(chp, "Usage: %s\r\n", p);
 80012bc:	4934      	ldr	r1, [pc, #208]	; (8001390 <shell_thread.lto_priv.77+0x210>)
 80012be:	4a36      	ldr	r2, [pc, #216]	; (8001398 <shell_thread.lto_priv.77+0x218>)
 80012c0:	f001 fe6e 	bl	8002fa0 <chprintf>
 80012c4:	e76d      	b.n	80011a2 <shell_thread.lto_priv.77+0x22>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <shell_thread.lto_priv.77+0x21c>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	4699      	mov	r9, r3
 80012cc:	b918      	cbnz	r0, 80012d6 <shell_thread.lto_priv.77+0x156>
 80012ce:	e031      	b.n	8001334 <shell_thread.lto_priv.77+0x1b4>
 80012d0:	f859 0f08 	ldr.w	r0, [r9, #8]!
 80012d4:	b370      	cbz	r0, 8001334 <shell_thread.lto_priv.77+0x1b4>
    if (strcmp(scp->sc_name, name) == 0) {
 80012d6:	4651      	mov	r1, sl
 80012d8:	f7fe ffe6 	bl	80002a8 <strcmp>
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1f7      	bne.n	80012d0 <shell_thread.lto_priv.77+0x150>
      scp->sc_function(chp, argc, argv);
 80012e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80012e4:	4629      	mov	r1, r5
 80012e6:	aa03      	add	r2, sp, #12
 80012e8:	4620      	mov	r0, r4
 80012ea:	4798      	blx	r3
 80012ec:	e759      	b.n	80011a2 <shell_thread.lto_priv.77+0x22>
      else if (strcmp(cmd, "help") == 0) {
        if (n > 0) {
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
 80012ee:	492c      	ldr	r1, [pc, #176]	; (80013a0 <shell_thread.lto_priv.77+0x220>)
 80012f0:	f001 fe56 	bl	8002fa0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <shell_thread.lto_priv.77+0x21c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	461d      	mov	r5, r3
 80012fa:	b13a      	cbz	r2, 800130c <shell_thread.lto_priv.77+0x18c>
    chprintf(chp, "%s ", scp->sc_name);
 80012fc:	4620      	mov	r0, r4
 80012fe:	4929      	ldr	r1, [pc, #164]	; (80013a4 <shell_thread.lto_priv.77+0x224>)
 8001300:	f001 fe4e 	bl	8002fa0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001304:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001308:	2a00      	cmp	r2, #0
 800130a:	d1f7      	bne.n	80012fc <shell_thread.lto_priv.77+0x17c>
          usage(chp, "help");
          continue;
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
 800130c:	f1b8 0f00 	cmp.w	r8, #0
 8001310:	d00b      	beq.n	800132a <shell_thread.lto_priv.77+0x1aa>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001312:	f8d8 2000 	ldr.w	r2, [r8]
 8001316:	b142      	cbz	r2, 800132a <shell_thread.lto_priv.77+0x1aa>
 8001318:	4645      	mov	r5, r8
    chprintf(chp, "%s ", scp->sc_name);
 800131a:	4620      	mov	r0, r4
 800131c:	4921      	ldr	r1, [pc, #132]	; (80013a4 <shell_thread.lto_priv.77+0x224>)
 800131e:	f001 fe3f 	bl	8002fa0 <chprintf>
  chprintf(chp, "Usage: %s\r\n", p);
}

static void list_commands(BaseSequentialStream *chp, const ShellCommand *scp) {

  while (scp->sc_name != NULL) {
 8001322:	f855 2f08 	ldr.w	r2, [r5, #8]!
 8001326:	2a00      	cmp	r2, #0
 8001328:	d1f7      	bne.n	800131a <shell_thread.lto_priv.77+0x19a>
        }
        chprintf(chp, "Commands: help exit ");
        list_commands(chp, local_commands);
        if (scp != NULL)
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
 800132a:	4620      	mov	r0, r4
 800132c:	4916      	ldr	r1, [pc, #88]	; (8001388 <shell_thread.lto_priv.77+0x208>)
 800132e:	f001 fe37 	bl	8002fa0 <chprintf>
 8001332:	e736      	b.n	80011a2 <shell_thread.lto_priv.77+0x22>
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
 8001334:	f1b8 0f00 	cmp.w	r8, #0
 8001338:	d00d      	beq.n	8001356 <shell_thread.lto_priv.77+0x1d6>
};

static bool cmdexec(const ShellCommand *scp, BaseSequentialStream *chp,
                      char *name, int argc, char *argv[]) {

  while (scp->sc_name != NULL) {
 800133a:	f8d8 0000 	ldr.w	r0, [r8]
 800133e:	b150      	cbz	r0, 8001356 <shell_thread.lto_priv.77+0x1d6>
 8001340:	46c1      	mov	r9, r8
 8001342:	e002      	b.n	800134a <shell_thread.lto_priv.77+0x1ca>
 8001344:	f859 0f08 	ldr.w	r0, [r9, #8]!
 8001348:	b128      	cbz	r0, 8001356 <shell_thread.lto_priv.77+0x1d6>
    if (strcmp(scp->sc_name, name) == 0) {
 800134a:	4651      	mov	r1, sl
 800134c:	f7fe ffac 	bl	80002a8 <strcmp>
 8001350:	2800      	cmp	r0, #0
 8001352:	d1f7      	bne.n	8001344 <shell_thread.lto_priv.77+0x1c4>
 8001354:	e7c4      	b.n	80012e0 <shell_thread.lto_priv.77+0x160>
          list_commands(chp, scp);
        chprintf(chp, "\r\n");
      }
      else if (cmdexec(local_commands, chp, cmd, n, args) &&
          ((scp == NULL) || cmdexec(scp, chp, cmd, n, args))) {
        chprintf(chp, "%s", cmd);
 8001356:	4652      	mov	r2, sl
 8001358:	4620      	mov	r0, r4
 800135a:	4913      	ldr	r1, [pc, #76]	; (80013a8 <shell_thread.lto_priv.77+0x228>)
 800135c:	f001 fe20 	bl	8002fa0 <chprintf>
        chprintf(chp, " ?\r\n");
 8001360:	4620      	mov	r0, r4
 8001362:	4912      	ldr	r1, [pc, #72]	; (80013ac <shell_thread.lto_priv.77+0x22c>)
 8001364:	f001 fe1c 	bl	8002fa0 <chprintf>
 8001368:	e71b      	b.n	80011a2 <shell_thread.lto_priv.77+0x22>
 800136a:	bf00      	nop
 800136c:	20001138 	.word	0x20001138
 8001370:	080039a4 	.word	0x080039a4
 8001374:	080039ac 	.word	0x080039ac
 8001378:	080039e4 	.word	0x080039e4
 800137c:	080039ec 	.word	0x080039ec
 8001380:	08003a40 	.word	0x08003a40
 8001384:	20000bb0 	.word	0x20000bb0
 8001388:	08003f14 	.word	0x08003f14
 800138c:	08003a08 	.word	0x08003a08
 8001390:	080037fc 	.word	0x080037fc
 8001394:	080039f0 	.word	0x080039f0
 8001398:	08003a10 	.word	0x08003a10
 800139c:	20000800 	.word	0x20000800
 80013a0:	08003a18 	.word	0x08003a18
 80013a4:	08003a30 	.word	0x08003a30
 80013a8:	08003a34 	.word	0x08003a34
 80013ac:	08003a38 	.word	0x08003a38

080013b0 <chThdExit>:
 80013b0:	2320      	movs	r3, #32
 80013b2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80013b6:	f7ff bec3 	b.w	8001140 <chThdExitS>
 80013ba:	bf00      	nop
 80013bc:	0000      	movs	r0, r0
	...

080013c0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80013c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80013c2:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 80013c4:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 80013c6:	d047      	beq.n	8001458 <chSchGoSleepTimeoutS+0x98>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 80013c8:	4c3e      	ldr	r4, [pc, #248]	; (80014c4 <chSchGoSleepTimeoutS+0x104>)

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80013ca:	4a3f      	ldr	r2, [pc, #252]	; (80014c8 <chSchGoSleepTimeoutS+0x108>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 80013cc:	69a3      	ldr	r3, [r4, #24]
 80013ce:	9305      	str	r3, [sp, #20]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80013d0:	4625      	mov	r5, r4
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80013d2:	2901      	cmp	r1, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80013d4:	f855 3f1c 	ldr.w	r3, [r5, #28]!
 80013d8:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 80013dc:	bf98      	it	ls
 80013de:	2102      	movls	r1, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80013e0:	42ab      	cmp	r3, r5
 80013e2:	f8dc 6024 	ldr.w	r6, [ip, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 80013e6:	9204      	str	r2, [sp, #16]
 80013e8:	4686      	mov	lr, r0
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80013ea:	d055      	beq.n	8001498 <chSchGoSleepTimeoutS+0xd8>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80013ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80013ee:	6898      	ldr	r0, [r3, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 80013f0:	4431      	add	r1, r6
 80013f2:	1a8a      	subs	r2, r1, r2
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80013f4:	4282      	cmp	r2, r0
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80013f6:	bf38      	it	cc
 80013f8:	f8cc 1034 	strcc.w	r1, [ip, #52]	; 0x34
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80013fc:	4282      	cmp	r2, r0
 80013fe:	d904      	bls.n	800140a <chSchGoSleepTimeoutS+0x4a>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001400:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001402:	1a12      	subs	r2, r2, r0
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001404:	6898      	ldr	r0, [r3, #8]
 8001406:	4290      	cmp	r0, r2
 8001408:	d3fa      	bcc.n	8001400 <chSchGoSleepTimeoutS+0x40>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	9102      	str	r1, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 800140e:	af01      	add	r7, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001410:	9301      	str	r3, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8001412:	600f      	str	r7, [r1, #0]
  p->vt_prev = vtp;
 8001414:	605f      	str	r7, [r3, #4]
  vtp->vt_delta = delta
 8001416:	9203      	str	r2, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001418:	6899      	ldr	r1, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800141a:	f04f 30ff 	mov.w	r0, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800141e:	1a8a      	subs	r2, r1, r2
 8001420:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001422:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001424:	4670      	mov	r0, lr
 8001426:	f7ff fe03 	bl	8001030 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800142a:	9b04      	ldr	r3, [sp, #16]
 800142c:	b183      	cbz	r3, 8001450 <chSchGoSleepTimeoutS+0x90>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 800142e:	69e3      	ldr	r3, [r4, #28]
 8001430:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <chSchGoSleepTimeoutS+0x104>)
 8001432:	42bb      	cmp	r3, r7
 8001434:	d017      	beq.n	8001466 <chSchGoSleepTimeoutS+0xa6>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8001436:	9a02      	ldr	r2, [sp, #8]
 8001438:	9b01      	ldr	r3, [sp, #4]
 800143a:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 800143c:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 800143e:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001440:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001442:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8001444:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001446:	d003      	beq.n	8001450 <chSchGoSleepTimeoutS+0x90>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8001448:	6899      	ldr	r1, [r3, #8]
 800144a:	9a03      	ldr	r2, [sp, #12]
 800144c:	440a      	add	r2, r1
 800144e:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8001450:	69a3      	ldr	r3, [r4, #24]
}
 8001452:	6a18      	ldr	r0, [r3, #32]
 8001454:	b007      	add	sp, #28
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	4c1a      	ldr	r4, [pc, #104]	; (80014c4 <chSchGoSleepTimeoutS+0x104>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800145a:	f7ff fde9 	bl	8001030 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 800145e:	69a3      	ldr	r3, [r4, #24]
}
 8001460:	6a18      	ldr	r0, [r3, #32]
 8001462:	b007      	add	sp, #28
 8001464:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8001466:	9901      	ldr	r1, [sp, #4]
 8001468:	61d1      	str	r1, [r2, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 800146a:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800146c:	42a9      	cmp	r1, r5
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800146e:	604d      	str	r5, [r1, #4]
  vtp->vt_func = NULL;
 8001470:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001472:	d022      	beq.n	80014ba <chSchGoSleepTimeoutS+0xfa>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8001474:	9803      	ldr	r0, [sp, #12]
 8001476:	688b      	ldr	r3, [r1, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001478:	6a92      	ldr	r2, [r2, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 800147a:	4403      	add	r3, r0
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800147c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001480:	608b      	str	r3, [r1, #8]
 8001482:	6a41      	ldr	r1, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001484:	1a8a      	subs	r2, r1, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001486:	4293      	cmp	r3, r2
 8001488:	d9e2      	bls.n	8001450 <chSchGoSleepTimeoutS+0x90>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800148a:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800148c:	2b01      	cmp	r3, #1
 800148e:	bf98      	it	ls
 8001490:	2302      	movls	r3, #2
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
 8001492:	440b      	add	r3, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8001494:	6343      	str	r3, [r0, #52]	; 0x34
 8001496:	e7db      	b.n	8001450 <chSchGoSleepTimeoutS+0x90>
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8001498:	af01      	add	r7, sp, #4
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800149a:	1988      	adds	r0, r1, r6
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
 800149c:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800149e:	2302      	movs	r3, #2
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80014a0:	62a6      	str	r6, [r4, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80014a2:	9501      	str	r5, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80014a4:	9502      	str	r5, [sp, #8]
      vtp->vt_delta = delay;
 80014a6:	9103      	str	r1, [sp, #12]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80014a8:	61e7      	str	r7, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 80014aa:	6227      	str	r7, [r4, #32]
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80014ac:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80014b0:	f8cc 2010 	str.w	r2, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80014b4:	f8cc 300c 	str.w	r3, [ip, #12]
 80014b8:	e7b4      	b.n	8001424 <chSchGoSleepTimeoutS+0x64>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80014ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014be:	60d3      	str	r3, [r2, #12]
 80014c0:	e7c6      	b.n	8001450 <chSchGoSleepTimeoutS+0x90>
 80014c2:	bf00      	nop
 80014c4:	20001138 	.word	0x20001138
 80014c8:	08000951 	.word	0x08000951
 80014cc:	00000000 	.word	0x00000000

080014d0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 80014d0:	b169      	cbz	r1, 80014ee <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80014d2:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 80014d4:	b410      	push	{r4}
 80014d6:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 80014d8:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 80014da:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80014dc:	2004      	movs	r0, #4
 80014de:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 80014e2:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 80014e4:	6053      	str	r3, [r2, #4]
}
 80014e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80014ea:	f7ff bf69 	b.w	80013c0 <chSchGoSleepTimeoutS>
}
 80014ee:	f04f 30ff 	mov.w	r0, #4294967295
 80014f2:	4770      	bx	lr
 80014f4:	20001138 	.word	0x20001138
	...

08001500 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 8001500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001504:	b083      	sub	sp, #12
 8001506:	4604      	mov	r4, r0
 8001508:	468b      	mov	fp, r1
 800150a:	4615      	mov	r5, r2
 800150c:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800150e:	69c7      	ldr	r7, [r0, #28]
 8001510:	f04f 0820 	mov.w	r8, #32
 8001514:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 8001518:	2600      	movs	r6, #0
 800151a:	46b1      	mov	r9, r6
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800151c:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800151e:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001522:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001524:	b1fb      	cbz	r3, 8001566 <chOQWriteTimeout+0x66>
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 8001526:	6962      	ldr	r2, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001528:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800152a:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 800152c:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800152e:	6161      	str	r1, [r4, #20]
        chSysUnlock();
        return w;
      }
    }
    
    oqp->q_counter--;
 8001530:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 8001532:	f89b 3000 	ldrb.w	r3, [fp]
 8001536:	7013      	strb	r3, [r2, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 8001538:	6923      	ldr	r3, [r4, #16]
 800153a:	6962      	ldr	r2, [r4, #20]
 800153c:	429a      	cmp	r2, r3
      oqp->q_wrptr = oqp->q_buffer;
 800153e:	bf24      	itt	cs
 8001540:	68e3      	ldrcs	r3, [r4, #12]
 8001542:	6163      	strcs	r3, [r4, #20]
    }

    if (nfy != NULL) {
 8001544:	b107      	cbz	r7, 8001548 <chOQWriteTimeout+0x48>
      nfy(oqp);
 8001546:	47b8      	blx	r7
 8001548:	f389 8811 	msr	BASEPRI, r9
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800154c:	3d01      	subs	r5, #1
    if (nfy != NULL) {
      nfy(oqp);
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
 800154e:	f106 0601 	add.w	r6, r6, #1
    if (--n == 0U) {
 8001552:	d012      	beq.n	800157a <chOQWriteTimeout+0x7a>
 8001554:	f388 8811 	msr	BASEPRI, r8
 8001558:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800155a:	46d3      	mov	fp, sl
 800155c:	f10b 0a01 	add.w	sl, fp, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 8001560:	4620      	mov	r0, r4

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    while (chOQIsFullI(oqp)) {
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1df      	bne.n	8001526 <chOQWriteTimeout+0x26>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 8001566:	4620      	mov	r0, r4
 8001568:	9901      	ldr	r1, [sp, #4]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	f7ff ffb0 	bl	80014d0 <chThdEnqueueTimeoutS>
 8001570:	9b00      	ldr	r3, [sp, #0]
 8001572:	2800      	cmp	r0, #0
 8001574:	d0d2      	beq.n	800151c <chOQWriteTimeout+0x1c>
 8001576:	f383 8811 	msr	BASEPRI, r3
    if (--n == 0U) {
      return w;
    }
    chSysLock();
  }
}
 800157a:	4630      	mov	r0, r6
 800157c:	b003      	add	sp, #12
 800157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001582:	bf00      	nop
	...

08001590 <writet.lto_priv.89>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8001590:	3030      	adds	r0, #48	; 0x30
 8001592:	f7ff bfb5 	b.w	8001500 <chOQWriteTimeout>
 8001596:	bf00      	nop
	...

080015a0 <write.lto_priv.83>:
 * queue-level function or macro.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80015a0:	3030      	adds	r0, #48	; 0x30
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	f7ff bfab 	b.w	8001500 <chOQWriteTimeout>
 80015aa:	bf00      	nop
 80015ac:	0000      	movs	r0, r0
	...

080015b0 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b2:	4604      	mov	r4, r0
 80015b4:	460f      	mov	r7, r1
 80015b6:	4616      	mov	r6, r2
 80015b8:	2320      	movs	r3, #32
 80015ba:	f383 8811 	msr	BASEPRI, r3
 80015be:	e003      	b.n	80015c8 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80015c0:	f7ff ff86 	bl	80014d0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80015c4:	2800      	cmp	r0, #0
 80015c6:	db19      	blt.n	80015fc <chOQPutTimeout+0x4c>
 80015c8:	68a5      	ldr	r5, [r4, #8]
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 80015ca:	4620      	mov	r0, r4
 80015cc:	4631      	mov	r1, r6
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {

  chSysLock();
  while (chOQIsFullI(oqp)) {
 80015ce:	2d00      	cmp	r5, #0
 80015d0:	d0f6      	beq.n	80015c0 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80015d2:	6962      	ldr	r2, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80015d4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80015d6:	1c51      	adds	r1, r2, #1
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80015d8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80015da:	6161      	str	r1, [r4, #20]
      chSysUnlock();
      return msg;
    }
  }

  oqp->q_counter--;
 80015dc:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80015de:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80015e0:	6923      	ldr	r3, [r4, #16]
 80015e2:	6962      	ldr	r2, [r4, #20]
 80015e4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80015e6:	bf24      	itt	cs
 80015e8:	68e3      	ldrcs	r3, [r4, #12]
 80015ea:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 80015ec:	69e3      	ldr	r3, [r4, #28]
 80015ee:	b10b      	cbz	r3, 80015f4 <chOQPutTimeout+0x44>
    oqp->q_notify(oqp);
 80015f0:	4620      	mov	r0, r4
 80015f2:	4798      	blx	r3
 80015f4:	2000      	movs	r0, #0
 80015f6:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 80015fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015fc:	f385 8811 	msr	BASEPRI, r5
 8001600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001602:	bf00      	nop
	...

08001610 <putt.lto_priv.87>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001610:	3030      	adds	r0, #48	; 0x30
 8001612:	f7ff bfcd 	b.w	80015b0 <chOQPutTimeout>
 8001616:	bf00      	nop
	...

08001620 <put.lto_priv.85>:
                       n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001620:	3030      	adds	r0, #48	; 0x30
 8001622:	f04f 32ff 	mov.w	r2, #4294967295
 8001626:	f7ff bfc3 	b.w	80015b0 <chOQPutTimeout>
 800162a:	bf00      	nop
 800162c:	0000      	movs	r0, r0
	...

08001630 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001634:	4604      	mov	r4, r0
 8001636:	b083      	sub	sp, #12
 8001638:	4689      	mov	r9, r1
 800163a:	4693      	mov	fp, r2
 800163c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800163e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8001642:	2720      	movs	r7, #32
 8001644:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 8001648:	2600      	movs	r6, #0
 800164a:	9701      	str	r7, [sp, #4]
 800164c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800164e:	f1b8 0f00 	cmp.w	r8, #0
 8001652:	d005      	beq.n	8001660 <chIQReadTimeout+0x30>
      nfy(iqp);
 8001654:	4620      	mov	r0, r4
 8001656:	47c0      	blx	r8
 8001658:	e002      	b.n	8001660 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800165a:	f7ff ff39 	bl	80014d0 <chThdEnqueueTimeoutS>
 800165e:	b9e0      	cbnz	r0, 800169a <chIQReadTimeout+0x6a>
 */
static inline bool chIQIsEmptyI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(iqp) == 0U);
 8001660:	68a7      	ldr	r7, [r4, #8]
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
  while (true) {
    if (nfy != NULL) {
      nfy(iqp);
    }

    while (chIQIsEmptyI(iqp)) {
 8001666:	2f00      	cmp	r7, #0
 8001668:	d0f7      	beq.n	800165a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800166a:	69a2      	ldr	r2, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 800166c:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800166e:	1c51      	adds	r1, r2, #1
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001670:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 8001672:	61a1      	str	r1, [r4, #24]
        chSysUnlock();
        return r;
      }
    }

    iqp->q_counter--;
 8001674:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 8001676:	7813      	ldrb	r3, [r2, #0]
 8001678:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800167c:	6923      	ldr	r3, [r4, #16]
 800167e:	69a2      	ldr	r2, [r4, #24]
 8001680:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 8001682:	bf24      	itt	cs
 8001684:	68e3      	ldrcs	r3, [r4, #12]
 8001686:	61a3      	strcs	r3, [r4, #24]
 8001688:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800168c:	3601      	adds	r6, #1
    if (--n == 0U) {
 800168e:	45b3      	cmp	fp, r6
 8001690:	d005      	beq.n	800169e <chIQReadTimeout+0x6e>
 8001692:	9b01      	ldr	r3, [sp, #4]
 8001694:	f383 8811 	msr	BASEPRI, r3
 8001698:	e7d9      	b.n	800164e <chIQReadTimeout+0x1e>
 800169a:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800169e:	4630      	mov	r0, r6
 80016a0:	b003      	add	sp, #12
 80016a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016a6:	bf00      	nop
	...

080016b0 <readt.lto_priv.90>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80016b0:	300c      	adds	r0, #12
 80016b2:	f7ff bfbd 	b.w	8001630 <chIQReadTimeout>
 80016b6:	bf00      	nop
	...

080016c0 <read.lto_priv.84>:
                        n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80016c0:	300c      	adds	r0, #12
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	f7ff bfb3 	b.w	8001630 <chIQReadTimeout>
 80016ca:	bf00      	nop
 80016cc:	0000      	movs	r0, r0
	...

080016d0 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	2320      	movs	r3, #32
 80016d4:	460e      	mov	r6, r1
 80016d6:	4604      	mov	r4, r0
 80016d8:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 80016dc:	69c3      	ldr	r3, [r0, #28]
 80016de:	b12b      	cbz	r3, 80016ec <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 80016e0:	4798      	blx	r3
 80016e2:	e003      	b.n	80016ec <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80016e4:	f7ff fef4 	bl	80014d0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 80016e8:	2800      	cmp	r0, #0
 80016ea:	db15      	blt.n	8001718 <chIQGetTimeout+0x48>
 80016ec:	68a5      	ldr	r5, [r4, #8]
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 80016ee:	4620      	mov	r0, r4
 80016f0:	4631      	mov	r1, r6
  chSysLock();
  if (iqp->q_notify != NULL) {
    iqp->q_notify(iqp);
  }

  while (chIQIsEmptyI(iqp)) {
 80016f2:	2d00      	cmp	r5, #0
 80016f4:	d0f6      	beq.n	80016e4 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80016f6:	69a1      	ldr	r1, [r4, #24]
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80016f8:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 80016fa:	6925      	ldr	r5, [r4, #16]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 80016fc:	1c4a      	adds	r2, r1, #1
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 80016fe:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001700:	42aa      	cmp	r2, r5
      chSysUnlock();
      return msg;
    }
  }

  iqp->q_counter--;
 8001702:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001704:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001706:	bf28      	it	cs
 8001708:	68e3      	ldrcs	r3, [r4, #12]
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800170a:	7808      	ldrb	r0, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800170c:	bf28      	it	cs
 800170e:	61a3      	strcs	r3, [r4, #24]
 8001710:	2300      	movs	r3, #0
 8001712:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 8001716:	bd70      	pop	{r4, r5, r6, pc}
 8001718:	f385 8811 	msr	BASEPRI, r5
 800171c:	bd70      	pop	{r4, r5, r6, pc}
 800171e:	bf00      	nop

08001720 <gett.lto_priv.88>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001720:	300c      	adds	r0, #12
 8001722:	f7ff bfd5 	b.w	80016d0 <chIQGetTimeout>
 8001726:	bf00      	nop
	...

08001730 <get.lto_priv.86>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8001730:	300c      	adds	r0, #12
 8001732:	f04f 31ff 	mov.w	r1, #4294967295
 8001736:	f7ff bfcb 	b.w	80016d0 <chIQGetTimeout>
 800173a:	bf00      	nop
 800173c:	0000      	movs	r0, r0
	...

08001740 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001740:	b508      	push	{r3, lr}
 8001742:	4601      	mov	r1, r0
 8001744:	2320      	movs	r3, #32
 8001746:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800174a:	2008      	movs	r0, #8
 800174c:	f7ff fe38 	bl	80013c0 <chSchGoSleepTimeoutS>
 8001750:	2300      	movs	r3, #0
 8001752:	f383 8811 	msr	BASEPRI, r3
 8001756:	bd08      	pop	{r3, pc}
	...

08001760 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001760:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001762:	4e11      	ldr	r6, [pc, #68]	; (80017a8 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001764:	2500      	movs	r5, #0
 8001766:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800176a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800176e:	42a3      	cmp	r3, r4
 8001770:	d20d      	bcs.n	800178e <__init_ram_areas+0x2e>
 8001772:	3904      	subs	r1, #4
 8001774:	461a      	mov	r2, r3
      *p = *tp;
 8001776:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800177a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800177e:	42a2      	cmp	r2, r4
 8001780:	d3f9      	bcc.n	8001776 <__init_ram_areas+0x16>
 8001782:	43da      	mvns	r2, r3
 8001784:	4414      	add	r4, r2
 8001786:	f024 0403 	bic.w	r4, r4, #3
 800178a:	3404      	adds	r4, #4
 800178c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800178e:	68f2      	ldr	r2, [r6, #12]
 8001790:	4293      	cmp	r3, r2
 8001792:	d203      	bcs.n	800179c <__init_ram_areas+0x3c>
      *p = 0;
 8001794:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001798:	4293      	cmp	r3, r2
 800179a:	d3fb      	bcc.n	8001794 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800179c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800179e:	42be      	cmp	r6, r7
 80017a0:	d3e3      	bcc.n	800176a <__init_ram_areas+0xa>
#endif
}
 80017a2:	bcf0      	pop	{r4, r5, r6, r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	08003a50 	.word	0x08003a50
 80017ac:	00000000 	.word	0x00000000

080017b0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80017b0:	e7fe      	b.n	80017b0 <__default_exit>
 80017b2:	bf00      	nop
	...

080017c0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
	...

080017d0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
	...

080017e0 <main>:
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 80017e0:	4bc7      	ldr	r3, [pc, #796]	; (8001b00 <main+0x320>)
 * Application entry point.
 */
int main(void) {
  thread_t *shelltp = NULL;

  codes.size=0;
 80017e2:	4cc8      	ldr	r4, [pc, #800]	; (8001b04 <main+0x324>)
 80017e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80017e6:	48c8      	ldr	r0, [pc, #800]	; (8001b08 <main+0x328>)
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	2200      	movs	r2, #0


/*
 * Application entry point.
 */
int main(void) {
 80017ee:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80017f2:	6299      	str	r1, [r3, #40]	; 0x28
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 80017f6:	691d      	ldr	r5, [r3, #16]
 80017f8:	6119      	str	r1, [r3, #16]
 80017fa:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 80017fc:	68dd      	ldr	r5, [r3, #12]
 80017fe:	60d9      	str	r1, [r3, #12]
 8001800:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8001802:	69d9      	ldr	r1, [r3, #28]
  thread_t *shelltp = NULL;

  codes.size=0;
 8001804:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
 8001808:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800180c:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800180e:	6801      	ldr	r1, [r0, #0]
 8001810:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001814:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8001816:	6a19      	ldr	r1, [r3, #32]
 8001818:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800181c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200


/*
 * Application entry point.
 */
int main(void) {
 8001820:	b089      	sub	sp, #36	; 0x24
 8001822:	d003      	beq.n	800182c <main+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001824:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001828:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 800182a:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 800182c:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <main+0x320>)
 800182e:	6a1a      	ldr	r2, [r3, #32]
 8001830:	0417      	lsls	r7, r2, #16
 8001832:	d407      	bmi.n	8001844 <main+0x64>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8001834:	6a1a      	ldr	r2, [r3, #32]
 8001836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183a:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001842:	621a      	str	r2, [r3, #32]
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
 8001844:	49b1      	ldr	r1, [pc, #708]	; (8001b0c <main+0x32c>)
 8001846:	4ab2      	ldr	r2, [pc, #712]	; (8001b10 <main+0x330>)
 8001848:	48b2      	ldr	r0, [pc, #712]	; (8001b14 <main+0x334>)
 800184a:	2300      	movs	r3, #0
 800184c:	600b      	str	r3, [r1, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 800184e:	4619      	mov	r1, r3
 8001850:	6854      	ldr	r4, [r2, #4]
 8001852:	6021      	str	r1, [r4, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001854:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001858:	3301      	adds	r3, #1
 800185a:	2b0c      	cmp	r3, #12
 800185c:	f102 0214 	add.w	r2, r2, #20
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001860:	f04f 0600 	mov.w	r6, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001864:	d1f4      	bne.n	8001850 <main+0x70>
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8001866:	f8df b304 	ldr.w	fp, [pc, #772]	; 8001b6c <main+0x38c>
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 800186a:	f8df e304 	ldr.w	lr, [pc, #772]	; 8001b70 <main+0x390>
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800186e:	4ba4      	ldr	r3, [pc, #656]	; (8001b00 <main+0x320>)

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8001870:	4ca9      	ldr	r4, [pc, #676]	; (8001b18 <main+0x338>)
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8001872:	f8df a300 	ldr.w	sl, [pc, #768]	; 8001b74 <main+0x394>
  gpiop->PUPDR   = config->pupdr;
 8001876:	4da9      	ldr	r5, [pc, #676]	; (8001b1c <main+0x33c>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001878:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 8001b78 <main+0x398>
 800187c:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8001b7c <main+0x39c>
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8001880:	4fa7      	ldr	r7, [pc, #668]	; (8001b20 <main+0x340>)
 8001882:	f8df c2fc 	ldr.w	ip, [pc, #764]	; 8001b80 <main+0x3a0>
 8001886:	4aa7      	ldr	r2, [pc, #668]	; (8001b24 <main+0x344>)
 8001888:	48a7      	ldr	r0, [pc, #668]	; (8001b28 <main+0x348>)
  dma_streams_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 800188a:	f04f 31ff 	mov.w	r1, #4294967295
 800188e:	f8cb 1004 	str.w	r1, [fp, #4]
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8001892:	f8ce 1004 	str.w	r1, [lr, #4]
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8001896:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800189a:	f04e 0e01 	orr.w	lr, lr, #1
 800189e:	f8c3 e018 	str.w	lr, [r3, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 80018a2:	f8d4 e000 	ldr.w	lr, [r4]
 80018a6:	f04e 0e20 	orr.w	lr, lr, #32
 80018aa:	f8c4 e000 	str.w	lr, [r4]
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 80018ae:	695c      	ldr	r4, [r3, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80018b0:	f04f 4b90 	mov.w	fp, #1207959552	; 0x48000000
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 80018b4:	f444 04fc 	orr.w	r4, r4, #8257536	; 0x7e0000
 80018b8:	615c      	str	r4, [r3, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80018ba:	f8cb 6004 	str.w	r6, [fp, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80018be:	f64f 74ff 	movw	r4, #65535	; 0xffff
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80018c2:	f8cb a008 	str.w	sl, [fp, #8]
  gpiop->PUPDR   = config->pupdr;
 80018c6:	f8cb 500c 	str.w	r5, [fp, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80018ca:	4d98      	ldr	r5, [pc, #608]	; (8001b2c <main+0x34c>)
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80018cc:	f8cb 4014 	str.w	r4, [fp, #20]
  gpiop->AFRL    = config->afrl;
 80018d0:	f8cb 5020 	str.w	r5, [fp, #32]
  gpiop->AFRH    = config->afrh;
 80018d4:	f44f 256e 	mov.w	r5, #974848	; 0xee000
 80018d8:	f8cb 5024 	str.w	r5, [fp, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80018dc:	4d94      	ldr	r5, [pc, #592]	; (8001b30 <main+0x350>)
 80018de:	f8cb 5000 	str.w	r5, [fp]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80018e2:	f24f 0ac0 	movw	sl, #61632	; 0xf0c0
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80018e6:	25c0      	movs	r5, #192	; 0xc0
 80018e8:	f8c9 5004 	str.w	r5, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80018ec:	f8c9 a008 	str.w	sl, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 80018f0:	4d90      	ldr	r5, [pc, #576]	; (8001b34 <main+0x354>)
 80018f2:	f8c9 500c 	str.w	r5, [r9, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80018f6:	f04f 4a88 	mov.w	sl, #1140850688	; 0x44000000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80018fa:	f8c9 4014 	str.w	r4, [r9, #20]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80018fe:	4d8e      	ldr	r5, [pc, #568]	; (8001b38 <main+0x358>)
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8001900:	f8c9 a020 	str.w	sl, [r9, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8001904:	f24a 0a80 	movw	sl, #41088	; 0xa080
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8001908:	f8c9 6024 	str.w	r6, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800190c:	f8c9 a000 	str.w	sl, [r9]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8001910:	f04f 4970 	mov.w	r9, #4026531840	; 0xf0000000
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001914:	f8c8 6004 	str.w	r6, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8001918:	f04f 3a55 	mov.w	sl, #1431655765	; 0x55555555
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800191c:	f8c8 9008 	str.w	r9, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
 8001920:	f8c8 500c 	str.w	r5, [r8, #12]
 8001924:	f1a5 6588 	sub.w	r5, r5, #71303168	; 0x4400000
  gpiop->ODR     = config->odr;
 8001928:	f8c8 4014 	str.w	r4, [r8, #20]
 800192c:	46be      	mov	lr, r7
  gpiop->AFRL    = config->afrl;
 800192e:	f8c8 6020 	str.w	r6, [r8, #32]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8001932:	f8df 9250 	ldr.w	r9, [pc, #592]	; 8001b84 <main+0x3a4>
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8001936:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800193a:	3d40      	subs	r5, #64	; 0x40
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800193c:	f8c8 6000 	str.w	r6, [r8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001940:	f8cc 6004 	str.w	r6, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001944:	f8cc 6008 	str.w	r6, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8001948:	f8cc a00c 	str.w	sl, [ip, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800194c:	f5aa 4aaa 	sub.w	sl, sl, #21760	; 0x5500
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8001950:	f8cc 4014 	str.w	r4, [ip, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8001954:	f1aa 0a15 	sub.w	sl, sl, #21

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8001958:	f8cc 6020 	str.w	r6, [ip, #32]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800195c:	f04f 080f 	mov.w	r8, #15
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8001960:	f8cc 6024 	str.w	r6, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001964:	f8cc 6000 	str.w	r6, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001968:	6056      	str	r6, [r2, #4]
 800196a:	f8df c21c 	ldr.w	ip, [pc, #540]	; 8001b88 <main+0x3a8>
  gpiop->OSPEEDR = config->ospeedr;
 800196e:	f8c2 9008 	str.w	r9, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8001972:	60d5      	str	r5, [r2, #12]
 8001974:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8001b8c <main+0x3ac>
  gpiop->ODR     = config->odr;
 8001978:	25ff      	movs	r5, #255	; 0xff
 800197a:	6155      	str	r5, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800197c:	6216      	str	r6, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800197e:	6256      	str	r6, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001980:	f8c2 a000 	str.w	sl, [r2]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8001984:	6046      	str	r6, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001986:	f8c0 8008 	str.w	r8, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 800198a:	f8c0 900c 	str.w	r9, [r0, #12]
  gpiop->ODR     = config->odr;
 800198e:	6144      	str	r4, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8001990:	6206      	str	r6, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8001992:	6246      	str	r6, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001994:	6006      	str	r6, [r0, #0]
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001996:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800199a:	f84e cb04 	str.w	ip, [lr], #4
 800199e:	61b8      	str	r0, [r7, #24]
  iqp->q_rdptr   = bp;
 80019a0:	6278      	str	r0, [r7, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80019a2:	6238      	str	r0, [r7, #32]
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 80019a4:	4865      	ldr	r0, [pc, #404]	; (8001b3c <main+0x35c>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80019a6:	f8c7 e004 	str.w	lr, [r7, #4]
 80019aa:	f04f 0901 	mov.w	r9, #1
void pwm_lld_init(void) {

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80019ae:	f04f 0e06 	mov.w	lr, #6
  PWMD1.tim = STM32_TIM1;
 80019b2:	4d63      	ldr	r5, [pc, #396]	; (8001b40 <main+0x360>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80019b4:	4a63      	ldr	r2, [pc, #396]	; (8001b44 <main+0x364>)
 80019b6:	f880 9000 	strb.w	r9, [r0]
  iqp->q_top     = bp + size;
 80019ba:	f107 0464 	add.w	r4, r7, #100	; 0x64
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80019be:	f107 0c0c 	add.w	ip, r7, #12
 80019c2:	f107 0a30 	add.w	sl, r7, #48	; 0x30
  pwmp->config   = NULL;
 80019c6:	6046      	str	r6, [r0, #4]
  pwmp->enabled  = 0;
 80019c8:	60c6      	str	r6, [r0, #12]
void pwm_lld_init(void) {

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  PWMD1.channels = STM32_TIM1_CHANNELS;
 80019ca:	f880 e010 	strb.w	lr, [r0, #16]
  PWMD1.tim = STM32_TIM1;
 80019ce:	6185      	str	r5, [r0, #24]
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80019d0:	2010      	movs	r0, #16
 80019d2:	f8c7 c00c 	str.w	ip, [r7, #12]
  tqp->p_prev = (thread_t *)tqp;
 80019d6:	f8c7 c010 	str.w	ip, [r7, #16]
  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 80019da:	61fc      	str	r4, [r7, #28]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019dc:	f04f 0c20 	mov.w	ip, #32
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {

  chThdQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 80019e0:	617e      	str	r6, [r7, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 80019e2:	62be      	str	r6, [r7, #40]	; 0x28
  iqp->q_link    = link;
 80019e4:	62ff      	str	r7, [r7, #44]	; 0x2c
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80019e6:	f887 9008 	strb.w	r9, [r7, #8]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80019ea:	f8c7 a030 	str.w	sl, [r7, #48]	; 0x30
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80019ee:	63b8      	str	r0, [r7, #56]	; 0x38

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80019f0:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 80019f4:	f882 0325 	strb.w	r0, [r2, #805]	; 0x325
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019f8:	f8c2 c184 	str.w	ip, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80019fc:	f8c2 c004 	str.w	ip, [r2, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001a00:	69d8      	ldr	r0, [r3, #28]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001a02:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001b90 <main+0x3b0>

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001a06:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8001b94 <main+0x3b4>
  tqp->p_prev = (thread_t *)tqp;
 8001a0a:	f8c7 a034 	str.w	sl, [r7, #52]	; 0x34

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001a0e:	ea40 0009 	orr.w	r0, r0, r9
 8001a12:	f888 9000 	strb.w	r9, [r8]
 8001a16:	61d8      	str	r0, [r3, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001a18:	f8de 3008 	ldr.w	r3, [lr, #8]
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8001a1c:	4d4a      	ldr	r5, [pc, #296]	; (8001b48 <main+0x368>)
  oqp->q_buffer  = bp;
 8001a1e:	63fc      	str	r4, [r7, #60]	; 0x3c
 8001a20:	ea43 0a09 	orr.w	sl, r3, r9
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001a24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a28:	643b      	str	r3, [r7, #64]	; 0x40
  oqp->q_notify  = onfy;
 8001a2a:	4b48      	ldr	r3, [pc, #288]	; (8001b4c <main+0x36c>)
 8001a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
void sd_lld_init(void) {

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
  SD1.usart = USART1;
 8001a2e:	4b48      	ldr	r3, [pc, #288]	; (8001b50 <main+0x370>)
 8001a30:	677b      	str	r3, [r7, #116]	; 0x74
  SD1.clock = STM32_USART1CLK;
 8001a32:	4b48      	ldr	r3, [pc, #288]	; (8001b54 <main+0x374>)
                    qnotify_t onfy, void *link) {

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
 8001a34:	64bc      	str	r4, [r7, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001a36:	647c      	str	r4, [r7, #68]	; 0x44
 8001a38:	67bb      	str	r3, [r7, #120]	; 0x78
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8001a3a:	f241 040a 	movw	r4, #4106	; 0x100a
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 8001a3e:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <main+0x378>)
 8001a40:	f8c8 301c 	str.w	r3, [r8, #28]
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8001a44:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8001a4c:	f241 0418 	movw	r4, #4120	; 0x1018
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8001a50:	f8c8 5020 	str.w	r5, [r8, #32]
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8001a54:	f8c8 402c 	str.w	r4, [r8, #44]	; 0x2c
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8001a58:	4840      	ldr	r0, [pc, #256]	; (8001b5c <main+0x37c>)
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001a5a:	653f      	str	r7, [r7, #80]	; 0x50

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8001a5c:	3514      	adds	r5, #20
 8001a5e:	f641 441f 	movw	r4, #7199	; 0x1c1f
 8001a62:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
  spip->config = NULL;
 8001a66:	f8c8 6004 	str.w	r6, [r8, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8001a6a:	f8c8 6008 	str.w	r6, [r8, #8]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001a6e:	f8c8 6014 	str.w	r6, [r8, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001a72:	f108 050c 	add.w	r5, r8, #12

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001a76:	f8ce a008 	str.w	sl, [lr, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001a7a:	629c      	str	r4, [r3, #40]	; 0x28

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001a7c:	f04f 0e80 	mov.w	lr, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001a80:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001a84:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001a86:	f8c8 500c 	str.w	r5, [r8, #12]
  STM32_ST_TIM->CCMR1  = 0;
 8001a8a:	619e      	str	r6, [r3, #24]
  tqp->p_prev = (thread_t *)tqp;
 8001a8c:	f8c8 5010 	str.w	r5, [r8, #16]
  STM32_ST_TIM->CCR[0] = 0;
 8001a90:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8001a92:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8001a94:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001a96:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001a9a:	f8c3 9000 	str.w	r9, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001a9e:	f882 e31c 	strb.w	lr, [r2, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001aa2:	f8c2 4180 	str.w	r4, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001aa6:	6014      	str	r4, [r2, #0]
 8001aa8:	6086      	str	r6, [r0, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aaa:	68c5      	ldr	r5, [r0, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001aac:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <main+0x380>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001aae:	f8df e0e8 	ldr.w	lr, [pc, #232]	; 8001b98 <main+0x3b8>
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8001ab2:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001ab6:	402c      	ands	r4, r5
  reg_value  =  (reg_value                                   |
 8001ab8:	4323      	orrs	r3, r4
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001aba:	60c3      	str	r3, [r0, #12]
 8001abc:	f8de 300c 	ldr.w	r3, [lr, #12]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001ac0:	4c28      	ldr	r4, [pc, #160]	; (8001b64 <main+0x384>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001ac2:	4d29      	ldr	r5, [pc, #164]	; (8001b68 <main+0x388>)
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001ac4:	6261      	str	r1, [r4, #36]	; 0x24
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ac6:	f5a2 4251 	sub.w	r2, r2, #53504	; 0xd100

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ace:	f8ce 300c 	str.w	r3, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001ad2:	6813      	ldr	r3, [r2, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001ad4:	6064      	str	r4, [r4, #4]
 8001ad6:	ea43 0309 	orr.w	r3, r3, r9
 8001ada:	6013      	str	r3, [r2, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	f04f 0310 	mov.w	r3, #16
 8001ae0:	77c3      	strb	r3, [r0, #31]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001ae2:	f104 0e1c 	add.w	lr, r4, #28
 8001ae6:	f880 c022 	strb.w	ip, [r0, #34]	; 0x22

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8001aea:	2200      	movs	r2, #0
 8001aec:	2300      	movs	r3, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001aee:	a802      	add	r0, sp, #8
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001af0:	6024      	str	r4, [r4, #0]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8001af2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001af6:	9102      	str	r1, [sp, #8]
 8001af8:	f8c4 e01c 	str.w	lr, [r4, #28]
 8001afc:	e04e      	b.n	8001b9c <main+0x3bc>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	200012f8 	.word	0x200012f8
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	200012e8 	.word	0x200012e8
 8001b10:	08003b20 	.word	0x08003b20
 8001b14:	200010d8 	.word	0x200010d8
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	64151154 	.word	0x64151154
 8001b20:	20000b30 	.word	0x20000b30
 8001b24:	48001000 	.word	0x48001000
 8001b28:	48001400 	.word	0x48001400
 8001b2c:	55500000 	.word	0x55500000
 8001b30:	2a80a800 	.word	0x2a80a800
 8001b34:	55550515 	.word	0x55550515
 8001b38:	05555555 	.word	0x05555555
 8001b3c:	20001288 	.word	0x20001288
 8001b40:	40012c00 	.word	0x40012c00
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	08003b5c 	.word	0x08003b5c
 8001b4c:	08000581 	.word	0x08000581
 8001b50:	40013800 	.word	0x40013800
 8001b54:	02255100 	.word	0x02255100
 8001b58:	40003800 	.word	0x40003800
 8001b5c:	e000ed00 	.word	0xe000ed00
 8001b60:	05fa0300 	.word	0x05fa0300
 8001b64:	20001138 	.word	0x20001138
 8001b68:	20000b08 	.word	0x20000b08
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	3cc0fc00 	.word	0x3cc0fc00
 8001b78:	48000400 	.word	0x48000400
 8001b7c:	48000800 	.word	0x48000800
 8001b80:	48000c00 	.word	0x48000c00
 8001b84:	ffff00c0 	.word	0xffff00c0
 8001b88:	08003b00 	.word	0x08003b00
 8001b8c:	55555550 	.word	0x55555550
 8001b90:	200012a4 	.word	0x200012a4
 8001b94:	e0042000 	.word	0xe0042000
 8001b98:	e000edf0 	.word	0xe000edf0
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001b9c:	f8c4 e020 	str.w	lr, [r4, #32]
  tmp->worst      = (rtcnt_t)0;
 8001ba0:	9603      	str	r6, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8001ba2:	9604      	str	r6, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8001ba4:	9605      	str	r6, [sp, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8001ba6:	60a6      	str	r6, [r4, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8001ba8:	6124      	str	r4, [r4, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8001baa:	6164      	str	r4, [r4, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8001bac:	62a6      	str	r6, [r4, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001bae:	6766      	str	r6, [r4, #116]	; 0x74
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001bb0:	f000 fd3e 	bl	8002630 <chTMStartMeasurementX.constprop.67>
  chTMStopMeasurementX(&tm);
 8001bb4:	a802      	add	r0, sp, #8
 8001bb6:	f7ff fa0b 	bl	8000fd0 <chTMStopMeasurementX>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001bba:	49cb      	ldr	r1, [pc, #812]	; (8001ee8 <main+0x708>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001bbc:	4bcb      	ldr	r3, [pc, #812]	; (8001eec <main+0x70c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001bbe:	f8df e35c 	ldr.w	lr, [pc, #860]	; 8001f1c <main+0x73c>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001bc2:	f8df c35c 	ldr.w	ip, [pc, #860]	; 8001f20 <main+0x740>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001bc6:	f8d4 a014 	ldr.w	sl, [r4, #20]
  ch.tm.offset = tm.last;
 8001bca:	9a04      	ldr	r2, [sp, #16]
 8001bcc:	6762      	str	r2, [r4, #116]	; 0x74
 8001bce:	f105 0010 	add.w	r0, r5, #16
 8001bd2:	6128      	str	r0, [r5, #16]
  tqp->p_prev = (thread_t *)tqp;
 8001bd4:	6168      	str	r0, [r5, #20]
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001bd6:	f021 0107 	bic.w	r1, r1, #7
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001bda:	2040      	movs	r0, #64	; 0x40
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001bdc:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001be0:	f104 0230 	add.w	r2, r4, #48	; 0x30
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001be4:	63a0      	str	r0, [r4, #56]	; 0x38
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001be6:	66e0      	str	r0, [r4, #108]	; 0x6c
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001be8:	f8ce 1000 	str.w	r1, [lr]
 8001bec:	48c0      	ldr	r0, [pc, #768]	; (8001ef0 <main+0x710>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001bee:	f8cc 3000 	str.w	r3, [ip]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001bf2:	f104 0158 	add.w	r1, r4, #88	; 0x58
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001bf6:	f104 0e54 	add.w	lr, r4, #84	; 0x54
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001bfa:	f04f 0c02 	mov.w	ip, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001bfe:	f884 604d 	strb.w	r6, [r4, #77]	; 0x4d
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001c02:	66a6      	str	r6, [r4, #104]	; 0x68
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001c04:	6666      	str	r6, [r4, #100]	; 0x64
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001c06:	f884 904e 	strb.w	r9, [r4, #78]	; 0x4e
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001c0a:	64a6      	str	r6, [r4, #72]	; 0x48
  REG_INSERT(tp);
 8001c0c:	6424      	str	r4, [r4, #64]	; 0x40
 8001c0e:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
 8001c12:	61ae      	str	r6, [r5, #24]
  default_heap.h_free.h.u.next = NULL;
 8001c14:	60ae      	str	r6, [r5, #8]
 8001c16:	f8ca 2010 	str.w	r2, [sl, #16]
  default_heap.h_free.h.size = 0;
 8001c1a:	60ee      	str	r6, [r5, #12]
 8001c1c:	6162      	str	r2, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8001c1e:	61a2      	str	r2, [r4, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8001c20:	f884 904c 	strb.w	r9, [r4, #76]	; 0x4c
 8001c24:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001c28:	6028      	str	r0, [r5, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001c2a:	65a1      	str	r1, [r4, #88]	; 0x58
  tqp->p_prev = (thread_t *)tqp;
 8001c2c:	65e1      	str	r1, [r4, #92]	; 0x5c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001c2e:	f8cd c004 	str.w	ip, [sp, #4]
 8001c32:	f386 8811 	msr	BASEPRI, r6
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001c36:	b662      	cpsie	i
 8001c38:	69a3      	ldr	r3, [r4, #24]
 8001c3a:	4aae      	ldr	r2, [pc, #696]	; (8001ef4 <main+0x714>)
 8001c3c:	619a      	str	r2, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8001c3e:	21d8      	movs	r1, #216	; 0xd8
 8001c40:	464a      	mov	r2, r9
 8001c42:	4bad      	ldr	r3, [pc, #692]	; (8001ef8 <main+0x718>)
 *
 * @init
 */
void lcdObjectInit(LCDDriver *lcdp){

  lcdp->state  = LCD_STOP;
 8001c44:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 8001f24 <main+0x744>
 8001c48:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8001c4c:	f000 fcb0 	bl	80025b0 <chThdCreateStatic.constprop.69>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8001c50:	4baa      	ldr	r3, [pc, #680]	; (8001efc <main+0x71c>)
 8001c52:	6183      	str	r3, [r0, #24]
#if LCD_USE_DIMMABLE_BACKLIGHT

  palSetLineMode(LINE_A, PAL_MODE_ALTERNATE(1));
#else

  palSetLineMode(LINE_A, PAL_MODE_OUTPUT_PUSHPULL |
 8001c54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c58:	4658      	mov	r0, fp
 8001c5a:	2219      	movs	r2, #25
 8001c5c:	f88a 9000 	strb.w	r9, [sl]
  lcdp->config = NULL;
 8001c60:	f8ca 6008 	str.w	r6, [sl, #8]
  lcdp->backlight = 0;
 8001c64:	f8ca 6004 	str.w	r6, [sl, #4]
 8001c68:	f7ff f912 	bl	8000e90 <_pal_lld_setgroupmode>
                 PAL_STM32_OSPEED_HIGHEST);
#endif

  /* Configuring RW, RS and E PIN as Output Push Pull. Note that Data PIN are
     managed Internally */
  palSetLineMode(LINE_RW, PAL_MODE_OUTPUT_PUSHPULL |
 8001c6c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8001c70:	4658      	mov	r0, fp
 8001c72:	4661      	mov	r1, ip
 8001c74:	2219      	movs	r2, #25
 8001c76:	f7ff f90b 	bl	8000e90 <_pal_lld_setgroupmode>
                PAL_STM32_OSPEED_HIGHEST);
  palSetLineMode(LINE_RS, PAL_MODE_OUTPUT_PUSHPULL |
 8001c7a:	4658      	mov	r0, fp
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	2219      	movs	r2, #25
 8001c80:	f7ff f906 	bl	8000e90 <_pal_lld_setgroupmode>
                PAL_STM32_OSPEED_HIGHEST);
  palSetLineMode(LINE_E, PAL_MODE_OUTPUT_PUSHPULL |
 8001c84:	2108      	movs	r1, #8
 8001c86:	4658      	mov	r0, fp
 8001c88:	2219      	movs	r2, #25
 8001c8a:	f7ff f901 	bl	8000e90 <_pal_lld_setgroupmode>
  osalDbgCheck((lcdp != NULL) && (config != NULL));

  osalDbgAssert((lcdp->state == LCD_STOP) || (lcdp->state == LCD_ACTIVE),
              "lcdStart(), invalid state");

  lcdp->config = config;
 8001c8e:	4b9c      	ldr	r3, [pc, #624]	; (8001f00 <main+0x720>)
 8001c90:	f8ca 3008 	str.w	r3, [sl, #8]
 *
 * @api
 */
static inline void osalThreadSleep(systime_t time) {

  chThdSleep(time);
 8001c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  lcdp->backlight = lcdp->config->backlight;
 8001c98:	2364      	movs	r3, #100	; 0x64
 8001c9a:	f8ca 3004 	str.w	r3, [sl, #4]
 8001c9e:	f7ff fd4f 	bl	8001740 <chThdSleep>
 8001ca2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001ca6:	6859      	ldr	r1, [r3, #4]
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  unsigned ii;

  osalThreadSleepMilliseconds(50);
  for(ii = 0; ii < LINE_DATA_LEN; ii++) {
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
 8001ca8:	464b      	mov	r3, r9
 8001caa:	f106 0904 	add.w	r9, r6, #4
 8001cae:	2219      	movs	r2, #25
 8001cb0:	f851 0029 	ldr.w	r0, [r1, r9, lsl #2]
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f000 010f 	and.w	r1, r0, #15
 8001cba:	fa03 f101 	lsl.w	r1, r3, r1
 8001cbe:	f020 000f 	bic.w	r0, r0, #15
 8001cc2:	f7ff f8e5 	bl	8000e90 <_pal_lld_setgroupmode>
                   PAL_STM32_OSPEED_HIGHEST);
    palClearLine(lcdp->config->pinmap->D[ii]);
 8001cc6:	f8da 2008 	ldr.w	r2, [sl, #8]
 8001cca:	9b01      	ldr	r3, [sp, #4]
 8001ccc:	6851      	ldr	r1, [r2, #4]
 8001cce:	f8df b254 	ldr.w	fp, [pc, #596]	; 8001f24 <main+0x744>
 8001cd2:	f851 2029 	ldr.w	r2, [r1, r9, lsl #2]
 8001cd6:	f002 000f 	and.w	r0, r2, #15
 8001cda:	fa03 f000 	lsl.w	r0, r3, r0
 8001cde:	f022 020f 	bic.w	r2, r2, #15
 */
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  unsigned ii;

  osalThreadSleepMilliseconds(50);
  for(ii = 0; ii < LINE_DATA_LEN; ii++) {
 8001ce2:	3601      	adds	r6, #1
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
                   PAL_STM32_OSPEED_HIGHEST);
    palClearLine(lcdp->config->pinmap->D[ii]);
 8001ce4:	b280      	uxth	r0, r0
 */
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  unsigned ii;

  osalThreadSleepMilliseconds(50);
  for(ii = 0; ii < LINE_DATA_LEN; ii++) {
 8001ce6:	2e08      	cmp	r6, #8
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
                   PAL_STM32_OSPEED_HIGHEST);
    palClearLine(lcdp->config->pinmap->D[ii]);
 8001ce8:	8350      	strh	r0, [r2, #26]
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  unsigned ii;

  osalThreadSleepMilliseconds(50);
  for(ii = 0; ii < LINE_DATA_LEN; ii++) {
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
 8001cea:	f04f 0901 	mov.w	r9, #1
 */
static void hd44780InitByIstructions(LCDDriver *lcdp) {
  unsigned ii;

  osalThreadSleepMilliseconds(50);
  for(ii = 0; ii < LINE_DATA_LEN; ii++) {
 8001cee:	d1dc      	bne.n	8001caa <main+0x4ca>
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
                   PAL_STM32_OSPEED_HIGHEST);
    palClearLine(lcdp->config->pinmap->D[ii]);
  }

  palClearLine(lcdp->config->pinmap->E);
 8001cf0:	688a      	ldr	r2, [r1, #8]
 *
 * @init
 */
void MFRC522ObjectInit(MFRC522Driver* mfrc522p) {

	mfrc522p->state = MFRC522_STOP;
 8001cf2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8001f28 <main+0x748>
 8001cf6:	f002 000f 	and.w	r0, r2, #15
 8001cfa:	fa09 fe00 	lsl.w	lr, r9, r0
 8001cfe:	f022 020f 	bic.w	r2, r2, #15
 8001d02:	fa1f fe8e 	uxth.w	lr, lr
 8001d06:	f8a2 e01a 	strh.w	lr, [r2, #26]
  palClearLine(lcdp->config->pinmap->RW);
 8001d0a:	6848      	ldr	r0, [r1, #4]
 8001d0c:	f000 0c0f 	and.w	ip, r0, #15
 8001d10:	fa09 fc0c 	lsl.w	ip, r9, ip
 8001d14:	f020 000f 	bic.w	r0, r0, #15
 8001d18:	fa1f fc8c 	uxth.w	ip, ip
 8001d1c:	f8a0 c01a 	strh.w	ip, [r0, #26]
  palClearLine(lcdp->config->pinmap->RS);
 8001d20:	6808      	ldr	r0, [r1, #0]
 8001d22:	f000 0c0f 	and.w	ip, r0, #15
 8001d26:	fa09 fc0c 	lsl.w	ip, r9, ip
 8001d2a:	f020 000f 	bic.w	r0, r0, #15
 8001d2e:	fa1f fc8c 	uxth.w	ip, ip
 8001d32:	f8a0 c01a 	strh.w	ip, [r0, #26]
  palSetLine(lcdp->config->pinmap->D[LINE_DATA_LEN - 3]);
 8001d36:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001d38:	f000 0c0f 	and.w	ip, r0, #15
 8001d3c:	fa09 fc0c 	lsl.w	ip, r9, ip
 8001d40:	f020 000f 	bic.w	r0, r0, #15
 8001d44:	fa1f fc8c 	uxth.w	ip, ip
 8001d48:	f8a0 c018 	strh.w	ip, [r0, #24]
  palSetLine(lcdp->config->pinmap->D[LINE_DATA_LEN - 4]);
 8001d4c:	6a09      	ldr	r1, [r1, #32]
 8001d4e:	f001 000f 	and.w	r0, r1, #15
 8001d52:	fa09 f000 	lsl.w	r0, r9, r0
 8001d56:	f021 010f 	bic.w	r1, r1, #15
 8001d5a:	b280      	uxth	r0, r0
 8001d5c:	8308      	strh	r0, [r1, #24]

  palSetLine(lcdp->config->pinmap->E);
 8001d5e:	f8a2 e018 	strh.w	lr, [r2, #24]
 8001d62:	200a      	movs	r0, #10
 8001d64:	f7ff fcec 	bl	8001740 <chThdSleep>
  osalThreadSleepMilliseconds(1);
  palClearLine(lcdp->config->pinmap->E);
 8001d68:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001d6c:	6852      	ldr	r2, [r2, #4]
 8001d6e:	6892      	ldr	r2, [r2, #8]
 8001d70:	f002 010f 	and.w	r1, r2, #15
 8001d74:	fa09 f101 	lsl.w	r1, r9, r1
 8001d78:	f022 020f 	bic.w	r2, r2, #15
 8001d7c:	b289      	uxth	r1, r1
 8001d7e:	8351      	strh	r1, [r2, #26]
 8001d80:	2032      	movs	r0, #50	; 0x32
 8001d82:	f7ff fcdd 	bl	8001740 <chThdSleep>
  osalThreadSleepMilliseconds(5);

  palSetLine(lcdp->config->pinmap->E);
 8001d86:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001d8a:	6852      	ldr	r2, [r2, #4]
 8001d8c:	6892      	ldr	r2, [r2, #8]
 8001d8e:	f002 010f 	and.w	r1, r2, #15
 8001d92:	fa09 f101 	lsl.w	r1, r9, r1
 8001d96:	f022 020f 	bic.w	r2, r2, #15
 8001d9a:	b289      	uxth	r1, r1
 8001d9c:	8311      	strh	r1, [r2, #24]
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f7ff fcce 	bl	8001740 <chThdSleep>
  osalThreadSleepMilliseconds(1);
  palClearLine(lcdp->config->pinmap->E);
 8001da4:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001da8:	6852      	ldr	r2, [r2, #4]
 8001daa:	6892      	ldr	r2, [r2, #8]
 8001dac:	f002 010f 	and.w	r1, r2, #15
 8001db0:	fa09 f101 	lsl.w	r1, r9, r1
 8001db4:	f022 020f 	bic.w	r2, r2, #15
 8001db8:	b289      	uxth	r1, r1
 8001dba:	8351      	strh	r1, [r2, #26]
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	f7ff fcbf 	bl	8001740 <chThdSleep>
  osalThreadSleepMilliseconds(1);

  palSetLine(lcdp->config->pinmap->E);
 8001dc2:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001dc6:	6852      	ldr	r2, [r2, #4]
 8001dc8:	6892      	ldr	r2, [r2, #8]
 8001dca:	f002 010f 	and.w	r1, r2, #15
 8001dce:	fa09 f101 	lsl.w	r1, r9, r1
 8001dd2:	f022 020f 	bic.w	r2, r2, #15
 8001dd6:	b289      	uxth	r1, r1
 8001dd8:	8311      	strh	r1, [r2, #24]
 8001dda:	200a      	movs	r0, #10
 8001ddc:	f7ff fcb0 	bl	8001740 <chThdSleep>
  osalThreadSleepMilliseconds(1);
  palClearLine(lcdp->config->pinmap->E);
 8001de0:	f8db 0008 	ldr.w	r0, [fp, #8]
 8001de4:	6842      	ldr	r2, [r0, #4]
 8001de6:	6892      	ldr	r2, [r2, #8]
 8001de8:	f002 010f 	and.w	r1, r2, #15
 8001dec:	fa09 f101 	lsl.w	r1, r9, r1
 8001df0:	f022 020f 	bic.w	r2, r2, #15
 8001df4:	b289      	uxth	r1, r1
 8001df6:	8351      	strh	r1, [r2, #26]
  osalThreadSleepMilliseconds(1);
  palClearLine(lcdp->config->pinmap->E);
#endif

  /* Configuring data interface */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_FS | LCD_DATA_LENGHT |
 8001df8:	78c2      	ldrb	r2, [r0, #3]
 8001dfa:	7881      	ldrb	r1, [r0, #2]
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	f041 0130 	orr.w	r1, r1, #48	; 0x30
 8001e02:	2000      	movs	r0, #0
 8001e04:	f000 fcfc 	bl	8002800 <hd44780WriteRegister.constprop.25>
                       lcdp->config->font | lcdp->config->lines);

  /* Turning off display and clearing */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC);
 8001e08:	4631      	mov	r1, r6
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 fcf8 	bl	8002800 <hd44780WriteRegister.constprop.25>
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_CLEAR_DISPLAY);
 8001e10:	4649      	mov	r1, r9
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 fcf4 	bl	8002800 <hd44780WriteRegister.constprop.25>

  /* Setting display control turning on display */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC | LCD_DC_D |
                       lcdp->config->cursor | lcdp->config->blinking);
 8001e18:	f8db 2008 	ldr.w	r2, [fp, #8]
  /* Turning off display and clearing */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC);
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_CLEAR_DISPLAY);

  /* Setting display control turning on display */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_DC | LCD_DC_D |
 8001e1c:	7811      	ldrb	r1, [r2, #0]
 8001e1e:	7852      	ldrb	r2, [r2, #1]
 8001e20:	4311      	orrs	r1, r2
 8001e22:	f041 010c 	orr.w	r1, r1, #12
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 fcea 	bl	8002800 <hd44780WriteRegister.constprop.25>
                       lcdp->config->cursor | lcdp->config->blinking);

  /* Setting Entry Mode */
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_EMS | LCD_EMS_ID);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	2106      	movs	r1, #6
 8001e30:	f000 fce6 	bl	8002800 <hd44780WriteRegister.constprop.25>
  pwmEnableChannel(lcdp->config->pwmp, lcdp->config->channelid,
                   PWM_PERCENTAGE_TO_WIDTH(lcdp->config->pwmp,
                                           lcdp->config->backlight * 100));

#else
  palWriteLine(lcdp->config->pinmap->A,
 8001e34:	f8db 2008 	ldr.w	r2, [fp, #8]
                PAL_STM32_OSPEED_HIGHEST);


  lcdStart(&LCDD1, &lcdcfg);

  lcdWriteString(&LCDD1, "Buongiorno.     ", 0);
 8001e38:	4832      	ldr	r0, [pc, #200]	; (8001f04 <main+0x724>)
 8001e3a:	6851      	ldr	r1, [r2, #4]
 8001e3c:	6892      	ldr	r2, [r2, #8]
 8001e3e:	68c9      	ldr	r1, [r1, #12]
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	f001 0e0f 	and.w	lr, r1, #15
 8001e46:	bf0c      	ite	eq
 8001e48:	464a      	moveq	r2, r9
 8001e4a:	2200      	movne	r2, #0
 8001e4c:	f10e 0c10 	add.w	ip, lr, #16
 8001e50:	fa02 f60c 	lsl.w	r6, r2, ip
 8001e54:	bf14      	ite	ne
 8001e56:	464a      	movne	r2, r9
 8001e58:	2200      	moveq	r2, #0
 8001e5a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e5e:	f021 010f 	bic.w	r1, r1, #15
 8001e62:	4332      	orrs	r2, r6
 8001e64:	618a      	str	r2, [r1, #24]
              lcdp->config->backlight ? PAL_HIGH : PAL_LOW);
#endif

  lcdp->state = LCD_ACTIVE;
 8001e66:	2202      	movs	r2, #2
 8001e68:	2100      	movs	r1, #0
 8001e6a:	f88b 2000 	strb.w	r2, [fp]
 8001e6e:	f000 fd87 	bl	8002980 <lcdWriteString.constprop.21>
  lcdWriteString(&LCDD1, "CAS17           ",40);
 8001e72:	4825      	ldr	r0, [pc, #148]	; (8001f08 <main+0x728>)
 8001e74:	2128      	movs	r1, #40	; 0x28
 8001e76:	f000 fd83 	bl	8002980 <lcdWriteString.constprop.21>

//Configuring PWM pin as Output Push Pull.
  palSetPadMode(PWM_MOTOR_PORT, PWM_MOTOR_PIN,PAL_MODE_OUTPUT_PUSHPULL);
 8001e7a:	464a      	mov	r2, r9
 8001e7c:	4823      	ldr	r0, [pc, #140]	; (8001f0c <main+0x72c>)
 8001e7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e82:	f7ff f805 	bl	8000e90 <_pal_lld_setgroupmode>


  //Configuring SPI2 pins, required for comunication with RFID reader.
  palSetPadMode(PORT_SPI2_SCK, PIN_SPI2_SCK,
 8001e86:	4821      	ldr	r0, [pc, #132]	; (8001f0c <main+0x72c>)
 8001e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8c:	f240 229a 	movw	r2, #666	; 0x29a
 8001e90:	f7fe fffe 	bl	8000e90 <_pal_lld_setgroupmode>
                PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);    /* New SCK */
  palSetPadMode(PORT_SPI2_MISO, PIN_SPI2_MISO,
 8001e94:	481d      	ldr	r0, [pc, #116]	; (8001f0c <main+0x72c>)
 8001e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e9a:	f240 229a 	movw	r2, #666	; 0x29a
 8001e9e:	f7fe fff7 	bl	8000e90 <_pal_lld_setgroupmode>
                PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);    /* New MISO*/
  palSetPadMode(PORT_SPI2_MOSI, PIN_SPI2_MOSI,
 8001ea2:	481a      	ldr	r0, [pc, #104]	; (8001f0c <main+0x72c>)
 8001ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea8:	f240 229a 	movw	r2, #666	; 0x29a
 8001eac:	f7fe fff0 	bl	8000e90 <_pal_lld_setgroupmode>
                PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);    /* New MOSI*/
  palSetPadMode(PORT_SPI2_CS, PIN_SPI2_CS,
 8001eb0:	4817      	ldr	r0, [pc, #92]	; (8001f10 <main+0x730>)
 8001eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb6:	2219      	movs	r2, #25
 8001eb8:	f7fe ffea 	bl	8000e90 <_pal_lld_setgroupmode>
                PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST); /* New CS*/
  palSetPad(PORT_SPI2_CS, PIN_SPI2_CS);
 8001ebc:	4914      	ldr	r1, [pc, #80]	; (8001f10 <main+0x730>)
 8001ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
	mfrc522p->config = NULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	830a      	strh	r2, [r1, #24]
 8001ec6:	f8ca 3004 	str.w	r3, [sl, #4]
 *
 * @init
 */
void MFRC522ObjectInit(MFRC522Driver* mfrc522p) {

	mfrc522p->state = MFRC522_STOP;
 8001eca:	f88a 9000 	strb.w	r9, [sl]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001ece:	2320      	movs	r3, #32
 8001ed0:	f383 8811 	msr	BASEPRI, r3
 */
void spi_lld_start(SPIDriver *spip) {
  uint32_t ds;

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8001ed4:	f898 3000 	ldrb.w	r3, [r8]
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <main+0x734>)
 8001eda:	f8c8 2004 	str.w	r2, [r8, #4]
 8001ede:	454b      	cmp	r3, r9
 8001ee0:	4e0d      	ldr	r6, [pc, #52]	; (8001f18 <main+0x738>)
 8001ee2:	f000 82d2 	beq.w	800248a <main+0xcaa>
 8001ee6:	e021      	b.n	8001f2c <main+0x74c>
 8001ee8:	200013ef 	.word	0x200013ef
 8001eec:	2000a000 	.word	0x2000a000
 8001ef0:	08000911 	.word	0x08000911
 8001ef4:	08003c20 	.word	0x08003c20
 8001ef8:	08000c81 	.word	0x08000c81
 8001efc:	08003c40 	.word	0x08003c40
 8001f00:	08003cc0 	.word	0x08003cc0
 8001f04:	08003c48 	.word	0x08003c48
 8001f08:	08003c5c 	.word	0x08003c5c
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	48000c00 	.word	0x48000c00
 8001f14:	08003c10 	.word	0x08003c10
 8001f18:	200012a4 	.word	0x200012a4
 8001f1c:	20000bb4 	.word	0x20000bb4
 8001f20:	20000bac 	.word	0x20000bac
 8001f24:	200012d4 	.word	0x200012d4
 8001f28:	200012ec 	.word	0x200012ec
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
 8001f2c:	8993      	ldrh	r3, [r2, #12]
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001f2e:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
 8001f32:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 8001f36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001f3a:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8001f3e:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001f42:	bf88      	it	hi
 8001f44:	f441 61a0 	orrhi.w	r1, r1, #1280	; 0x500
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001f48:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8001f4c:	8951      	ldrh	r1, [r2, #10]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8001f4e:	f8d8 201c 	ldr.w	r2, [r8, #28]
  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001f52:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8001f56:	f041 0104 	orr.w	r1, r1, #4
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
                    SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8001f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001f5e:	bf88      	it	hi
 8001f60:	f440 60a0 	orrhi.w	r0, r0, #1280	; 0x500
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8001f64:	b289      	uxth	r1, r1
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
                    SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8001f66:	f043 0307 	orr.w	r3, r3, #7
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8001f6a:	2600      	movs	r6, #0
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001f6c:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8001f70:	6016      	str	r6, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8001f72:	6011      	str	r1, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 8001f74:	6053      	str	r3, [r2, #4]
                    SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 8001f76:	6813      	ldr	r3, [r2, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 8001f78:	2102      	movs	r1, #2
 8001f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	f888 1000 	strb.w	r1, [r8]
 8001f84:	f386 8811 	msr	BASEPRI, r6
 8001f88:	2320      	movs	r3, #32
 8001f8a:	f383 8811 	msr	BASEPRI, r3
	osalDbgCheck((mfrc522p != NULL) && (config != NULL));

	osalSysLock();
	osalDbgAssert((mfrc522p->state == MFRC522_STOP) || (mfrc522p->state == MFRC522_READY),
			"invalid state");
	mfrc522p->config = config;
 8001f8e:	4bb0      	ldr	r3, [pc, #704]	; (8002250 <main+0xa70>)
 8001f90:	f8ca 3004 	str.w	r3, [sl, #4]
 8001f94:	f386 8811 	msr	BASEPRI, r6

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/
static void MFRC522Reset(MFRC522Driver* mfrc522p) {
    MFRC522WriteRegister(mfrc522p, MifareREG_COMMAND, PCD_RESETPHASE);
 8001f98:	2001      	movs	r0, #1
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f000 fd10 	bl	80029c0 <MFRC522WriteRegister.constprop.20>

	osalSysUnlock();

	MFRC522Reset(mfrc522p);

    MFRC522WriteRegister(mfrc522p, MifareREG_T_MODE, 0x8D);
 8001fa0:	202a      	movs	r0, #42	; 0x2a
 8001fa2:	218d      	movs	r1, #141	; 0x8d
 8001fa4:	f000 fd0c 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
    MFRC522WriteRegister(mfrc522p, MifareREG_T_PRESCALER, 0x3E);
 8001fa8:	202b      	movs	r0, #43	; 0x2b
 8001faa:	213e      	movs	r1, #62	; 0x3e
 8001fac:	f000 fd08 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
    MFRC522WriteRegister(mfrc522p, MifareREG_T_RELOAD_L, 30);
 8001fb0:	202d      	movs	r0, #45	; 0x2d
 8001fb2:	211e      	movs	r1, #30
 8001fb4:	f000 fd04 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
    MFRC522WriteRegister(mfrc522p, MifareREG_T_RELOAD_H, 0);
 8001fb8:	4631      	mov	r1, r6
 8001fba:	202c      	movs	r0, #44	; 0x2c
 8001fbc:	f000 fd00 	bl	80029c0 <MFRC522WriteRegister.constprop.20>

    /* 48dB gain */
    MFRC522WriteRegister(mfrc522p, MifareREG_RF_CFG, 0x70);
 8001fc0:	2026      	movs	r0, #38	; 0x26
 8001fc2:	2170      	movs	r1, #112	; 0x70
 8001fc4:	f000 fcfc 	bl	80029c0 <MFRC522WriteRegister.constprop.20>

    MFRC522WriteRegister(mfrc522p, MifareREG_TX_AUTO, 0x40);
 8001fc8:	2015      	movs	r0, #21
 8001fca:	2140      	movs	r1, #64	; 0x40
 8001fcc:	f000 fcf8 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
    MFRC522WriteRegister(mfrc522p, MifareREG_MODE, 0x3D);
 8001fd0:	2011      	movs	r0, #17
 8001fd2:	213d      	movs	r1, #61	; 0x3d
 8001fd4:	f000 fcf4 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
}

static void MFRC522AntennaOn(MFRC522Driver* mfrc522p) {
    uint8_t temp;

    temp = MFRC522ReadRegister(mfrc522p, MifareREG_TX_CONTROL);
 8001fd8:	2014      	movs	r0, #20
 8001fda:	f000 fd51 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
    if (!(temp & 0x03)) {
 8001fde:	0786      	lsls	r6, r0, #30
 8001fe0:	f000 829e 	beq.w	8002520 <main+0xd40>
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	f381 8811 	msr	BASEPRI, r1
    MFRC522WriteRegister(mfrc522p, MifareREG_MODE, 0x3D);

	MFRC522AntennaOn(mfrc522p);

	osalSysLock();
	mfrc522p->state = MFRC522_ACTIVE;
 8001fea:	2303      	movs	r3, #3
 8001fec:	f88a 3000 	strb.w	r3, [sl]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f382 8811 	msr	BASEPRI, r2
void motorObjectInit(MotorDriver* motorp){
  motorp->config = NULL;
  motorp->position= DOWN_POSITION;
}
void motorStart(MotorDriver* motorp, const MotorConfig *config){
  motorp->config = config;
 8001ff6:	4b97      	ldr	r3, [pc, #604]	; (8002254 <main+0xa74>)



void motorObjectInit(MotorDriver* motorp){
  motorp->config = NULL;
  motorp->position= DOWN_POSITION;
 8001ff8:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 80022a4 <main+0xac4>
}
void motorStart(MotorDriver* motorp, const MotorConfig *config){
  motorp->config = config;
  pwmStart(motorp->config->pwmdriver, motorp->config->pwmcfg);
 8001ffc:	f8d3 e000 	ldr.w	lr, [r3]
void motorObjectInit(MotorDriver* motorp){
  motorp->config = NULL;
  motorp->position= DOWN_POSITION;
}
void motorStart(MotorDriver* motorp, const MotorConfig *config){
  motorp->config = config;
 8002000:	f8c8 3004 	str.w	r3, [r8, #4]



void motorObjectInit(MotorDriver* motorp){
  motorp->config = NULL;
  motorp->position= DOWN_POSITION;
 8002004:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002008:	f8c8 0000 	str.w	r0, [r8]
}
void motorStart(MotorDriver* motorp, const MotorConfig *config){
  motorp->config = config;
  pwmStart(motorp->config->pwmdriver, motorp->config->pwmcfg);
 800200c:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8002010:	f381 8811 	msr	BASEPRI, r1
 */
void pwm_lld_start(PWMDriver *pwmp) {
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8002014:	f89e 1000 	ldrb.w	r1, [lr]

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 8002018:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800201c:	f8ce 3008 	str.w	r3, [lr, #8]
 8002020:	2901      	cmp	r1, #1
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 8002022:	f8ce c004 	str.w	ip, [lr, #4]
 8002026:	f000 824c 	beq.w	80024c2 <main+0xce2>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 800202a:	f8de 3018 	ldr.w	r3, [lr, #24]
 800202e:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8002030:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8002032:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8002034:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
#if STM32_TIM_MAX_CHANNELS > 4
    if (pwmp->channels > 4) {
 8002038:	f89e 1010 	ldrb.w	r1, [lr, #16]
 800203c:	2904      	cmp	r1, #4
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
 800203e:	bf84      	itt	hi
 8002040:	659a      	strhi	r2, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
 8002042:	65da      	strhi	r2, [r3, #92]	; 0x5c
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8002044:	2200      	movs	r2, #0
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002048:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800204c:	9201      	str	r2, [sp, #4]
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800204e:	f8de 1014 	ldr.w	r1, [lr, #20]
 8002052:	f8dc 2000 	ldr.w	r2, [ip]
 8002056:	fbb1 f1f2 	udiv	r1, r1, r2
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800205a:	9a01      	ldr	r2, [sp, #4]
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 800205c:	f8de 0008 	ldr.w	r0, [lr, #8]
  pwmp->tim->CR2  = pwmp->config->cr2;
 8002060:	f8dc 603c 	ldr.w	r6, [ip, #60]	; 0x3c

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002064:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8002068:	3801      	subs	r0, #1
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 800206a:	3901      	subs	r1, #1
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 800206c:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 800206e:	6299      	str	r1, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8002070:	62d8      	str	r0, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8002072:	605e      	str	r6, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002074:	f000 8207 	beq.w	8002486 <main+0xca6>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 8002078:	2a02      	cmp	r2, #2
 800207a:	bf0c      	ite	eq
 800207c:	2103      	moveq	r1, #3
 800207e:	2100      	movne	r1, #0
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8002080:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8002084:	f002 020f 	and.w	r2, r2, #15
 8002088:	2a01      	cmp	r2, #1
 800208a:	d003      	beq.n	8002094 <main+0x8b4>
 800208c:	2a02      	cmp	r2, #2
 800208e:	d103      	bne.n	8002098 <main+0x8b8>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 8002090:	f041 0120 	orr.w	r1, r1, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 8002094:	f041 0110 	orr.w	r1, r1, #16
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8002098:	f8dc 201c 	ldr.w	r2, [ip, #28]
 800209c:	f002 020f 	and.w	r2, r2, #15
 80020a0:	2a01      	cmp	r2, #1
 80020a2:	d003      	beq.n	80020ac <main+0x8cc>
 80020a4:	2a02      	cmp	r2, #2
 80020a6:	d103      	bne.n	80020b0 <main+0x8d0>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 80020a8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 80020ac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 80020b0:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
 80020b4:	f002 020f 	and.w	r2, r2, #15
 80020b8:	2a01      	cmp	r2, #1
 80020ba:	d003      	beq.n	80020c4 <main+0x8e4>
 80020bc:	2a02      	cmp	r2, #2
 80020be:	d103      	bne.n	80020c8 <main+0x8e8>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 80020c0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 80020c4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80020c8:	f8dc 2040 	ldr.w	r2, [ip, #64]	; 0x40
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 80020cc:	6219      	str	r1, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80020ce:	f04f 0901 	mov.w	r9, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80020d2:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 80020d6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80020da:	2200      	movs	r2, #0
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80020dc:	2685      	movs	r6, #133	; 0x85
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 80020de:	2002      	movs	r0, #2
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 80020e0:	f8c3 9014 	str.w	r9, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 80020e4:	611a      	str	r2, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 80020e6:	60d9      	str	r1, [r3, #12]
                     ~STM32_TIM_DIER_IRQ_MASK;
#if STM32_PWM_USE_TIM1 || STM32_PWM_USE_TIM8
#if STM32_PWM_USE_ADVANCED
  pwmp->tim->BDTR  = pwmp->config->bdtr | STM32_TIM_BDTR_MOE;
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
 80020e8:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 80020ec:	601e      	str	r6, [r3, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 80020ee:	f8ce 200c 	str.w	r2, [lr, #12]
  pwmp->state = PWM_READY;
 80020f2:	f88e 0000 	strb.w	r0, [lr]
 80020f6:	f382 8811 	msr	BASEPRI, r2
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));
 80020fa:	e898 0009 	ldmia.w	r8, {r0, r3}
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	4e55      	ldr	r6, [pc, #340]	; (8002258 <main+0xa78>)
 8002102:	688b      	ldr	r3, [r1, #8]
 8002104:	fb03 f300 	mul.w	r3, r3, r0
 8002108:	fba6 0303 	umull	r0, r3, r6, r3
 800210c:	0b5b      	lsrs	r3, r3, #13
 800210e:	2620      	movs	r6, #32
 8002110:	f386 8811 	msr	BASEPRI, r6

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 8002114:	68c8      	ldr	r0, [r1, #12]
  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
#else
  if (channel < 4)
    pwmp->tim->CCR[channel] = width;
 8002116:	f8d1 e018 	ldr.w	lr, [r1, #24]
 800211a:	ea40 0009 	orr.w	r0, r0, r9
 800211e:	60c8      	str	r0, [r1, #12]
 8002120:	f8ce 3034 	str.w	r3, [lr, #52]	; 0x34
 8002124:	f382 8811 	msr	BASEPRI, r2
  pwmEnableChannelNotification(motorp->config->pwmdriver, 0);
 8002128:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f386 8811 	msr	BASEPRI, r6
 *
 * @notapi
 */
void pwm_lld_enable_channel_notification(PWMDriver *pwmp,
                                         pwmchannel_t channel) {
  uint32_t dier = pwmp->tim->DIER;
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	68d3      	ldr	r3, [r2, #12]
  osalDbgAssert(channel < 4, "callback not supported");
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
 8002136:	0798      	lsls	r0, r3, #30
 8002138:	d405      	bmi.n	8002146 <main+0x966>
    pwmp->tim->DIER = dier | (2 << channel);
 800213a:	f043 0302 	orr.w	r3, r3, #2
    pwmp->tim->SR   = ~(2 << channel);
 800213e:	f06f 0102 	mvn.w	r1, #2
#endif

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & (2 << channel)) == 0) {
    pwmp->tim->DIER = dier | (2 << channel);
 8002142:	60d3      	str	r3, [r2, #12]
    pwmp->tim->SR   = ~(2 << channel);
 8002144:	6111      	str	r1, [r2, #16]
 8002146:	2300      	movs	r3, #0
 8002148:	f383 8811 	msr	BASEPRI, r3
  pwmEnablePeriodicNotification(motorp->config->pwmdriver);
 800214c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f382 8811 	msr	BASEPRI, r2
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_enable_periodic_notification(PWMDriver *pwmp) {
  uint32_t dier = pwmp->tim->DIER;
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	68da      	ldr	r2, [r3, #12]

  /* If the IRQ is not already enabled care must be taken to clear it,
     it is probably already pending because the timer is running.*/
  if ((dier & STM32_TIM_DIER_UIE) == 0) {
 800215c:	07d1      	lsls	r1, r2, #31
 800215e:	d406      	bmi.n	800216e <main+0x98e>
    pwmp->tim->DIER = dier | STM32_TIM_DIER_UIE;
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	60da      	str	r2, [r3, #12]
    pwmp->tim->SR &= STM32_TIM_SR_UIF;
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	f002 0201 	and.w	r2, r2, #1
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	2300      	movs	r3, #0
 8002170:	f383 8811 	msr	BASEPRI, r3
 8002174:	2320      	movs	r3, #32
 8002176:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 800217a:	7a3b      	ldrb	r3, [r7, #8]
 800217c:	2b01      	cmp	r3, #1
 800217e:	f000 817c 	beq.w	800247a <main+0xc9a>
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8002182:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002184:	4935      	ldr	r1, [pc, #212]	; (800225c <main+0xa7c>)
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8002186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8002188:	fba1 1202 	umull	r1, r2, r1, r2
 800218c:	0b12      	lsrs	r2, r2, #12

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800218e:	f244 0840 	movw	r8, #16448	; 0x4040
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8002192:	f04f 0c01 	mov.w	ip, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002196:	f240 1e2d 	movw	lr, #301	; 0x12d
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 800219a:	f04f 30ff 	mov.w	r0, #4294967295

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 800219e:	2102      	movs	r1, #2
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	2600      	movs	r6, #0

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80021a4:	f8c3 8004 	str.w	r8, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 80021a8:	f8c3 c008 	str.w	ip, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80021ac:	f8c3 e000 	str.w	lr, [r3]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 80021b0:	6218      	str	r0, [r3, #32]
 80021b2:	7239      	strb	r1, [r7, #8]
 80021b4:	f386 8811 	msr	BASEPRI, r6

  /*
   * Initializes Serial Driver 1.
   */
  sdStart(&SD1, NULL);
  palSetGroupMode(GPIOC, PAL_PORT_BIT(4) | PAL_PORT_BIT(5), 0,
 80021b8:	4829      	ldr	r0, [pc, #164]	; (8002260 <main+0xa80>)
 80021ba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80022a8 <main+0xac8>
 80021be:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80022ac <main+0xacc>
 80021c2:	4f28      	ldr	r7, [pc, #160]	; (8002264 <main+0xa84>)
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 80021c4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80022b0 <main+0xad0>
 80021c8:	2130      	movs	r1, #48	; 0x30
 80021ca:	f240 3282 	movw	r2, #898	; 0x382
 80021ce:	f7fe fe5f 	bl	8000e90 <_pal_lld_setgroupmode>
 80021d2:	4a25      	ldr	r2, [pc, #148]	; (8002268 <main+0xa88>)
  shellInit();

  /*
   * Creates the threads.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <main+0xa8c>)
 80021d6:	6012      	str	r2, [r2, #0]
 80021d8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	4824      	ldr	r0, [pc, #144]	; (8002270 <main+0xa90>)
 80021e0:	f000 f9e6 	bl	80025b0 <chThdCreateStatic.constprop.69>
  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO, Thread2, NULL);
 80021e4:	4b23      	ldr	r3, [pc, #140]	; (8002274 <main+0xa94>)
 80021e6:	4824      	ldr	r0, [pc, #144]	; (8002278 <main+0xa98>)
 80021e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	f000 f9df 	bl	80025b0 <chThdCreateStatic.constprop.69>
  chThdCreateStatic(waThread3, sizeof(waThread3), NORMALPRIO, Thread3, NULL);
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <main+0xa9c>)
 80021f4:	4822      	ldr	r0, [pc, #136]	; (8002280 <main+0xaa0>)
 80021f6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	f000 f9d8 	bl	80025b0 <chThdCreateStatic.constprop.69>
  chThdCreateStatic(waThread4, sizeof(waThread4), NORMALPRIO, Thread4, NULL);
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <main+0xaa4>)
 8002202:	4821      	ldr	r0, [pc, #132]	; (8002288 <main+0xaa8>)
 8002204:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002208:	2240      	movs	r2, #64	; 0x40
 800220a:	f000 f9d1 	bl	80025b0 <chThdCreateStatic.constprop.69>
  chThdCreateStatic(waThread5, sizeof(waThread5), NORMALPRIO, Thread5, NULL);
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <main+0xaac>)
 8002210:	481f      	ldr	r0, [pc, #124]	; (8002290 <main+0xab0>)
 8002212:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	f000 f9ca 	bl	80025b0 <chThdCreateStatic.constprop.69>
  chThdCreateStatic(waThread6, sizeof(waThread6), NORMALPRIO, Thread6, NULL);
 800221c:	481d      	ldr	r0, [pc, #116]	; (8002294 <main+0xab4>)
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <main+0xab8>)
 8002220:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	f000 f9c3 	bl	80025b0 <chThdCreateStatic.constprop.69>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp)
 800222a:	b14e      	cbz	r6, 8002240 <main+0xa60>
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
 800222c:	7f33      	ldrb	r3, [r6, #28]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	f000 808e 	beq.w	8002350 <main+0xb70>
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
 8002234:	f242 7010 	movw	r0, #10000	; 0x2710
 8002238:	f7ff fa82 	bl	8001740 <chThdSleep>
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (true) {
    if (!shelltp)
 800223c:	2e00      	cmp	r6, #0
 800223e:	d1f5      	bne.n	800222c <main+0xa4c>
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
 8002240:	4816      	ldr	r0, [pc, #88]	; (800229c <main+0xabc>)
 8002242:	f7fe ff0d 	bl	8001060 <chMtxLock>
  if (heapp == NULL) {
    heapp = &default_heap;
  }

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;
 8002246:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <main+0xac0>)

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
 8002248:	f640 00c7 	movw	r0, #2247	; 0x8c7
 800224c:	e036      	b.n	80022bc <main+0xadc>
 800224e:	bf00      	nop
 8002250:	20000bb8 	.word	0x20000bb8
 8002254:	2000085c 	.word	0x2000085c
 8002258:	d1b71759 	.word	0xd1b71759
 800225c:	1b4e81b5 	.word	0x1b4e81b5
 8002260:	48000800 	.word	0x48000800
 8002264:	08000281 	.word	0x08000281
 8002268:	20000bb0 	.word	0x20000bb0
 800226c:	08002e31 	.word	0x08002e31
 8002270:	20000bb8 	.word	0x20000bb8
 8002274:	08002e71 	.word	0x08002e71
 8002278:	20000d00 	.word	0x20000d00
 800227c:	08002f01 	.word	0x08002f01
 8002280:	20000e48 	.word	0x20000e48
 8002284:	08002dd1 	.word	0x08002dd1
 8002288:	20000f90 	.word	0x20000f90
 800228c:	08002d01 	.word	0x08002d01
 8002290:	20000878 	.word	0x20000878
 8002294:	200009c0 	.word	0x200009c0
 8002298:	08002cb1 	.word	0x08002cb1
 800229c:	20000b18 	.word	0x20000b18
 80022a0:	20000b10 	.word	0x20000b10
 80022a4:	20000b28 	.word	0x20000b28
 80022a8:	08001181 	.word	0x08001181
 80022ac:	08003cd0 	.word	0x08003cd0
 80022b0:	20000b08 	.word	0x20000b08
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	4281      	cmp	r1, r0
 80022b8:	d859      	bhi.n	800236e <main+0xb8e>
 80022ba:	461a      	mov	r2, r3

  size = MEM_ALIGN_NEXT(size);
  qp = &heapp->h_free;

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
 80022bc:	6813      	ldr	r3, [r2, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f8      	bne.n	80022b4 <main+0xad4>
      return (void *)(hp + 1);
      /*lint -restore*/
    }
    qp = hp;
  }
  H_UNLOCK(heapp);
 80022c2:	489a      	ldr	r0, [pc, #616]	; (800252c <main+0xd4c>)
 80022c4:	f7fe fe4c 	bl	8000f60 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0b2      	beq.n	8002234 <main+0xa54>
    hp = heapp->h_provider(size + sizeof(union heap_header));
 80022ce:	f44f 600d 	mov.w	r0, #2256	; 0x8d0
 80022d2:	4798      	blx	r3
    if (hp != NULL) {
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d0ad      	beq.n	8002234 <main+0xa54>
      hp->h.u.heap = heapp;
      hp->h.size = size;
 80022d8:	f640 03c8 	movw	r3, #2248	; 0x8c8
  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->h_provider != NULL) {
    hp = heapp->h_provider(size + sizeof(union heap_header));
    if (hp != NULL) {
      hp->h.u.heap = heapp;
 80022dc:	f8c0 a000 	str.w	sl, [r0]
      hp->h.size = size;
 80022e0:	6043      	str	r3, [r0, #4]
      hp++;
 80022e2:	f100 0608 	add.w	r6, r0, #8
                              tprio_t prio, tfunc_t pf, void *arg) {
  void *wsp;
  thread_t *tp;

  wsp = chHeapAlloc(heapp, size);
  if (wsp == NULL) {
 80022e6:	2e00      	cmp	r6, #0
 80022e8:	d0a4      	beq.n	8002234 <main+0xa54>
 80022ea:	2320      	movs	r3, #32
 80022ec:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80022f0:	f8d4 e014 	ldr.w	lr, [r4, #20]
 80022f4:	f8c6 e014 	str.w	lr, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80022f8:	f606 03a4 	addw	r3, r6, #2212	; 0x8a4
 80022fc:	60f3      	str	r3, [r6, #12]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80022fe:	f04f 0b00 	mov.w	fp, #0
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002302:	2101      	movs	r1, #1
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8002304:	f106 0328 	add.w	r3, r6, #40	; 0x28
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002308:	f04f 0c02 	mov.w	ip, #2
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800230c:	f106 0224 	add.w	r2, r6, #36	; 0x24
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8002310:	2040      	movs	r0, #64	; 0x40
 8002312:	60b0      	str	r0, [r6, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002314:	6134      	str	r4, [r6, #16]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8002316:	63f0      	str	r0, [r6, #60]	; 0x3c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8002318:	f8c6 98a4 	str.w	r9, [r6, #2212]	; 0x8a4
 800231c:	f8c6 88a8 	str.w	r8, [r6, #2216]	; 0x8a8
 8002320:	f8c6 78c4 	str.w	r7, [r6, #2244]	; 0x8c4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8002324:	f886 c01c 	strb.w	ip, [r6, #28]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8002328:	f8c6 b038 	str.w	fp, [r6, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800232c:	f8c6 b034 	str.w	fp, [r6, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8002330:	f8c6 b018 	str.w	fp, [r6, #24]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002334:	77b1      	strb	r1, [r6, #30]
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
  chSchWakeupS(tp, MSG_OK);
 8002336:	4630      	mov	r0, r6
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002338:	f8ce 6010 	str.w	r6, [lr, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800233c:	6272      	str	r2, [r6, #36]	; 0x24
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  tp->p_flags = CH_FLAG_MODE_HEAP;
 800233e:	7771      	strb	r1, [r6, #29]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8002340:	62b3      	str	r3, [r6, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8002342:	62f3      	str	r3, [r6, #44]	; 0x2c
 8002344:	6166      	str	r6, [r4, #20]
  chSchWakeupS(tp, MSG_OK);
 8002346:	f000 f903 	bl	8002550 <chSchWakeupS.constprop.70>
 800234a:	f38b 8811 	msr	BASEPRI, fp
 800234e:	e771      	b.n	8002234 <main+0xa54>
 8002350:	2220      	movs	r2, #32
 8002352:	f382 8811 	msr	BASEPRI, r2
void chThdRelease(thread_t *tp) {
  trefs_t refs;

  chSysLock();
  chDbgAssert(tp->p_refs > (trefs_t)0, "not referenced");
  tp->p_refs--;
 8002356:	7fb3      	ldrb	r3, [r6, #30]
 8002358:	3b01      	subs	r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	77b3      	strb	r3, [r6, #30]
  refs = tp->p_refs;

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator. Of course static threads are not affected.*/
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
 800235e:	b913      	cbnz	r3, 8002366 <main+0xb86>
 8002360:	7f31      	ldrb	r1, [r6, #28]
 8002362:	290f      	cmp	r1, #15
 8002364:	d00f      	beq.n	8002386 <main+0xba6>
 8002366:	2600      	movs	r6, #0
 8002368:	f386 8811 	msr	BASEPRI, r6
 800236c:	e762      	b.n	8002234 <main+0xa54>

  H_LOCK(heapp);
  while (qp->h.u.next != NULL) {
    hp = qp->h.u.next;
    if (hp->h.size >= size) {
      if (hp->h.size < (size + sizeof(union heap_header))) {
 800236e:	f5b1 6f0d 	cmp.w	r1, #2256	; 0x8d0
 8002372:	d220      	bcs.n	80023b6 <main+0xbd6>
        /* Gets the whole block even if it is slightly bigger than the
           requested size because the fragment would be too small to be
           useful.*/
        qp->h.u.next = hp->h.u.next;
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	6011      	str	r1, [r2, #0]
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 8002378:	461e      	mov	r6, r3
      H_UNLOCK(heapp);
 800237a:	486c      	ldr	r0, [pc, #432]	; (800252c <main+0xd4c>)
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
        qp->h.u.next = fp;
        hp->h.size = size;
      }
      hp->h.u.heap = heapp;
 800237c:	f846 5b08 	str.w	r5, [r6], #8
      H_UNLOCK(heapp);
 8002380:	f7fe fdee 	bl	8000f60 <chMtxUnlock>
 8002384:	e7af      	b.n	80022e6 <main+0xb06>
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
 8002386:	7f71      	ldrb	r1, [r6, #29]
 8002388:	f001 0103 	and.w	r1, r1, #3
 800238c:	2901      	cmp	r1, #1
 800238e:	d020      	beq.n	80023d2 <main+0xbf2>
 8002390:	2902      	cmp	r1, #2
 8002392:	d1e8      	bne.n	8002366 <main+0xb86>
      return;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 8002394:	6971      	ldr	r1, [r6, #20]
 8002396:	6930      	ldr	r0, [r6, #16]
 8002398:	6108      	str	r0, [r1, #16]
 800239a:	6930      	ldr	r0, [r6, #16]
 800239c:	6141      	str	r1, [r0, #20]
 800239e:	f383 8811 	msr	BASEPRI, r3
#endif
      chSysUnlock();
      chPoolFree(tp->p_mpool, tp);
 80023a2:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80023a4:	f382 8811 	msr	BASEPRI, r2
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));

  php->ph_next = mp->mp_next;
 80023a8:	680a      	ldr	r2, [r1, #0]
 80023aa:	6032      	str	r2, [r6, #0]
  mp->mp_next = php;
 80023ac:	600e      	str	r6, [r1, #0]
 80023ae:	f383 8811 	msr	BASEPRI, r3
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    else if (chThdTerminatedX(shelltp)) {
      chThdRelease(shelltp);    /* Recovers memory of the previous shell.   */
      shelltp = NULL;           /* Triggers spawning of a new shell.        */
 80023b2:	461e      	mov	r6, r3
 80023b4:	e73e      	b.n	8002234 <main+0xa54>
      else {
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
 80023b6:	681e      	ldr	r6, [r3, #0]
 80023b8:	f8c3 68d0 	str.w	r6, [r3, #2256]	; 0x8d0
 80023bc:	f503 600d 	add.w	r0, r3, #2256	; 0x8d0
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80023c0:	f5a1 610d 	sub.w	r1, r1, #2256	; 0x8d0
        qp->h.u.next = fp;
        hp->h.size = size;
 80023c4:	f640 06c8 	movw	r6, #2248	; 0x8c8
        /* Block bigger enough, must split it.*/
        /*lint -save -e9087 [11.3] Safe cast.*/
        fp = (void *)((uint8_t *)(hp) + sizeof(union heap_header) + size);
        /*lint -restore*/
        fp->h.u.next = hp->h.u.next;
        fp->h.size = (hp->h.size - sizeof(union heap_header)) - size;
 80023c8:	f8c3 18d4 	str.w	r1, [r3, #2260]	; 0x8d4
        qp->h.u.next = fp;
 80023cc:	6010      	str	r0, [r2, #0]
        hp->h.size = size;
 80023ce:	605e      	str	r6, [r3, #4]
 80023d0:	e7d2      	b.n	8002378 <main+0xb98>
  if ((refs == (trefs_t)0) && (tp->p_state == CH_STATE_FINAL)) {
    switch (tp->p_flags & CH_FLAG_MODE_MASK) {
#if CH_CFG_USE_HEAP == TRUE
    case CH_FLAG_MODE_HEAP:
#if CH_CFG_USE_REGISTRY == TRUE
      REG_REMOVE(tp);
 80023d2:	6972      	ldr	r2, [r6, #20]
 80023d4:	6931      	ldr	r1, [r6, #16]
 80023d6:	6111      	str	r1, [r2, #16]
 80023d8:	6931      	ldr	r1, [r6, #16]
 80023da:	614a      	str	r2, [r1, #20]
 80023dc:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
 80023e0:	f856 3c08 	ldr.w	r3, [r6, #-8]
  qp = &heapp->h_free;

  H_LOCK(heapp);
 80023e4:	f103 0c10 	add.w	ip, r3, #16
 80023e8:	4660      	mov	r0, ip

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80023ea:	f103 0b08 	add.w	fp, r3, #8

  H_LOCK(heapp);
 80023ee:	f8cd c004 	str.w	ip, [sp, #4]
 80023f2:	f7fe fe35 	bl	8001060 <chMtxLock>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80023f6:	f8dd c004 	ldr.w	ip, [sp, #4]
  memory_heap_t *heapp;

  chDbgCheck(p != NULL);

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (union heap_header *)p - 1;
 80023fa:	f1a6 0108 	sub.w	r1, r6, #8
  /*lint -restore*/
  heapp = hp->h.u.heap;
  qp = &heapp->h_free;
 80023fe:	465b      	mov	r3, fp

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8002400:	459b      	cmp	fp, r3
 8002402:	d004      	beq.n	800240e <main+0xc2e>
 8002404:	4299      	cmp	r1, r3
 8002406:	d802      	bhi.n	800240e <main+0xc2e>
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	459b      	cmp	fp, r3
 800240c:	d1fa      	bne.n	8002404 <main+0xc24>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 800240e:	681a      	ldr	r2, [r3, #0]

  H_LOCK(heapp);
  while (true) {
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
 8002410:	b11a      	cbz	r2, 800241a <main+0xc3a>
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
 8002412:	4291      	cmp	r1, r2
 8002414:	d301      	bcc.n	800241a <main+0xc3a>
 8002416:	4613      	mov	r3, r2
 8002418:	e7f2      	b.n	8002400 <main+0xc20>
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 800241a:	f856 0c04 	ldr.w	r0, [r6, #-4]
    chDbgAssert((hp < qp) || (hp >= LIMIT(qp)), "within free block");

    if (((qp == &heapp->h_free) || (hp > qp)) &&
        ((qp->h.u.next == NULL) || (hp < qp->h.u.next))) {
      /* Insertion after qp.*/
      hp->h.u.next = qp->h.u.next;
 800241e:	f846 2c08 	str.w	r2, [r6, #-8]
      qp->h.u.next = hp;
 8002422:	6019      	str	r1, [r3, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
 8002424:	f100 0e08 	add.w	lr, r0, #8
 8002428:	f856 2c08 	ldr.w	r2, [r6, #-8]
 800242c:	eb01 0b0e 	add.w	fp, r1, lr
 8002430:	4593      	cmp	fp, r2
 8002432:	d00a      	beq.n	800244a <main+0xc6a>
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8002434:	6858      	ldr	r0, [r3, #4]
 8002436:	f100 0208 	add.w	r2, r0, #8
 800243a:	441a      	add	r2, r3
 800243c:	4291      	cmp	r1, r2
 800243e:	d015      	beq.n	800246c <main+0xc8c>
      }
      break;
    }
    qp = qp->h.u.next;
  }
  H_UNLOCK(heapp);
 8002440:	4660      	mov	r0, ip
 8002442:	f7fe fd8d 	bl	8000f60 <chMtxUnlock>
 8002446:	2600      	movs	r6, #0
 8002448:	e6f4      	b.n	8002234 <main+0xa54>
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 800244a:	f8db b004 	ldr.w	fp, [fp, #4]
        hp->h.u.next = hp->h.u.next->h.u.next;
 800244e:	f851 200e 	ldr.w	r2, [r1, lr]
 8002452:	f846 2c08 	str.w	r2, [r6, #-8]
      hp->h.u.next = qp->h.u.next;
      qp->h.u.next = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (LIMIT(hp) == hp->h.u.next) {
        /* Merge with the next block.*/
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
 8002456:	eb0b 0200 	add.w	r2, fp, r0
 800245a:	3208      	adds	r2, #8
 800245c:	f846 2c04 	str.w	r2, [r6, #-4]
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
 8002460:	6858      	ldr	r0, [r3, #4]
 8002462:	f100 0208 	add.w	r2, r0, #8
 8002466:	441a      	add	r2, r3
 8002468:	4291      	cmp	r1, r2
 800246a:	d1e9      	bne.n	8002440 <main+0xc60>
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
        qp->h.u.next = hp->h.u.next;
 800246c:	e916 0006 	ldmdb	r6, {r1, r2}
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8002470:	4402      	add	r2, r0
 8002472:	3208      	adds	r2, #8
        qp->h.u.next = hp->h.u.next;
 8002474:	6019      	str	r1, [r3, #0]
        hp->h.size += hp->h.u.next->h.size + sizeof(union heap_header);
        hp->h.u.next = hp->h.u.next->h.u.next;
      }
      if ((LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        qp->h.size += hp->h.size + sizeof(union heap_header);
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	e7e2      	b.n	8002440 <main+0xc60>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(FALSE);
 800247a:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <main+0xd50>)
 800247c:	6993      	ldr	r3, [r2, #24]
 800247e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	e67d      	b.n	8002182 <main+0x9a2>
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8002486:	4611      	mov	r1, r2
 8002488:	e5fa      	b.n	8002080 <main+0x8a0>
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 800248a:	492a      	ldr	r1, [pc, #168]	; (8002534 <main+0xd54>)
 800248c:	6a30      	ldr	r0, [r6, #32]
 800248e:	f000 f8d7 	bl	8002640 <dmaStreamAllocate.constprop.44>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8002492:	4929      	ldr	r1, [pc, #164]	; (8002538 <main+0xd58>)
 8002494:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8002496:	f000 f8d3 	bl	8002640 <dmaStreamAllocate.constprop.44>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 800249a:	f8df e094 	ldr.w	lr, [pc, #148]	; 8002530 <main+0xd50>
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 800249e:	6a72      	ldr	r2, [r6, #36]	; 0x24
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80024a0:	6a31      	ldr	r1, [r6, #32]
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 80024a2:	f8de 001c 	ldr.w	r0, [lr, #28]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80024a6:	69f3      	ldr	r3, [r6, #28]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80024a8:	f8d2 c004 	ldr.w	ip, [r2, #4]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80024ac:	6849      	ldr	r1, [r1, #4]
 80024ae:	6872      	ldr	r2, [r6, #4]
 80024b0:	330c      	adds	r3, #12
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(FALSE);
 80024b2:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80024b6:	f8ce 001c 	str.w	r0, [lr, #28]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 80024ba:	608b      	str	r3, [r1, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80024bc:	f8cc 3008 	str.w	r3, [ip, #8]
 80024c0:	e534      	b.n	8001f2c <main+0x74c>
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <main+0xd5c>)
 80024c4:	459e      	cmp	lr, r3
 80024c6:	d122      	bne.n	800250e <main+0xd2e>
      rccEnableTIM1(FALSE);
 80024c8:	4919      	ldr	r1, [pc, #100]	; (8002530 <main+0xd50>)
 80024ca:	4e1c      	ldr	r6, [pc, #112]	; (800253c <main+0xd5c>)
 80024cc:	6988      	ldr	r0, [r1, #24]
#if !defined(STM32_TIM1_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM1_UP_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
      nvicEnableVector(STM32_TIM1_CC_NUMBER, STM32_PWM_TIM1_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM1CLK)
      pwmp->clock = STM32_TIM1CLK;
 80024ce:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002548 <main+0xd68>
 80024d2:	f8c6 9014 	str.w	r9, [r6, #20]

  if (pwmp->state == PWM_STOP) {
    /* Clock activation and timer reset.*/
#if STM32_PWM_USE_TIM1
    if (&PWMD1 == pwmp) {
      rccEnableTIM1(FALSE);
 80024d6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80024da:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80024de:	6188      	str	r0, [r1, #24]
      rccResetTIM1();
 80024e0:	68c8      	ldr	r0, [r1, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <main+0xd60>)
 80024e4:	f04f 0970 	mov.w	r9, #112	; 0x70
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024e8:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
 80024ec:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80024f0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80024f4:	60c8      	str	r0, [r1, #12]
 80024f6:	60ca      	str	r2, [r1, #12]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80024f8:	f883 9319 	strb.w	r9, [r3, #793]	; 0x319
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80024fc:	f8c3 a180 	str.w	sl, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002500:	f8c3 a000 	str.w	sl, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002504:	f883 931b 	strb.w	r9, [r3, #795]	; 0x31b
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002508:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800250c:	601e      	str	r6, [r3, #0]
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 800250e:	f8de 3018 	ldr.w	r3, [lr, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
                       STM32_TIM_CCMR2_OC4M(6) | STM32_TIM_CCMR2_OC4PE;
#if STM32_TIM_MAX_CHANNELS > 4
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
 8002512:	490c      	ldr	r1, [pc, #48]	; (8002544 <main+0xd64>)
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8002514:	f646 0268 	movw	r2, #26728	; 0x6868
 8002518:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 800251a:	61da      	str	r2, [r3, #28]
                       STM32_TIM_CCMR2_OC4M(6) | STM32_TIM_CCMR2_OC4PE;
#if STM32_TIM_MAX_CHANNELS > 4
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
 800251c:	6559      	str	r1, [r3, #84]	; 0x54
 800251e:	e593      	b.n	8002048 <main+0x868>
static void MFRC522AntennaOn(MFRC522Driver* mfrc522p) {
    uint8_t temp;

    temp = MFRC522ReadRegister(mfrc522p, MifareREG_TX_CONTROL);
    if (!(temp & 0x03)) {
        MFRC522SetBitMask(mfrc522p, MifareREG_TX_CONTROL, 0x03);
 8002520:	2014      	movs	r0, #20
 8002522:	2103      	movs	r1, #3
 8002524:	f000 fb14 	bl	8002b50 <MFRC522SetBitMask.constprop.18>
 8002528:	e55c      	b.n	8001fe4 <main+0x804>
 800252a:	bf00      	nop
 800252c:	20000b18 	.word	0x20000b18
 8002530:	40021000 	.word	0x40021000
 8002534:	080009f1 	.word	0x080009f1
 8002538:	08000591 	.word	0x08000591
 800253c:	20001288 	.word	0x20001288
 8002540:	e000e100 	.word	0xe000e100
 8002544:	01016868 	.word	0x01016868
 8002548:	044aa200 	.word	0x044aa200
 800254c:	00000000 	.word	0x00000000

08002550 <chSchWakeupS.constprop.70>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <chSchWakeupS.constprop.70+0x54>)
 8002552:	6881      	ldr	r1, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002554:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002556:	699d      	ldr	r5, [r3, #24]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002558:	4604      	mov	r4, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800255a:	68a8      	ldr	r0, [r5, #8]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 800255c:	2200      	movs	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800255e:	4281      	cmp	r1, r0
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8002560:	6222      	str	r2, [r4, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8002562:	d80b      	bhi.n	800257c <chSchWakeupS.constprop.70+0x2c>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8002564:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 8002566:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	4291      	cmp	r1, r2
 800256c:	d9fb      	bls.n	8002566 <chSchWakeupS.constprop.70+0x16>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8002572:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8002574:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8002576:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 8002578:	bc70      	pop	{r4, r5, r6}
 800257a:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800257c:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800257e:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8002580:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8002582:	6891      	ldr	r1, [r2, #8]
 8002584:	4288      	cmp	r0, r1
 8002586:	d9fb      	bls.n	8002580 <chSchWakeupS.constprop.70+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8002588:	6850      	ldr	r0, [r2, #4]
 800258a:	6068      	str	r0, [r5, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800258c:	2601      	movs	r6, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800258e:	602a      	str	r2, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8002590:	6005      	str	r5, [r0, #0]
  cp->p_prev = tp;
 8002592:	6055      	str	r5, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8002594:	7726      	strb	r6, [r4, #28]
    chSysSwitch(ntp, otp);
 8002596:	4629      	mov	r1, r5
 8002598:	4620      	mov	r0, r4
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800259a:	619c      	str	r4, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800259c:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 800259e:	f7fd be67 	b.w	8000270 <_port_switch>
 80025a2:	bf00      	nop
 80025a4:	20001138 	.word	0x20001138
	...

080025b0 <chThdCreateStatic.constprop.69>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
 80025b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b4:	469a      	mov	sl, r3
 80025b6:	4696      	mov	lr, r2
 80025b8:	4604      	mov	r4, r0
 80025ba:	2320      	movs	r3, #32
 80025bc:	f383 8811 	msr	BASEPRI, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025c0:	4e17      	ldr	r6, [pc, #92]	; (8002620 <chThdCreateStatic.constprop.69+0x70>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80025c2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002624 <chThdCreateStatic.constprop.69+0x74>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025c6:	6972      	ldr	r2, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80025c8:	3924      	subs	r1, #36	; 0x24
 80025ca:	1847      	adds	r7, r0, r1
 80025cc:	2500      	movs	r5, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80025ce:	f100 0328 	add.w	r3, r0, #40	; 0x28
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 80025d2:	f100 0c24 	add.w	ip, r0, #36	; 0x24
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80025d6:	f04f 0b02 	mov.w	fp, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80025da:	f04f 0801 	mov.w	r8, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80025de:	60c7      	str	r7, [r0, #12]
 80025e0:	f840 a001 	str.w	sl, [r0, r1]
 80025e4:	607d      	str	r5, [r7, #4]
 80025e6:	f8c7 9020 	str.w	r9, [r7, #32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80025ea:	f8c0 e008 	str.w	lr, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80025ee:	6106      	str	r6, [r0, #16]
 80025f0:	6142      	str	r2, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80025f2:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80025f4:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
  tp->p_mtxlist = NULL;
 80025f8:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80025fa:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80025fc:	6185      	str	r5, [r0, #24]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80025fe:	f880 b01c 	strb.w	fp, [r0, #28]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8002602:	f880 801e 	strb.w	r8, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8002606:	6110      	str	r0, [r2, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8002608:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800260c:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800260e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002610:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8002612:	f7ff ff9d 	bl	8002550 <chSchWakeupS.constprop.70>
 8002616:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800261a:	4620      	mov	r0, r4
 800261c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002620:	20001138 	.word	0x20001138
 8002624:	08000281 	.word	0x08000281
	...

08002630 <chTMStartMeasurementX.constprop.67>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8002630:	4b01      	ldr	r3, [pc, #4]	; (8002638 <chTMStartMeasurementX.constprop.67+0x8>)
 8002632:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8002634:	6083      	str	r3, [r0, #8]
 8002636:	4770      	bx	lr
 8002638:	e0001000 	.word	0xe0001000
 800263c:	00000000 	.word	0x00000000

08002640 <dmaStreamAllocate.constprop.44>:
 * @retval false        no error, stream taken.
 * @retval true         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 8002642:	4d28      	ldr	r5, [pc, #160]	; (80026e4 <dmaStreamAllocate.constprop.44+0xa4>)
 8002644:	7c44      	ldrb	r4, [r0, #17]
 8002646:	682b      	ldr	r3, [r5, #0]
 8002648:	2201      	movs	r2, #1
 800264a:	fa02 f604 	lsl.w	r6, r2, r4
 800264e:	421e      	tst	r6, r3
 8002650:	d145      	bne.n	80026de <dmaStreamAllocate.constprop.44+0x9e>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002652:	4a25      	ldr	r2, [pc, #148]	; (80026e8 <dmaStreamAllocate.constprop.44+0xa8>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002654:	4e25      	ldr	r6, [pc, #148]	; (80026ec <dmaStreamAllocate.constprop.44+0xac>)
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8002656:	f842 1034 	str.w	r1, [r2, r4, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 800265a:	eb02 04c4 	add.w	r4, r2, r4, lsl #3

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 800265e:	065a      	lsls	r2, r3, #25
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8002660:	6066      	str	r6, [r4, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8002662:	d104      	bne.n	800266e <dmaStreamAllocate.constprop.44+0x2e>
    rccEnableDMA1(false);
 8002664:	4c22      	ldr	r4, [pc, #136]	; (80026f0 <dmaStreamAllocate.constprop.44+0xb0>)
 8002666:	6962      	ldr	r2, [r4, #20]
 8002668:	f042 0201 	orr.w	r2, r2, #1
 800266c:	6162      	str	r2, [r4, #20]
  }
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 800266e:	f413 6f78 	tst.w	r3, #3968	; 0xf80
 8002672:	d104      	bne.n	800267e <dmaStreamAllocate.constprop.44+0x3e>
    rccEnableDMA2(false);
 8002674:	4c1e      	ldr	r4, [pc, #120]	; (80026f0 <dmaStreamAllocate.constprop.44+0xb0>)
 8002676:	6962      	ldr	r2, [r4, #20]
 8002678:	f042 0202 	orr.w	r2, r2, #2
 800267c:	6162      	str	r2, [r4, #20]
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800267e:	6842      	ldr	r2, [r0, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8002680:	6886      	ldr	r6, [r0, #8]
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8002682:	6814      	ldr	r4, [r2, #0]
 8002684:	f8d0 e000 	ldr.w	lr, [r0]
 8002688:	f024 040f 	bic.w	r4, r4, #15
 800268c:	6014      	str	r4, [r2, #0]
 800268e:	7c07      	ldrb	r7, [r0, #16]
 8002690:	240f      	movs	r4, #15
 8002692:	40bc      	lsls	r4, r7
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 8002694:	4233      	tst	r3, r6
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8002696:	f04f 0700 	mov.w	r7, #0
    rccEnableDMA2(false);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800269a:	f8ce 4004 	str.w	r4, [lr, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800269e:	6017      	str	r7, [r2, #0]

  /* Enables the associated IRQ vector if not alread enabled and if a
     callback is defined.*/
  if (((dma_streams_mask & dmastp->cmask) == 0U) &&
 80026a0:	d116      	bne.n	80026d0 <dmaStreamAllocate.constprop.44+0x90>
 80026a2:	b1a9      	cbz	r1, 80026d0 <dmaStreamAllocate.constprop.44+0x90>
      (func != NULL)) {
    nvicEnableVector(dmastp->vector, priority);
 80026a4:	7c81      	ldrb	r1, [r0, #18]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026a6:	094a      	lsrs	r2, r1, #5
 80026a8:	0092      	lsls	r2, r2, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026aa:	f101 4660 	add.w	r6, r1, #3758096384	; 0xe0000000
 80026ae:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80026b2:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80026b6:	f506 4661 	add.w	r6, r6, #57600	; 0xe100
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026ba:	f001 011f 	and.w	r1, r1, #31
 80026be:	2401      	movs	r4, #1
 80026c0:	fa04 f101 	lsl.w	r1, r4, r1

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80026c4:	27a0      	movs	r7, #160	; 0xa0
 80026c6:	f886 7300 	strb.w	r7, [r6, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80026ca:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80026ce:	6011      	str	r1, [r2, #0]
  }

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);
 80026d0:	7c41      	ldrb	r1, [r0, #17]
 80026d2:	2201      	movs	r2, #1
 80026d4:	408a      	lsls	r2, r1
 80026d6:	4313      	orrs	r3, r2
 80026d8:	602b      	str	r3, [r5, #0]

  return false;
 80026da:	2000      	movs	r0, #0
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;
 80026de:	4610      	mov	r0, r2

  /* Marks the stream as allocated.*/
  dma_streams_mask |= (1U << dmastp->selfindex);

  return false;
}
 80026e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	200012e8 	.word	0x200012e8
 80026e8:	200010d8 	.word	0x200010d8
 80026ec:	200012a4 	.word	0x200012a4
 80026f0:	40021000 	.word	0x40021000
	...

08002700 <pwm_lld_serve_interrupt.constprop.33>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8002700:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8002702:	4d17      	ldr	r5, [pc, #92]	; (8002760 <pwm_lld_serve_interrupt.constprop.33+0x60>)
 8002704:	69ab      	ldr	r3, [r5, #24]
 8002706:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8002708:	68dc      	ldr	r4, [r3, #12]
 800270a:	4014      	ands	r4, r2
 800270c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 800270e:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8002710:	07a6      	lsls	r6, r4, #30
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 8002712:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8002714:	d504      	bpl.n	8002720 <pwm_lld_serve_interrupt.constprop.33+0x20>
      (pwmp->config->channels[0].callback != NULL))
 8002716:	686b      	ldr	r3, [r5, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 800271a:	b10b      	cbz	r3, 8002720 <pwm_lld_serve_interrupt.constprop.33+0x20>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 800271c:	4628      	mov	r0, r5
 800271e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8002720:	0760      	lsls	r0, r4, #29
 8002722:	d504      	bpl.n	800272e <pwm_lld_serve_interrupt.constprop.33+0x2e>
      (pwmp->config->channels[1].callback != NULL))
 8002724:	686b      	ldr	r3, [r5, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8002728:	b10b      	cbz	r3, 800272e <pwm_lld_serve_interrupt.constprop.33+0x2e>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 800272a:	480d      	ldr	r0, [pc, #52]	; (8002760 <pwm_lld_serve_interrupt.constprop.33+0x60>)
 800272c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 800272e:	0721      	lsls	r1, r4, #28
 8002730:	d504      	bpl.n	800273c <pwm_lld_serve_interrupt.constprop.33+0x3c>
      (pwmp->config->channels[2].callback != NULL))
 8002732:	686b      	ldr	r3, [r5, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8002736:	b10b      	cbz	r3, 800273c <pwm_lld_serve_interrupt.constprop.33+0x3c>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <pwm_lld_serve_interrupt.constprop.33+0x60>)
 800273a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 800273c:	06e2      	lsls	r2, r4, #27
 800273e:	d504      	bpl.n	800274a <pwm_lld_serve_interrupt.constprop.33+0x4a>
      (pwmp->config->channels[3].callback != NULL))
 8002740:	686b      	ldr	r3, [r5, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8002744:	b10b      	cbz	r3, 800274a <pwm_lld_serve_interrupt.constprop.33+0x4a>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8002746:	4806      	ldr	r0, [pc, #24]	; (8002760 <pwm_lld_serve_interrupt.constprop.33+0x60>)
 8002748:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 800274a:	07e3      	lsls	r3, r4, #31
 800274c:	d506      	bpl.n	800275c <pwm_lld_serve_interrupt.constprop.33+0x5c>
 800274e:	686b      	ldr	r3, [r5, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	b11b      	cbz	r3, 800275c <pwm_lld_serve_interrupt.constprop.33+0x5c>
    pwmp->config->callback(pwmp);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <pwm_lld_serve_interrupt.constprop.33+0x60>)
}
 8002756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 800275a:	4718      	bx	r3
 800275c:	bd70      	pop	{r4, r5, r6, pc}
 800275e:	bf00      	nop
 8002760:	20001288 	.word	0x20001288
	...

08002770 <_strtok.constprop.30>:
/**
 * @brief   Shell termination event source.
 */
event_source_t shell_terminated;

static char *_strtok(char *str, const char *delim, char **saveptr) {
 8002770:	b538      	push	{r3, r4, r5, lr}
 8002772:	460d      	mov	r5, r1
  char *token;
  if (str)
 8002774:	4604      	mov	r4, r0
 8002776:	b190      	cbz	r0, 800279e <_strtok.constprop.30+0x2e>
    *saveptr = str;
 8002778:	6028      	str	r0, [r5, #0]
  token = *saveptr;

  if (!token)
    return NULL;

  token += strspn(token, delim);
 800277a:	4620      	mov	r0, r4
 800277c:	490b      	ldr	r1, [pc, #44]	; (80027ac <_strtok.constprop.30+0x3c>)
 800277e:	f001 f817 	bl	80037b0 <strspn>
 8002782:	4404      	add	r4, r0
  *saveptr = strpbrk(token, delim);
 8002784:	4620      	mov	r0, r4
 8002786:	4909      	ldr	r1, [pc, #36]	; (80027ac <_strtok.constprop.30+0x3c>)
 8002788:	f000 ffea 	bl	8003760 <strpbrk>
  if (*saveptr)
 800278c:	b160      	cbz	r0, 80027a8 <_strtok.constprop.30+0x38>
    *(*saveptr)++ = '\0';
 800278e:	1c42      	adds	r2, r0, #1
 8002790:	2300      	movs	r3, #0
 8002792:	602a      	str	r2, [r5, #0]
 8002794:	7003      	strb	r3, [r0, #0]

  return *token ? token : NULL;
 8002796:	7823      	ldrb	r3, [r4, #0]
 8002798:	b123      	cbz	r3, 80027a4 <_strtok.constprop.30+0x34>
 800279a:	4620      	mov	r0, r4
}
 800279c:	bd38      	pop	{r3, r4, r5, pc}

static char *_strtok(char *str, const char *delim, char **saveptr) {
  char *token;
  if (str)
    *saveptr = str;
  token = *saveptr;
 800279e:	680c      	ldr	r4, [r1, #0]

  if (!token)
 80027a0:	2c00      	cmp	r4, #0
 80027a2:	d1ea      	bne.n	800277a <_strtok.constprop.30+0xa>
    return NULL;
 80027a4:	2000      	movs	r0, #0
 80027a6:	bd38      	pop	{r3, r4, r5, pc}

  token += strspn(token, delim);
  *saveptr = strpbrk(token, delim);
 80027a8:	6028      	str	r0, [r5, #0]
 80027aa:	e7f4      	b.n	8002796 <_strtok.constprop.30+0x26>
 80027ac:	08003ce0 	.word	0x08003ce0

080027b0 <long_to_string_with_divisor.constprop.29>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 80027b0:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 80027b2:	f100 070b 	add.w	r7, r0, #11
 80027b6:	463c      	mov	r4, r7
 80027b8:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 80027ba:	fbb1 f6f2 	udiv	r6, r1, r2
 80027be:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 80027c2:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 80027c6:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 80027c8:	bfc8      	it	gt
 80027ca:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 80027d4:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 80027d8:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 80027da:	2d00      	cmp	r5, #0
 80027dc:	d1ed      	bne.n	80027ba <long_to_string_with_divisor.constprop.29+0xa>

  i = (int)(p + MAX_FILLER - q);
 80027de:	1b3a      	subs	r2, r7, r4
 80027e0:	4402      	add	r2, r0
 80027e2:	e001      	b.n	80027e8 <long_to_string_with_divisor.constprop.29+0x38>
 80027e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 80027e8:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 80027ec:	4290      	cmp	r0, r2
 80027ee:	d1f9      	bne.n	80027e4 <long_to_string_with_divisor.constprop.29+0x34>

  return p;
}
 80027f0:	bcf0      	pop	{r4, r5, r6, r7}
 80027f2:	4770      	bx	lr
	...

08002800 <hd44780WriteRegister.constprop.25>:
 * @param[in] reg           Register id
 * @param[in] value         Writing value
 *
 * @notapi
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value){
 8002800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002804:	4d5c      	ldr	r5, [pc, #368]	; (8002978 <hd44780WriteRegister.constprop.25+0x178>)
  bool busy;
  unsigned ii;

  /* Configuring Data PINs as Input. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_INPUT);
 8002806:	2601      	movs	r6, #1
 * @param[in] reg           Register id
 * @param[in] value         Writing value
 *
 * @notapi
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value){
 8002808:	4681      	mov	r9, r0
 800280a:	468a      	mov	sl, r1
  bool busy;
  unsigned ii;

  /* Configuring Data PINs as Input. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_INPUT);
 800280c:	46a8      	mov	r8, r5
 800280e:	4637      	mov	r7, r6
static bool hd44780IsBusy(LCDDriver *lcdp) {
  bool busy;
  unsigned ii;

  /* Configuring Data PINs as Input. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
 8002810:	2400      	movs	r4, #0
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_INPUT);
 8002812:	68ab      	ldr	r3, [r5, #8]
 8002814:	1d22      	adds	r2, r4, #4
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800281c:	f000 030f 	and.w	r3, r0, #15
static bool hd44780IsBusy(LCDDriver *lcdp) {
  bool busy;
  unsigned ii;

  /* Configuring Data PINs as Input. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
 8002820:	3401      	adds	r4, #1
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_INPUT);
 8002822:	fa06 f103 	lsl.w	r1, r6, r3
 8002826:	f020 000f 	bic.w	r0, r0, #15
 800282a:	2200      	movs	r2, #0
 800282c:	f7fe fb30 	bl	8000e90 <_pal_lld_setgroupmode>
static bool hd44780IsBusy(LCDDriver *lcdp) {
  bool busy;
  unsigned ii;

  /* Configuring Data PINs as Input. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
 8002830:	2c08      	cmp	r4, #8
 8002832:	d1ee      	bne.n	8002812 <hd44780WriteRegister.constprop.25+0x12>
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_INPUT);

  palSetLine(lcdp->config->pinmap->RW);
 8002834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	6853      	ldr	r3, [r2, #4]
 800283c:	f003 010f 	and.w	r1, r3, #15
 8002840:	fa07 f101 	lsl.w	r1, r7, r1
 8002844:	f023 030f 	bic.w	r3, r3, #15
 8002848:	b289      	uxth	r1, r1
 800284a:	8319      	strh	r1, [r3, #24]
  palClearLine(lcdp->config->pinmap->RS);
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	f003 010f 	and.w	r1, r3, #15
 8002852:	fa07 f101 	lsl.w	r1, r7, r1
 8002856:	f023 030f 	bic.w	r3, r3, #15
 800285a:	b289      	uxth	r1, r1
 800285c:	8359      	strh	r1, [r3, #26]

  palSetLine(lcdp->config->pinmap->E);
 800285e:	6893      	ldr	r3, [r2, #8]
 8002860:	f003 020f 	and.w	r2, r3, #15
 8002864:	fa07 f202 	lsl.w	r2, r7, r2
 8002868:	f023 030f 	bic.w	r3, r3, #15
 800286c:	b292      	uxth	r2, r2
 800286e:	831a      	strh	r2, [r3, #24]
 8002870:	200a      	movs	r0, #10
 8002872:	f7fe ff65 	bl	8001740 <chThdSleep>
  osalThreadSleepMilliseconds(1);
  busy = (palReadLine(lcdp->config->pinmap->D[LINE_DATA_LEN - 1]) == PAL_HIGH);
 8002876:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	f8d2 b02c 	ldr.w	fp, [r2, #44]	; 0x2c
  palClearLine(lcdp->config->pinmap->E);
 8002880:	6893      	ldr	r3, [r2, #8]
  palSetLine(lcdp->config->pinmap->RW);
  palClearLine(lcdp->config->pinmap->RS);

  palSetLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
  busy = (palReadLine(lcdp->config->pinmap->D[LINE_DATA_LEN - 1]) == PAL_HIGH);
 8002882:	f02b 010f 	bic.w	r1, fp, #15
  palClearLine(lcdp->config->pinmap->E);
 8002886:	f003 020f 	and.w	r2, r3, #15
 800288a:	fa07 f202 	lsl.w	r2, r7, r2
 800288e:	f023 030f 	bic.w	r3, r3, #15
  palSetLine(lcdp->config->pinmap->RW);
  palClearLine(lcdp->config->pinmap->RS);

  palSetLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
  busy = (palReadLine(lcdp->config->pinmap->D[LINE_DATA_LEN - 1]) == PAL_HIGH);
 8002892:	690c      	ldr	r4, [r1, #16]
  palClearLine(lcdp->config->pinmap->E);
 8002894:	b292      	uxth	r2, r2
 8002896:	835a      	strh	r2, [r3, #26]
 8002898:	200a      	movs	r0, #10
  palSetLine(lcdp->config->pinmap->RW);
  palClearLine(lcdp->config->pinmap->RS);

  palSetLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
  busy = (palReadLine(lcdp->config->pinmap->D[LINE_DATA_LEN - 1]) == PAL_HIGH);
 800289a:	f00b 0b0f 	and.w	fp, fp, #15
 800289e:	f7fe ff4f 	bl	8001740 <chThdSleep>
 80028a2:	fa24 f30b 	lsr.w	r3, r4, fp
 */
static void hd44780WriteRegister(LCDDriver *lcdp, uint8_t reg, uint8_t value){

  unsigned ii;

  while (hd44780IsBusy(lcdp))
 80028a6:	f013 0301 	ands.w	r3, r3, #1
 80028aa:	d1b1      	bne.n	8002810 <hd44780WriteRegister.constprop.25+0x10>
 80028ac:	461c      	mov	r4, r3
    ;

  /* Configuring Data PINs as Output Push Pull. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
 80028ae:	2701      	movs	r7, #1
 80028b0:	68ab      	ldr	r3, [r5, #8]
 80028b2:	4e31      	ldr	r6, [pc, #196]	; (8002978 <hd44780WriteRegister.constprop.25+0x178>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	1d21      	adds	r1, r4, #4
 80028b8:	2219      	movs	r2, #25
 80028ba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80028be:	f000 030f 	and.w	r3, r0, #15

  while (hd44780IsBusy(lcdp))
    ;

  /* Configuring Data PINs as Output Push Pull. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
 80028c2:	3401      	adds	r4, #1
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
 80028c4:	f020 000f 	bic.w	r0, r0, #15
 80028c8:	fa07 f103 	lsl.w	r1, r7, r3
 80028cc:	f7fe fae0 	bl	8000e90 <_pal_lld_setgroupmode>

  while (hd44780IsBusy(lcdp))
    ;

  /* Configuring Data PINs as Output Push Pull. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
 80028d0:	2c08      	cmp	r4, #8
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
 80028d2:	f04f 0001 	mov.w	r0, #1

  while (hd44780IsBusy(lcdp))
    ;

  /* Configuring Data PINs as Output Push Pull. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
 80028d6:	d1eb      	bne.n	80028b0 <hd44780WriteRegister.constprop.25+0xb0>
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
                   PAL_STM32_OSPEED_HIGHEST);

  palClearLine(lcdp->config->pinmap->RW);
 80028d8:	68b3      	ldr	r3, [r6, #8]
 80028da:	685e      	ldr	r6, [r3, #4]
 80028dc:	6873      	ldr	r3, [r6, #4]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	fa00 f102 	lsl.w	r1, r0, r2
 80028e6:	f023 030f 	bic.w	r3, r3, #15
 80028ea:	b289      	uxth	r1, r1
  palWriteLine(lcdp->config->pinmap->RS, reg);
 80028ec:	4632      	mov	r2, r6
  /* Configuring Data PINs as Output Push Pull. */
  for(ii = 0; ii < LINE_DATA_LEN; ii++)
    palSetLineMode(lcdp->config->pinmap->D[ii], PAL_MODE_OUTPUT_PUSHPULL |
                   PAL_STM32_OSPEED_HIGHEST);

  palClearLine(lcdp->config->pinmap->RW);
 80028ee:	8359      	strh	r1, [r3, #26]
  palWriteLine(lcdp->config->pinmap->RS, reg);
 80028f0:	f852 1b10 	ldr.w	r1, [r2], #16
 80028f4:	ea09 0900 	and.w	r9, r9, r0
 80028f8:	f001 040f 	and.w	r4, r1, #15
 80028fc:	ea89 0300 	eor.w	r3, r9, r0
 8002900:	f104 0710 	add.w	r7, r4, #16
 8002904:	f021 010f 	bic.w	r1, r1, #15
 8002908:	fa09 f904 	lsl.w	r9, r9, r4
 800290c:	40bb      	lsls	r3, r7
 800290e:	ea43 0309 	orr.w	r3, r3, r9
 8002912:	618b      	str	r3, [r1, #24]
  palSetLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
  palClearLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
#else
  for(ii = 0; ii < LINE_DATA_LEN; ii++){
 8002914:	2300      	movs	r3, #0
      if(value & (1 << ii))
 8002916:	fa4a f103 	asr.w	r1, sl, r3
 800291a:	f011 0f01 	tst.w	r1, #1
        palSetLine(lcdp->config->pinmap->D[ii]);
 800291e:	6811      	ldr	r1, [r2, #0]
 8002920:	f001 040f 	and.w	r4, r1, #15
 8002924:	fa00 f404 	lsl.w	r4, r0, r4
 8002928:	f021 010f 	bic.w	r1, r1, #15
 800292c:	b2a4      	uxth	r4, r4
  palSetLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
  palClearLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
#else
  for(ii = 0; ii < LINE_DATA_LEN; ii++){
 800292e:	f103 0301 	add.w	r3, r3, #1
      if(value & (1 << ii))
        palSetLine(lcdp->config->pinmap->D[ii]);
 8002932:	bf14      	ite	ne
 8002934:	830c      	strhne	r4, [r1, #24]
      else
        palClearLine(lcdp->config->pinmap->D[ii]);
 8002936:	834c      	strheq	r4, [r1, #26]
  palSetLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
  palClearLine(lcdp->config->pinmap->E);
  osalThreadSleepMilliseconds(1);
#else
  for(ii = 0; ii < LINE_DATA_LEN; ii++){
 8002938:	2b08      	cmp	r3, #8
 800293a:	f102 0204 	add.w	r2, r2, #4
 800293e:	d1ea      	bne.n	8002916 <hd44780WriteRegister.constprop.25+0x116>
      if(value & (1 << ii))
        palSetLine(lcdp->config->pinmap->D[ii]);
      else
        palClearLine(lcdp->config->pinmap->D[ii]);
  }
  palSetLine(lcdp->config->pinmap->E);
 8002940:	68b3      	ldr	r3, [r6, #8]
 8002942:	2401      	movs	r4, #1
 8002944:	f003 020f 	and.w	r2, r3, #15
 8002948:	fa04 f202 	lsl.w	r2, r4, r2
 800294c:	f023 030f 	bic.w	r3, r3, #15
 8002950:	b292      	uxth	r2, r2
 8002952:	831a      	strh	r2, [r3, #24]
 8002954:	200a      	movs	r0, #10
 8002956:	f7fe fef3 	bl	8001740 <chThdSleep>
  osalThreadSleepMilliseconds(1);
  palClearLine(lcdp->config->pinmap->E);
 800295a:	68ab      	ldr	r3, [r5, #8]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 020f 	and.w	r2, r3, #15
 8002964:	4094      	lsls	r4, r2
 8002966:	f023 020f 	bic.w	r2, r3, #15
 800296a:	b2a3      	uxth	r3, r4
 800296c:	8353      	strh	r3, [r2, #26]
 800296e:	200a      	movs	r0, #10
  osalThreadSleepMilliseconds(1);
#endif
}
 8002970:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002974:	f7fe bee4 	b.w	8001740 <chThdSleep>
 8002978:	200012d4 	.word	0x200012d4
 800297c:	00000000 	.word	0x00000000

08002980 <lcdWriteString.constprop.21>:
 * @param[in] string    string to write
 * @param[in] pos       position for cursor (from 0 to LCD_DDRAM_MAX_ADDRESS)
 *
 * @api
 */
void lcdWriteString(LCDDriver *lcdp, char* string, uint8_t pos){
 8002980:	b538      	push	{r3, r4, r5, lr}
  int32_t iteration;
  osalDbgCheck((lcdp != NULL) && (string != NULL));
  osalDbgAssert((lcdp->state == LCD_ACTIVE),
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
 8002982:	f1c1 0580 	rsb	r5, r1, #128	; 0x80
  if(iteration > 0){
 8002986:	2d00      	cmp	r5, #0
 8002988:	dd14      	ble.n	80029b4 <lcdWriteString.constprop.21+0x34>
void lcdSetAddress(LCDDriver *lcdp, uint8_t add){

  osalDbgCheck(lcdp != NULL);
  osalDbgAssert((lcdp->state == LCD_ACTIVE),
                "lcdSetAddress(), invalid state");
  if(add > LCD_SET_DDRAM_ADDRESS_MASK)
 800298a:	060b      	lsls	r3, r1, #24
 800298c:	4604      	mov	r4, r0
 800298e:	d404      	bmi.n	800299a <lcdWriteString.constprop.21+0x1a>
    return;
  hd44780WriteRegister(lcdp, LCD_INSTRUCTION_R, LCD_SET_DDRAM_ADDRESS | add);
 8002990:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002994:	2000      	movs	r0, #0
 8002996:	f7ff ff33 	bl	8002800 <hd44780WriteRegister.constprop.25>
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 800299a:	7821      	ldrb	r1, [r4, #0]
 800299c:	b151      	cbz	r1, 80029b4 <lcdWriteString.constprop.21+0x34>
 800299e:	4425      	add	r5, r4
 80029a0:	e001      	b.n	80029a6 <lcdWriteString.constprop.21+0x26>
 80029a2:	42ac      	cmp	r4, r5
 80029a4:	d007      	beq.n	80029b6 <lcdWriteString.constprop.21+0x36>
      hd44780WriteRegister(lcdp, LCD_DATA_R, *string);
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7ff ff2a 	bl	8002800 <hd44780WriteRegister.constprop.25>
                "lcdWriteString(), invalid state");

  iteration = LCD_SET_DDRAM_ADDRESS_MASK - pos + 1;
  if(iteration > 0){
    lcdSetAddress(lcdp, pos);
    while((*string != '\0') && (iteration > 0)){
 80029ac:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80029b0:	2900      	cmp	r1, #0
 80029b2:	d1f6      	bne.n	80029a2 <lcdWriteString.constprop.21+0x22>
 80029b4:	bd38      	pop	{r3, r4, r5, pc}
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
	...

080029c0 <MFRC522WriteRegister.constprop.20>:
 };

/*
* Implement functions to write and read values using spi driver.
*/
void MFRC522WriteRegister(MFRC522Driver* mfrc522p, uint8_t addr, uint8_t val)
 80029c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029c4:	2720      	movs	r7, #32
 80029c6:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 80029ca:	4c27      	ldr	r4, [pc, #156]	; (8002a68 <MFRC522WriteRegister.constprop.20+0xa8>)
 80029cc:	6863      	ldr	r3, [r4, #4]
 80029ce:	891e      	ldrh	r6, [r3, #8]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	2501      	movs	r5, #1
 80029d4:	fa05 f306 	lsl.w	r3, r5, r6
 80029d8:	b29b      	uxth	r3, r3
 80029da:	8353      	strh	r3, [r2, #26]
 80029dc:	2600      	movs	r6, #0
 80029de:	f386 8811 	msr	BASEPRI, r6
{
    (void)mfrc522p;
    spiSelect(&SPID2);
    txbuf[0] = (addr << 1) & 0x7E;
 80029e2:	f8df e08c 	ldr.w	lr, [pc, #140]	; 8002a70 <MFRC522WriteRegister.constprop.20+0xb0>
 80029e6:	40a8      	lsls	r0, r5
 80029e8:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 80029ec:	f88e 0000 	strb.w	r0, [lr]
    txbuf[1] = val;
 80029f0:	f88e 1001 	strb.w	r1, [lr, #1]
 80029f4:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80029f8:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 80029fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 80029fc:	6852      	ldr	r2, [r2, #4]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 80029fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002a00:	685b      	ldr	r3, [r3, #4]
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002a02:	481a      	ldr	r0, [pc, #104]	; (8002a6c <MFRC522WriteRegister.constprop.20+0xac>)
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002a04:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002a08:	60d0      	str	r0, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002a0a:	f04f 0c02 	mov.w	ip, #2
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartSendI(spip, n, txbuf);
 8002a0e:	2003      	movs	r0, #3
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002a10:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002a14:	f8c2 c004 	str.w	ip, [r2, #4]
 8002a18:	7020      	strb	r0, [r4, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002a1a:	f8c2 8000 	str.w	r8, [r2]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002a1e:	f8c3 e00c 	str.w	lr, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002a22:	f8c3 c004 	str.w	ip, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002a26:	6019      	str	r1, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8002a28:	6811      	ldr	r1, [r2, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8002a2a:	f8df e048 	ldr.w	lr, [pc, #72]	; 8002a74 <MFRC522WriteRegister.constprop.20+0xb4>
 8002a2e:	4329      	orrs	r1, r5
 8002a30:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	f8de e018 	ldr.w	lr, [lr, #24]
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8002a38:	4622      	mov	r2, r4
 8002a3a:	4329      	orrs	r1, r5
 8002a3c:	6019      	str	r1, [r3, #0]
 8002a3e:	f842 ef08 	str.w	lr, [r2, #8]!
  tp->p_u.wttrp = trp;
 8002a42:	f8ce 2020 	str.w	r2, [lr, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002a46:	f7fe faf3 	bl	8001030 <chSchGoSleepS>
 8002a4a:	f386 8811 	msr	BASEPRI, r6
 8002a4e:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8002a52:	6863      	ldr	r3, [r4, #4]
 8002a54:	891a      	ldrh	r2, [r3, #8]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4095      	lsls	r5, r2
 8002a5a:	b2ad      	uxth	r5, r5
 8002a5c:	831d      	strh	r5, [r3, #24]
 8002a5e:	f386 8811 	msr	BASEPRI, r6
 8002a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a66:	bf00      	nop
 8002a68:	200012a4 	.word	0x200012a4
 8002a6c:	200012f4 	.word	0x200012f4
 8002a70:	200012e0 	.word	0x200012e0
 8002a74:	20001138 	.word	0x20001138
	...

08002a80 <MFRC522ReadRegister.constprop.19>:
    spiSend(&SPID2, 2, txbuf);
    spiUnselect(&SPID2);
}

uint8_t MFRC522ReadRegister(MFRC522Driver* mfrc522p, uint8_t addr)
 8002a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a84:	2720      	movs	r7, #32
 8002a86:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8002a8a:	4c2b      	ldr	r4, [pc, #172]	; (8002b38 <MFRC522ReadRegister.constprop.19+0xb8>)
 8002a8c:	6863      	ldr	r3, [r4, #4]
 8002a8e:	8919      	ldrh	r1, [r3, #8]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	2501      	movs	r5, #1
 8002a94:	fa05 f301 	lsl.w	r3, r5, r1
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	8353      	strh	r3, [r2, #26]
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	f386 8811 	msr	BASEPRI, r6
{
    (void)mfrc522p;
    spiSelect(&SPID2);
    txbuf[0] = ((addr << 1) & 0x7E) | 0x80;
 8002aa2:	40a8      	lsls	r0, r5
 8002aa4:	f8df e094 	ldr.w	lr, [pc, #148]	; 8002b3c <MFRC522ReadRegister.constprop.19+0xbc>
 8002aa8:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 8002aac:	f060 007f 	orn	r0, r0, #127	; 0x7f
    txbuf[1] = 0xff;
 8002ab0:	23ff      	movs	r3, #255	; 0xff

uint8_t MFRC522ReadRegister(MFRC522Driver* mfrc522p, uint8_t addr)
{
    (void)mfrc522p;
    spiSelect(&SPID2);
    txbuf[0] = ((addr << 1) & 0x7E) | 0x80;
 8002ab2:	f88e 0000 	strb.w	r0, [lr]
    txbuf[1] = 0xff;
 8002ab6:	f88e 3001 	strb.w	r3, [lr, #1]
 8002aba:	f387 8811 	msr	BASEPRI, r7
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002abe:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002ac2:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002ac4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002ac6:	6852      	ldr	r2, [r2, #4]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002ac8:	685b      	ldr	r3, [r3, #4]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8002aca:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8002b40 <MFRC522ReadRegister.constprop.19+0xc0>
 8002ace:	f8c2 800c 	str.w	r8, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002ad2:	f040 0c80 	orr.w	ip, r0, #128	; 0x80
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002ad6:	f04f 0902 	mov.w	r9, #2
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 8002ada:	2003      	movs	r0, #3
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002adc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002ae0:	f8c2 9004 	str.w	r9, [r2, #4]
 8002ae4:	7020      	strb	r0, [r4, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8002ae6:	f8c2 c000 	str.w	ip, [r2]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002aea:	f8c3 e00c 	str.w	lr, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002aee:	f8c3 9004 	str.w	r9, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002af2:	6019      	str	r1, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8002af4:	6811      	ldr	r1, [r2, #0]
 8002af6:	f8df e04c 	ldr.w	lr, [pc, #76]	; 8002b44 <MFRC522ReadRegister.constprop.19+0xc4>
 8002afa:	4329      	orrs	r1, r5
 8002afc:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8002afe:	6819      	ldr	r1, [r3, #0]
 8002b00:	f8de e018 	ldr.w	lr, [lr, #24]
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 8002b04:	4622      	mov	r2, r4
 8002b06:	4329      	orrs	r1, r5
 8002b08:	6019      	str	r1, [r3, #0]
 8002b0a:	f842 ef08 	str.w	lr, [r2, #8]!
  tp->p_u.wttrp = trp;
 8002b0e:	f8ce 2020 	str.w	r2, [lr, #32]
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8002b12:	f7fe fa8d 	bl	8001030 <chSchGoSleepS>
 8002b16:	f386 8811 	msr	BASEPRI, r6
 8002b1a:	f387 8811 	msr	BASEPRI, r7
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8002b1e:	6863      	ldr	r3, [r4, #4]
 8002b20:	891a      	ldrh	r2, [r3, #8]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4095      	lsls	r5, r2
 8002b26:	b2ad      	uxth	r5, r5
 8002b28:	831d      	strh	r5, [r3, #24]
 8002b2a:	f386 8811 	msr	BASEPRI, r6
    spiExchange(&SPID2, 2, txbuf, rxbuf);
    spiUnselect(&SPID2);
    return rxbuf[1];
}
 8002b2e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8002b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b36:	bf00      	nop
 8002b38:	200012a4 	.word	0x200012a4
 8002b3c:	200012e0 	.word	0x200012e0
 8002b40:	200012e4 	.word	0x200012e4
 8002b44:	20001138 	.word	0x20001138
	...

08002b50 <MFRC522SetBitMask.constprop.18>:
/*===========================================================================*/
static void MFRC522Reset(MFRC522Driver* mfrc522p) {
    MFRC522WriteRegister(mfrc522p, MifareREG_COMMAND, PCD_RESETPHASE);
}

static void MFRC522SetBitMask(MFRC522Driver* mfrc522p, uint8_t reg, uint8_t mask) {
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	460c      	mov	r4, r1
 8002b54:	4605      	mov	r5, r0
    MFRC522WriteRegister(mfrc522p, reg, MFRC522ReadRegister(mfrc522p, reg) | mask);
 8002b56:	f7ff ff93 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8002b5a:	ea40 0104 	orr.w	r1, r0, r4
 8002b5e:	b2c9      	uxtb	r1, r1
 8002b60:	4628      	mov	r0, r5
}
 8002b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void MFRC522Reset(MFRC522Driver* mfrc522p) {
    MFRC522WriteRegister(mfrc522p, MifareREG_COMMAND, PCD_RESETPHASE);
}

static void MFRC522SetBitMask(MFRC522Driver* mfrc522p, uint8_t reg, uint8_t mask) {
    MFRC522WriteRegister(mfrc522p, reg, MFRC522ReadRegister(mfrc522p, reg) | mask);
 8002b66:	f7ff bf2b 	b.w	80029c0 <MFRC522WriteRegister.constprop.20>
 8002b6a:	bf00      	nop
 8002b6c:	0000      	movs	r0, r0
	...

08002b70 <MFRC522ClearBitMask.constprop.17>:
}

static void MFRC522ClearBitMask(MFRC522Driver* mfrc522p, uint8_t reg, uint8_t mask){
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	460c      	mov	r4, r1
 8002b74:	4605      	mov	r5, r0
    MFRC522WriteRegister(mfrc522p, reg, MFRC522ReadRegister(mfrc522p, reg) & (~mask));
 8002b76:	f7ff ff83 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8002b7a:	ea20 0104 	bic.w	r1, r0, r4
 8002b7e:	b2c9      	uxtb	r1, r1
 8002b80:	4628      	mov	r0, r5
}
 8002b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
static void MFRC522SetBitMask(MFRC522Driver* mfrc522p, uint8_t reg, uint8_t mask) {
    MFRC522WriteRegister(mfrc522p, reg, MFRC522ReadRegister(mfrc522p, reg) | mask);
}

static void MFRC522ClearBitMask(MFRC522Driver* mfrc522p, uint8_t reg, uint8_t mask){
    MFRC522WriteRegister(mfrc522p, reg, MFRC522ReadRegister(mfrc522p, reg) & (~mask));
 8002b86:	f7ff bf1b 	b.w	80029c0 <MFRC522WriteRegister.constprop.20>
 8002b8a:	bf00      	nop
 8002b8c:	0000      	movs	r0, r0
	...

08002b90 <MifareToPICC.constprop.16>:

static void MFRC522AntennaOff(MFRC522Driver* mfrc522p) {
    MFRC522ClearBitMask(mfrc522p, MifareREG_TX_CONTROL, 0x03);
}

static MIFARE_Status_t MifareToPICC(MFRC522Driver* mfrc522p, uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint8_t backDataLen, uint16_t* backLen)
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	460d      	mov	r5, r1
 8002b94:	4604      	mov	r4, r0
        }
        default:
            break;
    }

    MFRC522WriteRegister(mfrc522p, MifareREG_COMM_IE_N, irqEn | 0x80);
 8002b96:	21f7      	movs	r1, #247	; 0xf7
 8002b98:	2002      	movs	r0, #2

static void MFRC522AntennaOff(MFRC522Driver* mfrc522p) {
    MFRC522ClearBitMask(mfrc522p, MifareREG_TX_CONTROL, 0x03);
}

static MIFARE_Status_t MifareToPICC(MFRC522Driver* mfrc522p, uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint8_t backDataLen, uint16_t* backLen)
 8002b9a:	4616      	mov	r6, r2
 8002b9c:	461f      	mov	r7, r3
        }
        default:
            break;
    }

    MFRC522WriteRegister(mfrc522p, MifareREG_COMM_IE_N, irqEn | 0x80);
 8002b9e:	f7ff ff0f 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
    MFRC522ClearBitMask(mfrc522p, MifareREG_COMM_IRQ, 0x80);
 8002ba2:	2004      	movs	r0, #4
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	f7ff ffe3 	bl	8002b70 <MFRC522ClearBitMask.constprop.17>
    MFRC522SetBitMask(mfrc522p, MifareREG_FIFO_LEVEL, 0x80);
 8002baa:	200a      	movs	r0, #10
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	f7ff ffcf 	bl	8002b50 <MFRC522SetBitMask.constprop.18>

    MFRC522WriteRegister(mfrc522p, MifareREG_COMMAND, PCD_IDLE);
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f7ff ff03 	bl	80029c0 <MFRC522WriteRegister.constprop.20>

    //Writing data to the FIFO
    for (i = 0; i < sendLen; i++) {
 8002bba:	b2a9      	uxth	r1, r5
 8002bbc:	b151      	cbz	r1, 8002bd4 <MifareToPICC.constprop.16+0x44>
 8002bbe:	1e4d      	subs	r5, r1, #1
 8002bc0:	fa14 f585 	uxtah	r5, r4, r5
 8002bc4:	3c01      	subs	r4, #1
        MFRC522WriteRegister(mfrc522p, MifareREG_FIFO_DATA, sendData[i]);
 8002bc6:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002bca:	2009      	movs	r0, #9
 8002bcc:	f7ff fef8 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
    MFRC522SetBitMask(mfrc522p, MifareREG_FIFO_LEVEL, 0x80);

    MFRC522WriteRegister(mfrc522p, MifareREG_COMMAND, PCD_IDLE);

    //Writing data to the FIFO
    for (i = 0; i < sendLen; i++) {
 8002bd0:	42ac      	cmp	r4, r5
 8002bd2:	d1f8      	bne.n	8002bc6 <MifareToPICC.constprop.16+0x36>
        MFRC522WriteRegister(mfrc522p, MifareREG_FIFO_DATA, sendData[i]);
    }

    //Execute the command
    MFRC522WriteRegister(mfrc522p, MifareREG_COMMAND, command);
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	210c      	movs	r1, #12
 8002bd8:	f7ff fef2 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
    if (command == PCD_TRANSCEIVE) {
        MFRC522SetBitMask(mfrc522p, MifareREG_BIT_FRAMING, 0x80);      //StartSend=1,transmission of data starts
 8002bdc:	200d      	movs	r0, #13
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	f7ff ffb6 	bl	8002b50 <MFRC522SetBitMask.constprop.18>
    //Waiting to receive data to complete
    i = 2000;   //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do {
        //CommIrqReg[7..0]
        //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = MFRC522ReadRegister(mfrc522p, MifareREG_COMM_IRQ);
 8002be4:	2004      	movs	r0, #4
 8002be6:	f7ff ff4b 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8002bea:	f240 74cf 	movw	r4, #1999	; 0x7cf
 8002bee:	4605      	mov	r5, r0
 8002bf0:	e005      	b.n	8002bfe <MifareToPICC.constprop.16+0x6e>
 8002bf2:	f7ff ff45 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8002bf6:	3c01      	subs	r4, #1
 8002bf8:	b2a4      	uxth	r4, r4
 8002bfa:	4605      	mov	r5, r0
        i--;
    } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002bfc:	b18c      	cbz	r4, 8002c22 <MifareToPICC.constprop.16+0x92>
 8002bfe:	f015 0f31 	tst.w	r5, #49	; 0x31
    //Waiting to receive data to complete
    i = 2000;   //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do {
        //CommIrqReg[7..0]
        //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = MFRC522ReadRegister(mfrc522p, MifareREG_COMM_IRQ);
 8002c02:	f04f 0004 	mov.w	r0, #4
        i--;
    } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002c06:	d0f4      	beq.n	8002bf2 <MifareToPICC.constprop.16+0x62>

    MFRC522ClearBitMask(mfrc522p, MifareREG_BIT_FRAMING, 0x80);            //StartSend=0
 8002c08:	200d      	movs	r0, #13
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	f7ff ffb0 	bl	8002b70 <MFRC522ClearBitMask.constprop.17>

    if (i != 0)  {
        if (!(MFRC522ReadRegister(mfrc522p, MifareREG_ERROR) & 0x1B)) {
 8002c10:	2006      	movs	r0, #6
 8002c12:	f7ff ff35 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8002c16:	f010 0f1b 	tst.w	r0, #27
 8002c1a:	d007      	beq.n	8002c2c <MifareToPICC.constprop.16+0x9c>
    MFRC522ClearBitMask(mfrc522p, MifareREG_TX_CONTROL, 0x03);
}

static MIFARE_Status_t MifareToPICC(MFRC522Driver* mfrc522p, uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint8_t backDataLen, uint16_t* backLen)
{
    MIFARE_Status_t status = MIFARE_ERR;
 8002c1c:	2502      	movs	r5, #2
            status = MIFARE_ERR;
        }
    }

    return status;
}
 8002c1e:	4628      	mov	r0, r5
 8002c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = MFRC522ReadRegister(mfrc522p, MifareREG_COMM_IRQ);
        i--;
    } while ((i!=0) && !(n&0x01) && !(n&waitIRq));

    MFRC522ClearBitMask(mfrc522p, MifareREG_BIT_FRAMING, 0x80);            //StartSend=0
 8002c22:	200d      	movs	r0, #13
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	f7ff ffa3 	bl	8002b70 <MFRC522ClearBitMask.constprop.17>
 8002c2a:	e7f7      	b.n	8002c1c <MifareToPICC.constprop.16+0x8c>
            if (n & irqEn & 0x01) {
                status = MIFARE_NOTAGERR;
            }

            if (command == PCD_TRANSCEIVE) {
                n = MFRC522ReadRegister(mfrc522p, MifareREG_FIFO_LEVEL);
 8002c2c:	200a      	movs	r0, #10
 8002c2e:	f7ff ff27 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8002c32:	4604      	mov	r4, r0
                lastBits = MFRC522ReadRegister(mfrc522p, MifareREG_CONTROL) & 0x07;
 8002c34:	200c      	movs	r0, #12
 8002c36:	f7ff ff23 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
                if (lastBits) {
 8002c3a:	f010 0007 	ands.w	r0, r0, #7

    MFRC522ClearBitMask(mfrc522p, MifareREG_BIT_FRAMING, 0x80);            //StartSend=0

    if (i != 0)  {
        if (!(MFRC522ReadRegister(mfrc522p, MifareREG_ERROR) & 0x1B)) {
            status = MIFARE_OK;
 8002c3e:	f005 0501 	and.w	r5, r5, #1
            }

            if (command == PCD_TRANSCEIVE) {
                n = MFRC522ReadRegister(mfrc522p, MifareREG_FIFO_LEVEL);
                lastBits = MFRC522ReadRegister(mfrc522p, MifareREG_CONTROL) & 0x07;
                if (lastBits) {
 8002c42:	d015      	beq.n	8002c70 <MifareToPICC.constprop.16+0xe0>
                    *backLen = (n - 1) * 8 + lastBits;
 8002c44:	1e63      	subs	r3, r4, #1
 8002c46:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8002c4a:	9b06      	ldr	r3, [sp, #24]
 8002c4c:	8018      	strh	r0, [r3, #0]
                } else {
                    *backLen = n * 8;
                }

                if (n == 0) {
 8002c4e:	b1cc      	cbz	r4, 8002c84 <MifareToPICC.constprop.16+0xf4>
                    n = 1;
                }
                if (n > MifareMAX_LEN) {
 8002c50:	2c10      	cmp	r4, #16
 8002c52:	d911      	bls.n	8002c78 <MifareToPICC.constprop.16+0xe8>
                    n = MifareMAX_LEN;
                }

                if (n <= backDataLen)
 8002c54:	2f0f      	cmp	r7, #15
 8002c56:	d9e1      	bls.n	8002c1c <MifareToPICC.constprop.16+0x8c>
                {
                    //Reading the received data in FIFO
                    for (i = 0; i < n; i++) {
 8002c58:	2410      	movs	r4, #16
 8002c5a:	4637      	mov	r7, r6
                        backData[i] = MFRC522ReadRegister(mfrc522p, MifareREG_FIFO_DATA);
 8002c5c:	2009      	movs	r0, #9
 8002c5e:	f7ff ff0f 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8002c62:	f807 0b01 	strb.w	r0, [r7], #1
 8002c66:	1bbb      	subs	r3, r7, r6
                }

                if (n <= backDataLen)
                {
                    //Reading the received data in FIFO
                    for (i = 0; i < n; i++) {
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	42a3      	cmp	r3, r4
 8002c6c:	d3f6      	bcc.n	8002c5c <MifareToPICC.constprop.16+0xcc>
 8002c6e:	e7d6      	b.n	8002c1e <MifareToPICC.constprop.16+0x8e>
                n = MFRC522ReadRegister(mfrc522p, MifareREG_FIFO_LEVEL);
                lastBits = MFRC522ReadRegister(mfrc522p, MifareREG_CONTROL) & 0x07;
                if (lastBits) {
                    *backLen = (n - 1) * 8 + lastBits;
                } else {
                    *backLen = n * 8;
 8002c70:	9a06      	ldr	r2, [sp, #24]
 8002c72:	00e3      	lsls	r3, r4, #3
 8002c74:	8013      	strh	r3, [r2, #0]
 8002c76:	e7ea      	b.n	8002c4e <MifareToPICC.constprop.16+0xbe>
                }
                if (n > MifareMAX_LEN) {
                    n = MifareMAX_LEN;
                }

                if (n <= backDataLen)
 8002c78:	42bc      	cmp	r4, r7
 8002c7a:	d8cf      	bhi.n	8002c1c <MifareToPICC.constprop.16+0x8c>
                {
                    //Reading the received data in FIFO
                    for (i = 0; i < n; i++) {
 8002c7c:	b2a4      	uxth	r4, r4
 8002c7e:	2c00      	cmp	r4, #0
 8002c80:	d1eb      	bne.n	8002c5a <MifareToPICC.constprop.16+0xca>
 8002c82:	e7cc      	b.n	8002c1e <MifareToPICC.constprop.16+0x8e>
                }
                if (n > MifareMAX_LEN) {
                    n = MifareMAX_LEN;
                }

                if (n <= backDataLen)
 8002c84:	2f00      	cmp	r7, #0
 8002c86:	d0c9      	beq.n	8002c1c <MifareToPICC.constprop.16+0x8c>
                {
                    //Reading the received data in FIFO
                    for (i = 0; i < n; i++) {
 8002c88:	2401      	movs	r4, #1
 8002c8a:	e7e6      	b.n	8002c5a <MifareToPICC.constprop.16+0xca>
 8002c8c:	0000      	movs	r0, r0
	...

08002c90 <pwmc1cb.lto_priv.92>:


static void pwmc1cb(PWMDriver *pwmp) {

  (void)pwmp;
  palClearPad(PWM_MOTOR_PORT, PWM_MOTOR_PIN);
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <pwmc1cb.lto_priv.92+0xc>)
 8002c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c96:	835a      	strh	r2, [r3, #26]
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	48000400 	.word	0x48000400

08002ca0 <pwmpcb.lto_priv.91>:
*/

static void pwmpcb(PWMDriver *pwmp) {

  (void)pwmp;
      palSetPad(PWM_MOTOR_PORT, PWM_MOTOR_PIN);
 8002ca0:	4b02      	ldr	r3, [pc, #8]	; (8002cac <pwmpcb.lto_priv.91+0xc>)
 8002ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ca6:	831a      	strh	r2, [r3, #24]
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	48000400 	.word	0x48000400

08002cb0 <Thread6.lto_priv.76>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <Thread6.lto_priv.76+0x34>)
 8002cb2:	4d0d      	ldr	r5, [pc, #52]	; (8002ce8 <Thread6.lto_priv.76+0x38>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	4a0d      	ldr	r2, [pc, #52]	; (8002cec <Thread6.lto_priv.76+0x3c>)
  (void)arg;
  chRegSetThreadName("Laser Manager");
  while (true) {


    if(palReadPad(PORT_LASER,PIN_LASER)){
 8002cb8:	4c0d      	ldr	r4, [pc, #52]	; (8002cf0 <Thread6.lto_priv.76+0x40>)
/*
 * This thread polls the laser.
 */

static THD_WORKING_AREA(waThread6, 128);
static THD_FUNCTION(Thread6, arg) {
 8002cba:	b580      	push	{r7, lr}
  while (true) {


    if(palReadPad(PORT_LASER,PIN_LASER)){

      switch(state){
 8002cbc:	462e      	mov	r6, r5
 8002cbe:	619a      	str	r2, [r3, #24]

        case(GOING_DOWN_MANUAL):
             state=GOING_UP_MANUAL;
 8002cc0:	2701      	movs	r7, #1
 8002cc2:	e007      	b.n	8002cd4 <Thread6.lto_priv.76+0x24>
  while (true) {


    if(palReadPad(PORT_LASER,PIN_LASER)){

      switch(state){
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d101      	bne.n	8002ccc <Thread6.lto_priv.76+0x1c>

        case(GOING_DOWN_MANUAL):
             state=GOING_UP_MANUAL;
              break;
        case(GOING_DOWN_AUTOMATIC):
            state=GOING_UP_AUTOMATIC;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	7033      	strb	r3, [r6, #0]
            break;

      }

    }
    chThdSleepMilliseconds(230);
 8002ccc:	f640 00fc 	movw	r0, #2300	; 0x8fc
 8002cd0:	f7fe fd36 	bl	8001740 <chThdSleep>
  (void)arg;
  chRegSetThreadName("Laser Manager");
  while (true) {


    if(palReadPad(PORT_LASER,PIN_LASER)){
 8002cd4:	6923      	ldr	r3, [r4, #16]
 8002cd6:	079b      	lsls	r3, r3, #30
 8002cd8:	d5f8      	bpl.n	8002ccc <Thread6.lto_priv.76+0x1c>

      switch(state){
 8002cda:	782b      	ldrb	r3, [r5, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d1f1      	bne.n	8002cc4 <Thread6.lto_priv.76+0x14>

        case(GOING_DOWN_MANUAL):
             state=GOING_UP_MANUAL;
 8002ce0:	7037      	strb	r7, [r6, #0]
 8002ce2:	e7f3      	b.n	8002ccc <Thread6.lto_priv.76+0x1c>
 8002ce4:	20001138 	.word	0x20001138
 8002ce8:	200012f6 	.word	0x200012f6
 8002cec:	08003cf0 	.word	0x08003cf0
 8002cf0:	48000c00 	.word	0x48000c00
	...

08002d00 <Thread5.lto_priv.75>:
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <Thread5.lto_priv.75+0xb0>)
 8002d02:	4c2c      	ldr	r4, [pc, #176]	; (8002db4 <Thread5.lto_priv.75+0xb4>)
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	4d2c      	ldr	r5, [pc, #176]	; (8002db8 <Thread5.lto_priv.75+0xb8>)
 8002d08:	4a2c      	ldr	r2, [pc, #176]	; (8002dbc <Thread5.lto_priv.75+0xbc>)

/*
 * This thread controls the motion of the motor.
 */
static THD_WORKING_AREA(waThread5, 128);
static THD_FUNCTION(Thread5, arg) {
 8002d0a:	b580      	push	{r7, lr}

  (void)arg;
  chRegSetThreadName("Motor Controller");
  while (true) {
    if((state==GOING_UP_AUTOMATIC||state==GOING_UP_MANUAL) && MTRD1.position<UP_POSITION){
 8002d0c:	46a0      	mov	r8, r4
}

void motorUp(MotorDriver* motorp){
  motorp->position+=10;
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));
 8002d0e:	4f2c      	ldr	r7, [pc, #176]	; (8002dc0 <Thread5.lto_priv.75+0xc0>)
 8002d10:	619a      	str	r2, [r3, #24]
 8002d12:	462e      	mov	r6, r5
 8002d14:	e007      	b.n	8002d26 <Thread5.lto_priv.75+0x26>
      motorUp(&MTRD1);
      chThdSleepMilliseconds(5);
    }
    if((state==GOING_DOWN_AUTOMATIC||state==GOING_DOWN_MANUAL) && MTRD1.position>DOWN_POSITION){
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d02b      	beq.n	8002d72 <Thread5.lto_priv.75+0x72>
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d029      	beq.n	8002d72 <Thread5.lto_priv.75+0x72>
      motorDown(&MTRD1);
      chThdSleepMilliseconds(5);
    }


    chThdSleepMilliseconds(100);
 8002d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d22:	f7fe fd0d 	bl	8001740 <chThdSleep>
static THD_FUNCTION(Thread5, arg) {

  (void)arg;
  chRegSetThreadName("Motor Controller");
  while (true) {
    if((state==GOING_UP_AUTOMATIC||state==GOING_UP_MANUAL) && MTRD1.position<UP_POSITION){
 8002d26:	7823      	ldrb	r3, [r4, #0]
 8002d28:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8002d2c:	2a01      	cmp	r2, #1
 8002d2e:	d1f2      	bne.n	8002d16 <Thread5.lto_priv.75+0x16>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8002d36:	d2f2      	bcs.n	8002d1e <Thread5.lto_priv.75+0x1e>
 8002d38:	6872      	ldr	r2, [r6, #4]
 8002d3a:	6811      	ldr	r1, [r2, #0]
 8002d3c:	688a      	ldr	r2, [r1, #8]
  pwmEnableChannelNotification(motorp->config->pwmdriver, 0);
  pwmEnablePeriodicNotification(motorp->config->pwmdriver);
}

void motorUp(MotorDriver* motorp){
  motorp->position+=10;
 8002d3e:	330a      	adds	r3, #10
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));
 8002d40:	fb02 f203 	mul.w	r2, r2, r3
 8002d44:	fba7 e202 	umull	lr, r2, r7, r2
 8002d48:	2020      	movs	r0, #32
  pwmEnableChannelNotification(motorp->config->pwmdriver, 0);
  pwmEnablePeriodicNotification(motorp->config->pwmdriver);
}

void motorUp(MotorDriver* motorp){
  motorp->position+=10;
 8002d4a:	6033      	str	r3, [r6, #0]
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));
 8002d4c:	0b52      	lsrs	r2, r2, #13
 8002d4e:	f380 8811 	msr	BASEPRI, r0
 8002d52:	68cb      	ldr	r3, [r1, #12]
  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
#else
  if (channel < 4)
    pwmp->tim->CCR[channel] = width;
 8002d54:	6988      	ldr	r0, [r1, #24]
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	60cb      	str	r3, [r1, #12]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6342      	str	r2, [r0, #52]	; 0x34
 8002d60:	f383 8811 	msr	BASEPRI, r3
      motorUp(&MTRD1);
      chThdSleepMilliseconds(5);
 8002d64:	2032      	movs	r0, #50	; 0x32
 8002d66:	f7fe fceb 	bl	8001740 <chThdSleep>
 8002d6a:	f898 3000 	ldrb.w	r3, [r8]
    }
    if((state==GOING_DOWN_AUTOMATIC||state==GOING_DOWN_MANUAL) && MTRD1.position>DOWN_POSITION){
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d1d3      	bne.n	8002d1a <Thread5.lto_priv.75+0x1a>
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002d78:	d9d1      	bls.n	8002d1e <Thread5.lto_priv.75+0x1e>

}

void motorDown(MotorDriver* motorp){
  motorp->position-=10;
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));
 8002d7a:	6872      	ldr	r2, [r6, #4]
 8002d7c:	6811      	ldr	r1, [r2, #0]
 8002d7e:	688a      	ldr	r2, [r1, #8]
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));

}

void motorDown(MotorDriver* motorp){
  motorp->position-=10;
 8002d80:	3b0a      	subs	r3, #10
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));
 8002d82:	fb02 f203 	mul.w	r2, r2, r3
 8002d86:	fba7 0202 	umull	r0, r2, r7, r2
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));

}

void motorDown(MotorDriver* motorp){
  motorp->position-=10;
 8002d8a:	6033      	str	r3, [r6, #0]
  pwmEnableChannel(motorp->config->pwmdriver, 0, PWM_PERCENTAGE_TO_WIDTH(motorp->config->pwmdriver, motorp->position));
 8002d8c:	0b52      	lsrs	r2, r2, #13
 8002d8e:	2320      	movs	r3, #32
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	68cb      	ldr	r3, [r1, #12]
 8002d96:	6988      	ldr	r0, [r1, #24]
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	60cb      	str	r3, [r1, #12]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6342      	str	r2, [r0, #52]	; 0x34
 8002da2:	f383 8811 	msr	BASEPRI, r3
      motorDown(&MTRD1);
      chThdSleepMilliseconds(5);
 8002da6:	2032      	movs	r0, #50	; 0x32
 8002da8:	f7fe fcca 	bl	8001740 <chThdSleep>
 8002dac:	e7b7      	b.n	8002d1e <Thread5.lto_priv.75+0x1e>
 8002dae:	bf00      	nop
 8002db0:	20001138 	.word	0x20001138
 8002db4:	200012f6 	.word	0x200012f6
 8002db8:	20000b28 	.word	0x20000b28
 8002dbc:	08003d00 	.word	0x08003d00
 8002dc0:	d1b71759 	.word	0xd1b71759
	...

08002dd0 <Thread4.lto_priv.74>:
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <Thread4.lto_priv.74+0x44>)
 8002dd2:	4d11      	ldr	r5, [pc, #68]	; (8002e18 <Thread4.lto_priv.74+0x48>)
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <Thread4.lto_priv.74+0x4c>)

/*
 * This thread polls the user button for manual usage.
 */
static THD_WORKING_AREA(waThread4, 128);
static THD_FUNCTION(Thread4, arg) {
 8002dd8:	b580      	push	{r7, lr}

        case(ACTIVE):
             state=GOING_UP_MANUAL;
              break;
        case(GOING_UP_MANUAL):
            if(!palReadPad(PORT_LASER,PIN_LASER))
 8002dda:	4f11      	ldr	r7, [pc, #68]	; (8002e20 <Thread4.lto_priv.74+0x50>)
 8002ddc:	619a      	str	r2, [r3, #24]
  while (true) {


    if(palReadPad(PORT_MANUAL_BUTTON,PIN_MANUAL_BUTTON)){

      switch(state){
 8002dde:	462e      	mov	r6, r5
  (void)arg;
  chRegSetThreadName("Button Manager");
  while (true) {


    if(palReadPad(PORT_MANUAL_BUTTON,PIN_MANUAL_BUTTON)){
 8002de0:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
 8002de4:	6923      	ldr	r3, [r4, #16]
 8002de6:	07db      	lsls	r3, r3, #31
 8002de8:	d507      	bpl.n	8002dfa <Thread4.lto_priv.74+0x2a>

      switch(state){
 8002dea:	782b      	ldrb	r3, [r5, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d009      	beq.n	8002e04 <Thread4.lto_priv.74+0x34>
 8002df0:	d301      	bcc.n	8002df6 <Thread4.lto_priv.74+0x26>
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d101      	bne.n	8002dfa <Thread4.lto_priv.74+0x2a>
            if(!palReadPad(PORT_LASER,PIN_LASER))
                  state=GOING_DOWN_MANUAL;
            break;

        case(GOING_DOWN_MANUAL):
            state=GOING_UP_MANUAL;
 8002df6:	2301      	movs	r3, #1
 8002df8:	7033      	strb	r3, [r6, #0]
            break;

      }

    }
    chThdSleepMilliseconds(230);
 8002dfa:	f640 00fc 	movw	r0, #2300	; 0x8fc
 8002dfe:	f7fe fc9f 	bl	8001740 <chThdSleep>
 8002e02:	e7ef      	b.n	8002de4 <Thread4.lto_priv.74+0x14>

        case(ACTIVE):
             state=GOING_UP_MANUAL;
              break;
        case(GOING_UP_MANUAL):
            if(!palReadPad(PORT_LASER,PIN_LASER))
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f013 0f02 	tst.w	r3, #2
                  state=GOING_DOWN_MANUAL;
 8002e0a:	f04f 0302 	mov.w	r3, #2

        case(ACTIVE):
             state=GOING_UP_MANUAL;
              break;
        case(GOING_UP_MANUAL):
            if(!palReadPad(PORT_LASER,PIN_LASER))
 8002e0e:	d1f4      	bne.n	8002dfa <Thread4.lto_priv.74+0x2a>
 8002e10:	e7f2      	b.n	8002df8 <Thread4.lto_priv.74+0x28>
 8002e12:	bf00      	nop
 8002e14:	20001138 	.word	0x20001138
 8002e18:	200012f6 	.word	0x200012f6
 8002e1c:	08003d14 	.word	0x08003d14
 8002e20:	48000c00 	.word	0x48000c00
	...

08002e30 <Thread1.lto_priv.71>:

/*
 * Orange LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8002e30:	b508      	push	{r3, lr}
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <Thread1.lto_priv.71+0x28>)
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <Thread1.lto_priv.71+0x2c>)
 8002e36:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("Blinker");
  while (true) {
    palClearPad(GPIOE, GPIOE_LED5_ORANGE);
 8002e38:	4c09      	ldr	r4, [pc, #36]	; (8002e60 <Thread1.lto_priv.71+0x30>)
 8002e3a:	619a      	str	r2, [r3, #24]
 8002e3c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002e40:	462e      	mov	r6, r5
 8002e42:	8366      	strh	r6, [r4, #26]
    chThdSleepMilliseconds(500);
 8002e44:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e48:	f7fe fc7a 	bl	8001740 <chThdSleep>
    palSetPad(GPIOE, GPIOE_LED5_ORANGE);
 8002e4c:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(500);
 8002e4e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e52:	f7fe fc75 	bl	8001740 <chThdSleep>
 8002e56:	e7f4      	b.n	8002e42 <Thread1.lto_priv.71+0x12>
 8002e58:	20001138 	.word	0x20001138
 8002e5c:	08003d24 	.word	0x08003d24
 8002e60:	48001000 	.word	0x48001000
	...

08002e70 <Thread2.lto_priv.72>:

/*
 * This thread change the state accordingly to the position of the motor and to the laser
 */
static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {
 8002e70:	b508      	push	{r3, lr}
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <Thread2.lto_priv.72+0x6c>)
 8002e74:	4a1a      	ldr	r2, [pc, #104]	; (8002ee0 <Thread2.lto_priv.72+0x70>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	4c1a      	ldr	r4, [pc, #104]	; (8002ee4 <Thread2.lto_priv.72+0x74>)
 8002e7a:	4d1b      	ldr	r5, [pc, #108]	; (8002ee8 <Thread2.lto_priv.72+0x78>)
 8002e7c:	619a      	str	r2, [r3, #24]

  (void)arg;
  chRegSetThreadName("Position Manager");
  while (true) {

    switch(state){
 8002e7e:	7823      	ldrb	r3, [r4, #0]
 8002e80:	3b02      	subs	r3, #2
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d807      	bhi.n	8002e96 <Thread2.lto_priv.72+0x26>
 8002e86:	e8df f003 	tbb	[pc, r3]
 8002e8a:	1402      	.short	0x1402
 8002e8c:	0b02      	.short	0x0b02
                  chThdSleepMilliseconds(7000);
                }
                break;

            case(GOING_DOWN_AUTOMATIC):
                 if(MTRD1.position==DOWN_POSITION){
 8002e8e:	682b      	ldr	r3, [r5, #0]
 8002e90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002e94:	d017      	beq.n	8002ec6 <Thread2.lto_priv.72+0x56>

                }
                break;

          }
    chThdSleepMilliseconds(100);
 8002e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9a:	f7fe fc51 	bl	8001740 <chThdSleep>
 8002e9e:	e7ee      	b.n	8002e7e <Thread2.lto_priv.72+0xe>
  while (true) {

    switch(state){

            case(GATE_OPENED):
                if(!palReadPad(PORT_LASER,PIN_LASER))
 8002ea0:	4b12      	ldr	r3, [pc, #72]	; (8002eec <Thread2.lto_priv.72+0x7c>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f013 0f02 	tst.w	r3, #2
                state=GOING_DOWN_AUTOMATIC;
 8002ea8:	f04f 0304 	mov.w	r3, #4
  while (true) {

    switch(state){

            case(GATE_OPENED):
                if(!palReadPad(PORT_LASER,PIN_LASER))
 8002eac:	d1f3      	bne.n	8002e96 <Thread2.lto_priv.72+0x26>
                state=GOING_DOWN_AUTOMATIC;
 8002eae:	7023      	strb	r3, [r4, #0]
 8002eb0:	e7f1      	b.n	8002e96 <Thread2.lto_priv.72+0x26>
                  break;

            case(GOING_UP_AUTOMATIC):
                if(MTRD1.position==UP_POSITION){
 8002eb2:	682b      	ldr	r3, [r5, #0]
 8002eb4:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8002eb8:	d1ed      	bne.n	8002e96 <Thread2.lto_priv.72+0x26>
                  state=GATE_OPENED;
 8002eba:	2305      	movs	r3, #5
                  chThdSleepMilliseconds(7000);
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <Thread2.lto_priv.72+0x80>)
                state=GOING_DOWN_AUTOMATIC;
                  break;

            case(GOING_UP_AUTOMATIC):
                if(MTRD1.position==UP_POSITION){
                  state=GATE_OPENED;
 8002ebe:	7023      	strb	r3, [r4, #0]
                  chThdSleepMilliseconds(7000);
 8002ec0:	f7fe fc3e 	bl	8001740 <chThdSleep>
 8002ec4:	e7e7      	b.n	8002e96 <Thread2.lto_priv.72+0x26>
                }
                break;

            case(GOING_DOWN_AUTOMATIC):
                 if(MTRD1.position==DOWN_POSITION){
                   state=ACTIVE;
 8002ec6:	2300      	movs	r3, #0
                   lcdWriteString(&LCDD1, "Buongiorno.     ", 0);
 8002ec8:	4619      	mov	r1, r3
 8002eca:	480a      	ldr	r0, [pc, #40]	; (8002ef4 <Thread2.lto_priv.72+0x84>)
                }
                break;

            case(GOING_DOWN_AUTOMATIC):
                 if(MTRD1.position==DOWN_POSITION){
                   state=ACTIVE;
 8002ecc:	7023      	strb	r3, [r4, #0]
                   lcdWriteString(&LCDD1, "Buongiorno.     ", 0);
 8002ece:	f7ff fd57 	bl	8002980 <lcdWriteString.constprop.21>
                   lcdWriteString(&LCDD1, "CAS17           ",40);
 8002ed2:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <Thread2.lto_priv.72+0x88>)
 8002ed4:	2128      	movs	r1, #40	; 0x28
 8002ed6:	f7ff fd53 	bl	8002980 <lcdWriteString.constprop.21>
 8002eda:	e7dc      	b.n	8002e96 <Thread2.lto_priv.72+0x26>
 8002edc:	20001138 	.word	0x20001138
 8002ee0:	08003d2c 	.word	0x08003d2c
 8002ee4:	200012f6 	.word	0x200012f6
 8002ee8:	20000b28 	.word	0x20000b28
 8002eec:	48000c00 	.word	0x48000c00
 8002ef0:	00011170 	.word	0x00011170
 8002ef4:	08003c48 	.word	0x08003c48
 8002ef8:	08003c5c 	.word	0x08003c5c
 8002efc:	00000000 	.word	0x00000000

08002f00 <Thread3.lto_priv.73>:
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <Thread3.lto_priv.73+0x78>)
 8002f02:	4d1e      	ldr	r5, [pc, #120]	; (8002f7c <Thread3.lto_priv.73+0x7c>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <Thread3.lto_priv.73+0x80>)

/*
 * This thread polls the RFID reader for a valid tag.
 */
static THD_WORKING_AREA(waThread3, 128);
static THD_FUNCTION(Thread3, arg) {
 8002f08:	b580      	push	{r7, lr}
  chRegSetThreadName("RFID manager");
  while (true) {


    chMtxLock(&CardIDMutex);
    if(state==ACTIVE){
 8002f0a:	46a8      	mov	r8, r5
 8002f0c:	4f1d      	ldr	r7, [pc, #116]	; (8002f84 <Thread3.lto_priv.73+0x84>)
 8002f0e:	619a      	str	r2, [r3, #24]
 8002f10:	e009      	b.n	8002f26 <Thread3.lto_priv.73+0x26>
         } else {

             CardID.size = 0;
         }
    }
    chMtxUnlock(&CardIDMutex);
 8002f12:	481d      	ldr	r0, [pc, #116]	; (8002f88 <Thread3.lto_priv.73+0x88>)
 8002f14:	f7fe f824 	bl	8000f60 <chMtxUnlock>
         if(state == GOING_UP_AUTOMATIC){
 8002f18:	782b      	ldrb	r3, [r5, #0]
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d014      	beq.n	8002f48 <Thread3.lto_priv.73+0x48>
           chThdSleepMilliseconds(2000);
         }
         chThdSleepMilliseconds(100);
 8002f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f22:	f7fe fc0d 	bl	8001740 <chThdSleep>
  (void)arg;
  chRegSetThreadName("RFID manager");
  while (true) {


    chMtxLock(&CardIDMutex);
 8002f26:	4818      	ldr	r0, [pc, #96]	; (8002f88 <Thread3.lto_priv.73+0x88>)
 8002f28:	f7fe f89a 	bl	8001060 <chMtxLock>
    if(state==ACTIVE){
 8002f2c:	782c      	ldrb	r4, [r5, #0]
 8002f2e:	2c00      	cmp	r4, #0
 8002f30:	d1ef      	bne.n	8002f12 <Thread3.lto_priv.73+0x12>
       if (MifareCheck(&RFID1, &CardID) == MIFARE_OK) {
 8002f32:	f000 fb7d 	bl	8003630 <MifareCheck.constprop.5>
 8002f36:	4606      	mov	r6, r0
 8002f38:	b158      	cbz	r0, 8002f52 <Thread3.lto_priv.73+0x52>
         } else {

             CardID.size = 0;
         }
    }
    chMtxUnlock(&CardIDMutex);
 8002f3a:	4813      	ldr	r0, [pc, #76]	; (8002f88 <Thread3.lto_priv.73+0x88>)
           }


         } else {

             CardID.size = 0;
 8002f3c:	703c      	strb	r4, [r7, #0]
         }
    }
    chMtxUnlock(&CardIDMutex);
 8002f3e:	f7fe f80f 	bl	8000f60 <chMtxUnlock>
         if(state == GOING_UP_AUTOMATIC){
 8002f42:	782b      	ldrb	r3, [r5, #0]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d1ea      	bne.n	8002f1e <Thread3.lto_priv.73+0x1e>
           chThdSleepMilliseconds(2000);
 8002f48:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002f4c:	f7fe fbf8 	bl	8001740 <chThdSleep>
 8002f50:	e7e5      	b.n	8002f1e <Thread3.lto_priv.73+0x1e>

    chMtxLock(&CardIDMutex);
    if(state==ACTIVE){
       if (MifareCheck(&RFID1, &CardID) == MIFARE_OK) {

           if(codeIndex(&codes,&CardID)!=-1){
 8002f52:	f000 fbc5 	bl	80036e0 <codeIndex.constprop.0>
 8002f56:	3001      	adds	r0, #1
             state=GOING_UP_AUTOMATIC;

             lcdWriteString(&LCDD1, "Accesso Valido. ", 0);
 8002f58:	4631      	mov	r1, r6
    chMtxLock(&CardIDMutex);
    if(state==ACTIVE){
       if (MifareCheck(&RFID1, &CardID) == MIFARE_OK) {

           if(codeIndex(&codes,&CardID)!=-1){
             state=GOING_UP_AUTOMATIC;
 8002f5a:	f04f 0303 	mov.w	r3, #3

             lcdWriteString(&LCDD1, "Accesso Valido. ", 0);
 8002f5e:	480b      	ldr	r0, [pc, #44]	; (8002f8c <Thread3.lto_priv.73+0x8c>)
           }

           else{


             lcdWriteString(&LCDD1, "Accesso Negato. ", 0);
 8002f60:	bf0a      	itet	eq
 8002f62:	480b      	ldreq	r0, [pc, #44]	; (8002f90 <Thread3.lto_priv.73+0x90>)
    chMtxLock(&CardIDMutex);
    if(state==ACTIVE){
       if (MifareCheck(&RFID1, &CardID) == MIFARE_OK) {

           if(codeIndex(&codes,&CardID)!=-1){
             state=GOING_UP_AUTOMATIC;
 8002f64:	f888 3000 	strbne.w	r3, [r8]
           }

           else{


             lcdWriteString(&LCDD1, "Accesso Negato. ", 0);
 8002f68:	4631      	moveq	r1, r6
 8002f6a:	f7ff fd09 	bl	8002980 <lcdWriteString.constprop.21>
             lcdWriteString(&LCDD1, "CAS17           ",40);
 8002f6e:	4809      	ldr	r0, [pc, #36]	; (8002f94 <Thread3.lto_priv.73+0x94>)
 8002f70:	2128      	movs	r1, #40	; 0x28
 8002f72:	f7ff fd05 	bl	8002980 <lcdWriteString.constprop.21>
 8002f76:	e7cc      	b.n	8002f12 <Thread3.lto_priv.73+0x12>
 8002f78:	20001138 	.word	0x20001138
 8002f7c:	200012f6 	.word	0x200012f6
 8002f80:	08003d40 	.word	0x08003d40
 8002f84:	200013d8 	.word	0x200013d8
 8002f88:	20000864 	.word	0x20000864
 8002f8c:	08003d50 	.word	0x08003d50
 8002f90:	08003d64 	.word	0x08003d64
 8002f94:	08003c5c 	.word	0x08003c5c
	...

08002fa0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002fa0:	b40e      	push	{r1, r2, r3}
 8002fa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	ad0f      	add	r5, sp, #60	; 0x3c
 8002faa:	f10d 030d 	add.w	r3, sp, #13
 8002fae:	f855 9b04 	ldr.w	r9, [r5], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002fb2:	9502      	str	r5, [sp, #8]
 8002fb4:	aa03      	add	r2, sp, #12
 8002fb6:	1a9b      	subs	r3, r3, r2
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002fb8:	4682      	mov	sl, r0
 8002fba:	9301      	str	r3, [sp, #4]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002fbc:	f04f 0800 	mov.w	r8, #0
 8002fc0:	46cb      	mov	fp, r9
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002fc2:	f89b 1000 	ldrb.w	r1, [fp]
 8002fc6:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8002fca:	b179      	cbz	r1, 8002fec <chprintf+0x4c>
      return n;
    if (c != '%') {
 8002fcc:	2925      	cmp	r1, #37	; 0x25
 8002fce:	d013      	beq.n	8002ff8 <chprintf+0x58>
      streamPut(chp, (uint8_t)c);
 8002fd0:	f8da 2000 	ldr.w	r2, [sl]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002fd4:	469b      	mov	fp, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	4650      	mov	r0, sl
 8002fda:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002fdc:	f89b 1000 	ldrb.w	r1, [fp]
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
 8002fe0:	f108 0801 	add.w	r8, r8, #1
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002fe4:	f10b 0301 	add.w	r3, fp, #1
    if (c == 0)
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d1ef      	bne.n	8002fcc <chprintf+0x2c>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002fec:	4640      	mov	r0, r8
 8002fee:	b006      	add	sp, #24
 8002ff0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff4:	b003      	add	sp, #12
 8002ff6:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002ff8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8002ffc:	2a2d      	cmp	r2, #45	; 0x2d
 8002ffe:	bf03      	ittte	eq
 8003000:	f89b 2002 	ldrbeq.w	r2, [fp, #2]
      fmt++;
 8003004:	f10b 0302 	addeq.w	r3, fp, #2
      left_align = TRUE;
 8003008:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 800300c:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8003010:	2a30      	cmp	r2, #48	; 0x30
 8003012:	bf03      	ittte	eq
 8003014:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8003016:	3301      	addeq	r3, #1
      filler = '0';
 8003018:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 800301a:	2720      	movne	r7, #32
 800301c:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 800301e:	2600      	movs	r6, #0
 8003020:	e006      	b.n	8003030 <chprintf+0x90>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8003022:	782b      	ldrb	r3, [r5, #0]
 8003024:	3504      	adds	r5, #4
 8003026:	f89b 2000 	ldrb.w	r2, [fp]
      else
        break;
      width = width * 10 + c;
 800302a:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 800302e:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8003030:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8003038:	468b      	mov	fp, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 800303a:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 800303e:	d9f2      	bls.n	8003026 <chprintf+0x86>
        c -= '0';
      else if (c == '*')
 8003040:	2a2a      	cmp	r2, #42	; 0x2a
 8003042:	d0ee      	beq.n	8003022 <chprintf+0x82>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8003044:	2a2e      	cmp	r2, #46	; 0x2e
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	d043      	beq.n	80030d4 <chprintf+0x134>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800304c:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8003050:	2b4c      	cmp	r3, #76	; 0x4c
 8003052:	d04e      	beq.n	80030f2 <chprintf+0x152>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003054:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8003058:	2834      	cmp	r0, #52	; 0x34
 800305a:	f200 80f7 	bhi.w	800324c <chprintf+0x2ac>
 800305e:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003062:	00ea      	.short	0x00ea
 8003064:	00f500f5 	.word	0x00f500f5
 8003068:	00f500f5 	.word	0x00f500f5
 800306c:	00f500ea 	.word	0x00f500ea
 8003070:	00f500f5 	.word	0x00f500f5
 8003074:	00f500f5 	.word	0x00f500f5
 8003078:	00f500e8 	.word	0x00f500e8
 800307c:	00f500f5 	.word	0x00f500f5
 8003080:	00f500f5 	.word	0x00f500f5
 8003084:	00f500dd 	.word	0x00f500dd
 8003088:	00f200f5 	.word	0x00f200f5
 800308c:	00f500f5 	.word	0x00f500f5
 8003090:	00f500f5 	.word	0x00f500f5
 8003094:	00f500f5 	.word	0x00f500f5
 8003098:	00f500f5 	.word	0x00f500f5
 800309c:	00f500f5 	.word	0x00f500f5
 80030a0:	00ea00a1 	.word	0x00ea00a1
 80030a4:	00f500f5 	.word	0x00f500f5
 80030a8:	00f500f5 	.word	0x00f500f5
 80030ac:	00f500ea 	.word	0x00f500ea
 80030b0:	00f500f5 	.word	0x00f500f5
 80030b4:	00f500f5 	.word	0x00f500f5
 80030b8:	00f500e8 	.word	0x00f500e8
 80030bc:	00f500f5 	.word	0x00f500f5
 80030c0:	00f50071 	.word	0x00f50071
 80030c4:	00f500dd 	.word	0x00f500dd
 80030c8:	00f200f5 	.word	0x00f200f5
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 80030cc:	782b      	ldrb	r3, [r5, #0]
 80030ce:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 80030d0:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 80030d4:	f81b 2b01 	ldrb.w	r2, [fp], #1
        if (c >= '0' && c <= '9')
 80030d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 80030e0:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 80030e4:	d9f4      	bls.n	80030d0 <chprintf+0x130>
          c -= '0';
        else if (c == '*')
 80030e6:	2a2a      	cmp	r2, #42	; 0x2a
 80030e8:	d0f0      	beq.n	80030cc <chprintf+0x12c>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80030ea:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 80030ee:	2b4c      	cmp	r3, #76	; 0x4c
 80030f0:	d1b0      	bne.n	8003054 <chprintf+0xb4>
      is_long = TRUE;
      if (*fmt)
 80030f2:	f89b 3000 	ldrb.w	r3, [fp]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80a8 	beq.w	800324c <chprintf+0x2ac>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80030fc:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8003100:	f10b 0b01 	add.w	fp, fp, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003104:	2a34      	cmp	r2, #52	; 0x34
 8003106:	f200 80a0 	bhi.w	800324a <chprintf+0x2aa>
 800310a:	e8df f002 	tbb	[pc, r2]
 800310e:	9e94      	.short	0x9e94
 8003110:	949e9e9e 	.word	0x949e9e9e
 8003114:	9e9e9e9e 	.word	0x9e9e9e9e
 8003118:	9e9e929e 	.word	0x9e9e929e
 800311c:	879e9e9e 	.word	0x879e9e9e
 8003120:	9e9c9e9e 	.word	0x9e9c9e9e
 8003124:	9e9e9e9e 	.word	0x9e9e9e9e
 8003128:	9e9e9e9e 	.word	0x9e9e9e9e
 800312c:	9e944b9e 	.word	0x9e944b9e
 8003130:	949e9e9e 	.word	0x949e9e9e
 8003134:	9e9e9e9e 	.word	0x9e9e9e9e
 8003138:	9e9e929e 	.word	0x9e9e929e
 800313c:	879e1b9e 	.word	0x879e1b9e
 8003140:	9e9e      	.short	0x9e9e
 8003142:	9c          	.byte	0x9c
 8003143:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8003144:	682c      	ldr	r4, [r5, #0]
        s = "(null)";
 8003146:	4b5a      	ldr	r3, [pc, #360]	; (80032b0 <chprintf+0x310>)
 8003148:	2c00      	cmp	r4, #0
 800314a:	bf08      	it	eq
 800314c:	461c      	moveq	r4, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 800314e:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003150:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8003152:	2900      	cmp	r1, #0
 8003154:	f000 8094 	beq.w	8003280 <chprintf+0x2e0>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8096 	beq.w	800328a <chprintf+0x2ea>
 800315e:	3901      	subs	r1, #1
 8003160:	4620      	mov	r0, r4
 8003162:	e001      	b.n	8003168 <chprintf+0x1c8>
 8003164:	3901      	subs	r1, #1
 8003166:	d403      	bmi.n	8003170 <chprintf+0x1d0>
 8003168:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f9      	bne.n	8003164 <chprintf+0x1c4>
 8003170:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8003172:	1a36      	subs	r6, r6, r0
 8003174:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8003176:	2720      	movs	r7, #32
 8003178:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800317c:	f1b9 0f00 	cmp.w	r9, #0
 8003180:	d01f      	beq.n	80031c2 <chprintf+0x222>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003182:	2b00      	cmp	r3, #0
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	da34      	bge.n	80031f2 <chprintf+0x252>
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8003188:	2e00      	cmp	r6, #0
 800318a:	f43f af1a 	beq.w	8002fc2 <chprintf+0x22>
 800318e:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
 8003190:	f8da 3000 	ldr.w	r3, [sl]
 8003194:	4650      	mov	r0, sl
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4639      	mov	r1, r7
 800319a:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800319c:	3c01      	subs	r4, #1
 800319e:	d1f7      	bne.n	8003190 <chprintf+0x1f0>
 80031a0:	44b0      	add	r8, r6
 80031a2:	e70e      	b.n	8002fc2 <chprintf+0x22>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	f88d 300c 	strb.w	r3, [sp, #12]
 80031aa:	9b01      	ldr	r3, [sp, #4]
 80031ac:	3504      	adds	r5, #4
 80031ae:	4618      	mov	r0, r3
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80031b0:	2720      	movs	r7, #32
 80031b2:	3b01      	subs	r3, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80031b4:	ac03      	add	r4, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 80031b6:	1a36      	subs	r6, r6, r0
 80031b8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 80031bc:	f1b9 0f00 	cmp.w	r9, #0
 80031c0:	d1df      	bne.n	8003182 <chprintf+0x1e2>
 80031c2:	9300      	str	r3, [sp, #0]
      width = -width;
 80031c4:	f1c6 0900 	rsb	r9, r6, #0
    if (width < 0) {
 80031c8:	f1b9 0f00 	cmp.w	r9, #0
 80031cc:	d045      	beq.n	800325a <chprintf+0x2ba>
      if (*s == '-' && filler == '0') {
 80031ce:	7821      	ldrb	r1, [r4, #0]
 80031d0:	292d      	cmp	r1, #45	; 0x2d
 80031d2:	d047      	beq.n	8003264 <chprintf+0x2c4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 80031d4:	464e      	mov	r6, r9
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 80031d6:	f8da 3000 	ldr.w	r3, [sl]
 80031da:	4650      	mov	r0, sl
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4639      	mov	r1, r7
 80031e0:	4798      	blx	r3
        n++;
      } while (++width != 0);
 80031e2:	3601      	adds	r6, #1
 80031e4:	d1f7      	bne.n	80031d6 <chprintf+0x236>
    }
    while (--i >= 0) {
 80031e6:	9b00      	ldr	r3, [sp, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	ebc9 0808 	rsb	r8, r9, r8
 80031ee:	f6ff aee8 	blt.w	8002fc2 <chprintf+0x22>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80031f2:	f8dd 9000 	ldr.w	r9, [sp]
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 80031f6:	f8da 3000 	ldr.w	r3, [sl]
 80031fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031fe:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003200:	f109 39ff 	add.w	r9, r9, #4294967295
      streamPut(chp, (uint8_t)*s++);
 8003204:	4650      	mov	r0, sl
 8003206:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003208:	f1b9 3fff 	cmp.w	r9, #4294967295
 800320c:	d1f3      	bne.n	80031f6 <chprintf+0x256>
 800320e:	9b00      	ldr	r3, [sp, #0]
 8003210:	f108 0801 	add.w	r8, r8, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	bfa8      	it	ge
 8003218:	4498      	addge	r8, r3
 800321a:	e7b5      	b.n	8003188 <chprintf+0x1e8>
 800321c:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800321e:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003220:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8003222:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003224:	f7ff fac4 	bl	80027b0 <long_to_string_with_divisor.constprop.29>
 8003228:	ab03      	add	r3, sp, #12
 800322a:	1ac0      	subs	r0, r0, r3
 800322c:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800322e:	ac03      	add	r4, sp, #12
 8003230:	e7c1      	b.n	80031b6 <chprintf+0x216>
 8003232:	2208      	movs	r2, #8
 8003234:	e7f3      	b.n	800321e <chprintf+0x27e>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8003236:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 8003238:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 800323a:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 800323e:	db2e      	blt.n	800329e <chprintf+0x2fe>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8003240:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8003242:	220a      	movs	r2, #10
 8003244:	e7ee      	b.n	8003224 <chprintf+0x284>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8003246:	2210      	movs	r2, #16
 8003248:	e7e9      	b.n	800321e <chprintf+0x27e>
 800324a:	461a      	mov	r2, r3
 800324c:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 800324e:	f88d 200c 	strb.w	r2, [sp, #12]
 8003252:	4618      	mov	r0, r3
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8003254:	ac03      	add	r4, sp, #12
 8003256:	3b01      	subs	r3, #1
 8003258:	e7ad      	b.n	80031b6 <chprintf+0x216>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 800325a:	9b00      	ldr	r3, [sp, #0]
 800325c:	2b00      	cmp	r3, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 800325e:	464e      	mov	r6, r9
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8003260:	dac7      	bge.n	80031f2 <chprintf+0x252>
 8003262:	e6ae      	b.n	8002fc2 <chprintf+0x22>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8003264:	2f30      	cmp	r7, #48	; 0x30
 8003266:	d1b5      	bne.n	80031d4 <chprintf+0x234>
        streamPut(chp, (uint8_t)*s++);
 8003268:	f8da 3000 	ldr.w	r3, [sl]
 800326c:	4650      	mov	r0, sl
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4798      	blx	r3
 8003272:	9b00      	ldr	r3, [sp, #0]
 8003274:	3b01      	subs	r3, #1
 8003276:	3401      	adds	r4, #1
        n++;
 8003278:	f108 0801 	add.w	r8, r8, #1
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	e7a9      	b.n	80031d4 <chprintf+0x234>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003280:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8003284:	2b00      	cmp	r3, #0
 8003286:	f47f af6b 	bne.w	8003160 <chprintf+0x1c0>
 800328a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800328e:	f1b9 0f00 	cmp.w	r9, #0
 8003292:	d10b      	bne.n	80032ac <chprintf+0x30c>
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2720      	movs	r7, #32
 800329c:	e792      	b.n	80031c4 <chprintf+0x224>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800329e:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 80032a0:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 80032a2:	f88d 300c 	strb.w	r3, [sp, #12]
 80032a6:	f10d 000d 	add.w	r0, sp, #13
 80032aa:	e7ca      	b.n	8003242 <chprintf+0x2a2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 80032ac:	2720      	movs	r7, #32
 80032ae:	e76b      	b.n	8003188 <chprintf+0x1e8>
 80032b0:	08003d78 	.word	0x08003d78
	...

080032c0 <cmd_manual.lto_priv.96>:
  }
}

static void cmd_manual(BaseSequentialStream *chp, int argc, char *argv[]){
  (void)argv;
  if (argc > 0) {
 80032c0:	2900      	cmp	r1, #0
 80032c2:	dd02      	ble.n	80032ca <cmd_manual.lto_priv.96+0xa>
    chprintf(chp, "Usage: addcard\r\n");
 80032c4:	4902      	ldr	r1, [pc, #8]	; (80032d0 <cmd_manual.lto_priv.96+0x10>)
 80032c6:	f7ff be6b 	b.w	8002fa0 <chprintf>
    return;
  }
  chprintf(chp,"addcard: aggiunge una nuova carta al sistema di accessi\r\nrmvcard: rimuove una carta dal sistema di accessi\n\rcodes: mostra tutti i codici al momento autorizzati\n\r");
 80032ca:	4902      	ldr	r1, [pc, #8]	; (80032d4 <cmd_manual.lto_priv.96+0x14>)
 80032cc:	f7ff be68 	b.w	8002fa0 <chprintf>
 80032d0:	08003d80 	.word	0x08003d80
 80032d4:	08003d94 	.word	0x08003d94
	...

080032e0 <cmd_addcard.lto_priv.93>:
}


static void cmd_addcard(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
 80032e0:	2900      	cmp	r1, #0
 80032e2:	dc25      	bgt.n	8003330 <cmd_addcard.lto_priv.93+0x50>
    chprintf(chp,"\r\n");
  }
}


static void cmd_addcard(BaseSequentialStream *chp, int argc, char *argv[]) {
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    chprintf(chp, "Usage: addcard\r\n");

    return;
  }

  if(codes.size==MAX_ID_NUM){
 80032e6:	4d24      	ldr	r5, [pc, #144]	; (8003378 <cmd_addcard.lto_priv.93+0x98>)
 80032e8:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
 80032ec:	2a14      	cmp	r2, #20
 80032ee:	d022      	beq.n	8003336 <cmd_addcard.lto_priv.93+0x56>
 80032f0:	4604      	mov	r4, r0
    chprintf(chp,"\r\n Numero massimo di carte raggiunto.");
  }

  else{
  chMtxLock(&CardIDMutex);
 80032f2:	4822      	ldr	r0, [pc, #136]	; (800337c <cmd_addcard.lto_priv.93+0x9c>)
 80032f4:	f7fd feb4 	bl	8001060 <chMtxLock>
  chprintf(chp, "\r\n\Avvicinare la carta al lettore.\r\n");
 80032f8:	4620      	mov	r0, r4
 80032fa:	4921      	ldr	r1, [pc, #132]	; (8003380 <cmd_addcard.lto_priv.93+0xa0>)
 80032fc:	f7ff fe50 	bl	8002fa0 <chprintf>
  while(MifareCheck(&RFID1, &CardID) != MIFARE_OK){
 8003300:	f000 f996 	bl	8003630 <MifareCheck.constprop.5>
 8003304:	2800      	cmp	r0, #0
 8003306:	d1fb      	bne.n	8003300 <cmd_addcard.lto_priv.93+0x20>
  }
  if(codeIndex(&codes,&CardID)==-1){
 8003308:	f000 f9ea 	bl	80036e0 <codeIndex.constprop.0>
 800330c:	3001      	adds	r0, #1
 800330e:	d017      	beq.n	8003340 <cmd_addcard.lto_priv.93+0x60>
          codes.validId[codes.size]=CardID;
          codes.size++;
          chprintf(chp, "\r\n\Carta inserita correttamente.\r\n");
  }
  else{
    chprintf(chp,"\r\nCarta gia' presente\r\n");
 8003310:	4620      	mov	r0, r4
 8003312:	491c      	ldr	r1, [pc, #112]	; (8003384 <cmd_addcard.lto_priv.93+0xa4>)
 8003314:	4e1c      	ldr	r6, [pc, #112]	; (8003388 <cmd_addcard.lto_priv.93+0xa8>)
 8003316:	f7ff fe43 	bl	8002fa0 <chprintf>
  }
  while(MifareCheck(&RFID1, &CardID) == MIFARE_OK){
 800331a:	f000 f989 	bl	8003630 <MifareCheck.constprop.5>
 800331e:	2800      	cmp	r0, #0
 8003320:	d0fb      	beq.n	800331a <cmd_addcard.lto_priv.93+0x3a>
  }
  CardID.size=0;
 8003322:	2300      	movs	r3, #0
 8003324:	7033      	strb	r3, [r6, #0]

  chMtxUnlock(&CardIDMutex);
 8003326:	4815      	ldr	r0, [pc, #84]	; (800337c <cmd_addcard.lto_priv.93+0x9c>)
  }
}
 8003328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  }
  while(MifareCheck(&RFID1, &CardID) == MIFARE_OK){
  }
  CardID.size=0;

  chMtxUnlock(&CardIDMutex);
 800332c:	f7fd be18 	b.w	8000f60 <chMtxUnlock>


static void cmd_addcard(BaseSequentialStream *chp, int argc, char *argv[]) {
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: addcard\r\n");
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <cmd_addcard.lto_priv.93+0xac>)
 8003332:	f7ff be35 	b.w	8002fa0 <chprintf>

    return;
  }

  if(codes.size==MAX_ID_NUM){
    chprintf(chp,"\r\n Numero massimo di carte raggiunto.");
 8003336:	4916      	ldr	r1, [pc, #88]	; (8003390 <cmd_addcard.lto_priv.93+0xb0>)
  }
  CardID.size=0;

  chMtxUnlock(&CardIDMutex);
  }
}
 8003338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

    return;
  }

  if(codes.size==MAX_ID_NUM){
    chprintf(chp,"\r\n Numero massimo di carte raggiunto.");
 800333c:	f7ff be30 	b.w	8002fa0 <chprintf>
  chMtxLock(&CardIDMutex);
  chprintf(chp, "\r\n\Avvicinare la carta al lettore.\r\n");
  while(MifareCheck(&RFID1, &CardID) != MIFARE_OK){
  }
  if(codeIndex(&codes,&CardID)==-1){
          codes.validId[codes.size]=CardID;
 8003340:	f895 30dc 	ldrb.w	r3, [r5, #220]	; 0xdc
 8003344:	4e10      	ldr	r6, [pc, #64]	; (8003388 <cmd_addcard.lto_priv.93+0xa8>)
 8003346:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800334a:	4632      	mov	r2, r6
 800334c:	ca03      	ldmia	r2!, {r0, r1}
 800334e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8003352:	eb05 0e07 	add.w	lr, r5, r7
 8003356:	51e8      	str	r0, [r5, r7]
          codes.size++;
 8003358:	3301      	adds	r3, #1
  chMtxLock(&CardIDMutex);
  chprintf(chp, "\r\n\Avvicinare la carta al lettore.\r\n");
  while(MifareCheck(&RFID1, &CardID) != MIFARE_OK){
  }
  if(codeIndex(&codes,&CardID)==-1){
          codes.validId[codes.size]=CardID;
 800335a:	8817      	ldrh	r7, [r2, #0]
 800335c:	f8ce 1004 	str.w	r1, [lr, #4]
 8003360:	7892      	ldrb	r2, [r2, #2]
          codes.size++;
          chprintf(chp, "\r\n\Carta inserita correttamente.\r\n");
 8003362:	490c      	ldr	r1, [pc, #48]	; (8003394 <cmd_addcard.lto_priv.93+0xb4>)
  chprintf(chp, "\r\n\Avvicinare la carta al lettore.\r\n");
  while(MifareCheck(&RFID1, &CardID) != MIFARE_OK){
  }
  if(codeIndex(&codes,&CardID)==-1){
          codes.validId[codes.size]=CardID;
          codes.size++;
 8003364:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
          chprintf(chp, "\r\n\Carta inserita correttamente.\r\n");
 8003368:	4620      	mov	r0, r4
  chMtxLock(&CardIDMutex);
  chprintf(chp, "\r\n\Avvicinare la carta al lettore.\r\n");
  while(MifareCheck(&RFID1, &CardID) != MIFARE_OK){
  }
  if(codeIndex(&codes,&CardID)==-1){
          codes.validId[codes.size]=CardID;
 800336a:	f8ae 7008 	strh.w	r7, [lr, #8]
 800336e:	f88e 200a 	strb.w	r2, [lr, #10]
          codes.size++;
          chprintf(chp, "\r\n\Carta inserita correttamente.\r\n");
 8003372:	f7ff fe15 	bl	8002fa0 <chprintf>
 8003376:	e7d0      	b.n	800331a <cmd_addcard.lto_priv.93+0x3a>
 8003378:	200012f8 	.word	0x200012f8
 800337c:	20000864 	.word	0x20000864
 8003380:	08003e60 	.word	0x08003e60
 8003384:	08003ea8 	.word	0x08003ea8
 8003388:	200013d8 	.word	0x200013d8
 800338c:	08003d80 	.word	0x08003d80
 8003390:	08003e38 	.word	0x08003e38
 8003394:	08003e84 	.word	0x08003e84
	...

080033a0 <cmd_codes.lto_priv.95>:

static void cmd_codes(BaseSequentialStream *chp, int argc, char *argv[]){
  uint8_t i;
  uint8_t j;
  (void)argv;
  if (argc > 0) {
 80033a0:	2900      	cmp	r1, #0
 80033a2:	dc31      	bgt.n	8003408 <cmd_codes.lto_priv.95+0x68>
  chMtxUnlock(&CardIDMutex);

}


static void cmd_codes(BaseSequentialStream *chp, int argc, char *argv[]){
 80033a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (argc > 0) {
    chprintf(chp, "Usage: codes\r\n");
    return;
  }

  for(i=0;i<codes.size;i++){
 80033a8:	4e19      	ldr	r6, [pc, #100]	; (8003410 <cmd_codes.lto_priv.95+0x70>)
 80033aa:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
 80033ae:	b34b      	cbz	r3, 8003404 <cmd_codes.lto_priv.95+0x64>
 80033b0:	4680      	mov	r8, r0
 80033b2:	f04f 0900 	mov.w	r9, #0
    chprintf(chp,"Codice %d: ", i);
    for(j=0;j<codes.validId[i].size;j++){
 80033b6:	eb09 0589 	add.w	r5, r9, r9, lsl #2
 80033ba:	eb09 0545 	add.w	r5, r9, r5, lsl #1
    chprintf(chp, "Usage: codes\r\n");
    return;
  }

  for(i=0;i<codes.size;i++){
    chprintf(chp,"Codice %d: ", i);
 80033be:	4640      	mov	r0, r8
 80033c0:	4914      	ldr	r1, [pc, #80]	; (8003414 <cmd_codes.lto_priv.95+0x74>)
 80033c2:	464a      	mov	r2, r9
 80033c4:	f7ff fdec 	bl	8002fa0 <chprintf>
    for(j=0;j<codes.validId[i].size;j++){
 80033c8:	5d73      	ldrb	r3, [r6, r5]
 80033ca:	1977      	adds	r7, r6, r5
 80033cc:	2400      	movs	r4, #0
 80033ce:	b15b      	cbz	r3, 80033e8 <cmd_codes.lto_priv.95+0x48>
      chprintf(chp,"%d",codes.validId[i].bytes[j]);
 80033d0:	192b      	adds	r3, r5, r4
 80033d2:	4433      	add	r3, r6
 80033d4:	4640      	mov	r0, r8
 80033d6:	785a      	ldrb	r2, [r3, #1]
 80033d8:	490f      	ldr	r1, [pc, #60]	; (8003418 <cmd_codes.lto_priv.95+0x78>)
 80033da:	f7ff fde1 	bl	8002fa0 <chprintf>
    return;
  }

  for(i=0;i<codes.size;i++){
    chprintf(chp,"Codice %d: ", i);
    for(j=0;j<codes.validId[i].size;j++){
 80033de:	3401      	adds	r4, #1
 80033e0:	783b      	ldrb	r3, [r7, #0]
 80033e2:	b2e4      	uxtb	r4, r4
 80033e4:	42a3      	cmp	r3, r4
 80033e6:	d8f3      	bhi.n	80033d0 <cmd_codes.lto_priv.95+0x30>
      chprintf(chp,"%d",codes.validId[i].bytes[j]);
    }
    chprintf(chp,"\r\n");
 80033e8:	4640      	mov	r0, r8
 80033ea:	490c      	ldr	r1, [pc, #48]	; (800341c <cmd_codes.lto_priv.95+0x7c>)
 80033ec:	f7ff fdd8 	bl	8002fa0 <chprintf>
  if (argc > 0) {
    chprintf(chp, "Usage: codes\r\n");
    return;
  }

  for(i=0;i<codes.size;i++){
 80033f0:	f109 0901 	add.w	r9, r9, #1
 80033f4:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
 80033f8:	fa5f f989 	uxtb.w	r9, r9
 80033fc:	454b      	cmp	r3, r9
 80033fe:	d8da      	bhi.n	80033b6 <cmd_codes.lto_priv.95+0x16>
 8003400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
static void cmd_codes(BaseSequentialStream *chp, int argc, char *argv[]){
  uint8_t i;
  uint8_t j;
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: codes\r\n");
 8003408:	4905      	ldr	r1, [pc, #20]	; (8003420 <cmd_codes.lto_priv.95+0x80>)
 800340a:	f7ff bdc9 	b.w	8002fa0 <chprintf>
 800340e:	bf00      	nop
 8003410:	200012f8 	.word	0x200012f8
 8003414:	08003ec0 	.word	0x08003ec0
 8003418:	08003ecc 	.word	0x08003ecc
 800341c:	08003f14 	.word	0x08003f14
 8003420:	08003ed0 	.word	0x08003ed0
	...

08003430 <cmd_rmvcard.lto_priv.94>:
static void cmd_rmvcard(BaseSequentialStream *chp, int argc, char *argv[]){

  int8_t i;
  int8_t j;
  (void)argv;
  if (argc > 0) {
 8003430:	2900      	cmp	r1, #0
 8003432:	dd02      	ble.n	800343a <cmd_rmvcard.lto_priv.94+0xa>
    chprintf(chp, "Usage: rmvcard\r\n");
 8003434:	4925      	ldr	r1, [pc, #148]	; (80034cc <cmd_rmvcard.lto_priv.94+0x9c>)
 8003436:	f7ff bdb3 	b.w	8002fa0 <chprintf>
#define SHELL_WA_SIZE   THD_WORKING_AREA_SIZE(2048)
#define TEST_WA_SIZE    THD_WORKING_AREA_SIZE(256)



static void cmd_rmvcard(BaseSequentialStream *chp, int argc, char *argv[]){
 800343a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343c:	4604      	mov	r4, r0
  (void)argv;
  if (argc > 0) {
    chprintf(chp, "Usage: rmvcard\r\n");
    return;
  }
  chMtxLock(&CardIDMutex);
 800343e:	4824      	ldr	r0, [pc, #144]	; (80034d0 <cmd_rmvcard.lto_priv.94+0xa0>)
 8003440:	f7fd fe0e 	bl	8001060 <chMtxLock>
  chprintf(chp, "\r\n\Avvicinare la carta al lettore.\r\n");
 8003444:	4620      	mov	r0, r4
 8003446:	4923      	ldr	r1, [pc, #140]	; (80034d4 <cmd_rmvcard.lto_priv.94+0xa4>)
 8003448:	f7ff fdaa 	bl	8002fa0 <chprintf>
  while(MifareCheck(&RFID1, &CardID) != MIFARE_OK){
 800344c:	f000 f8f0 	bl	8003630 <MifareCheck.constprop.5>
 8003450:	2800      	cmp	r0, #0
 8003452:	d1fb      	bne.n	800344c <cmd_rmvcard.lto_priv.94+0x1c>
    }

  i=codeIndex(&codes,&CardID);
 8003454:	f000 f944 	bl	80036e0 <codeIndex.constprop.0>

  if(i!=-1){
 8003458:	1c43      	adds	r3, r0, #1
 800345a:	d031      	beq.n	80034c0 <cmd_rmvcard.lto_priv.94+0x90>
      codes.size-=1;
 800345c:	4e1e      	ldr	r6, [pc, #120]	; (80034d8 <cmd_rmvcard.lto_priv.94+0xa8>)
 800345e:	f896 70dc 	ldrb.w	r7, [r6, #220]	; 0xdc
 8003462:	3f01      	subs	r7, #1
 8003464:	b2ff      	uxtb	r7, r7
      for(j=i;j<codes.size;j++){
 8003466:	42b8      	cmp	r0, r7
    }

  i=codeIndex(&codes,&CardID);

  if(i!=-1){
      codes.size-=1;
 8003468:	f886 70dc 	strb.w	r7, [r6, #220]	; 0xdc
      for(j=i;j<codes.size;j++){
 800346c:	4602      	mov	r2, r0
 800346e:	da17      	bge.n	80034a0 <cmd_rmvcard.lto_priv.94+0x70>
          codes.validId[j]=codes.validId[j+1];
 8003470:	1c53      	adds	r3, r2, #1
 8003472:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003476:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800347a:	4433      	add	r3, r6
 800347c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8003480:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	685d      	ldr	r5, [r3, #4]
 8003488:	50b1      	str	r1, [r6, r2]
 800348a:	3001      	adds	r0, #1
 800348c:	18b1      	adds	r1, r6, r2
 800348e:	b2c0      	uxtb	r0, r0
 8003490:	604d      	str	r5, [r1, #4]

  i=codeIndex(&codes,&CardID);

  if(i!=-1){
      codes.size-=1;
      for(j=i;j<codes.size;j++){
 8003492:	b242      	sxtb	r2, r0
          codes.validId[j]=codes.validId[j+1];
 8003494:	891d      	ldrh	r5, [r3, #8]
 8003496:	7a9b      	ldrb	r3, [r3, #10]
 8003498:	728b      	strb	r3, [r1, #10]

  i=codeIndex(&codes,&CardID);

  if(i!=-1){
      codes.size-=1;
      for(j=i;j<codes.size;j++){
 800349a:	42ba      	cmp	r2, r7
          codes.validId[j]=codes.validId[j+1];
 800349c:	810d      	strh	r5, [r1, #8]

  i=codeIndex(&codes,&CardID);

  if(i!=-1){
      codes.size-=1;
      for(j=i;j<codes.size;j++){
 800349e:	dbe7      	blt.n	8003470 <cmd_rmvcard.lto_priv.94+0x40>
          codes.validId[j]=codes.validId[j+1];
      }
      chprintf(chp, "\r\n\Carta eliminata correttamente.\r\n");
 80034a0:	4620      	mov	r0, r4
 80034a2:	490e      	ldr	r1, [pc, #56]	; (80034dc <cmd_rmvcard.lto_priv.94+0xac>)
 80034a4:	f7ff fd7c 	bl	8002fa0 <chprintf>
  }
  else{
    chprintf(chp, "\r\n\Carta non presente nel sistema.\r\n");
  }

  while(MifareCheck(&RFID1, &CardID) == MIFARE_OK){
 80034a8:	f000 f8c2 	bl	8003630 <MifareCheck.constprop.5>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d0fb      	beq.n	80034a8 <cmd_rmvcard.lto_priv.94+0x78>
    }
  CardID.size = 0;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <cmd_rmvcard.lto_priv.94+0xb0>)

  chMtxUnlock(&CardIDMutex);
 80034b2:	4807      	ldr	r0, [pc, #28]	; (80034d0 <cmd_rmvcard.lto_priv.94+0xa0>)
    chprintf(chp, "\r\n\Carta non presente nel sistema.\r\n");
  }

  while(MifareCheck(&RFID1, &CardID) == MIFARE_OK){
    }
  CardID.size = 0;
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]

  chMtxUnlock(&CardIDMutex);

}
 80034b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  while(MifareCheck(&RFID1, &CardID) == MIFARE_OK){
    }
  CardID.size = 0;

  chMtxUnlock(&CardIDMutex);
 80034bc:	f7fd bd50 	b.w	8000f60 <chMtxUnlock>
          codes.validId[j]=codes.validId[j+1];
      }
      chprintf(chp, "\r\n\Carta eliminata correttamente.\r\n");
  }
  else{
    chprintf(chp, "\r\n\Carta non presente nel sistema.\r\n");
 80034c0:	4620      	mov	r0, r4
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <cmd_rmvcard.lto_priv.94+0xb4>)
 80034c4:	f7ff fd6c 	bl	8002fa0 <chprintf>
 80034c8:	e7ee      	b.n	80034a8 <cmd_rmvcard.lto_priv.94+0x78>
 80034ca:	bf00      	nop
 80034cc:	08003ee0 	.word	0x08003ee0
 80034d0:	20000864 	.word	0x20000864
 80034d4:	08003e60 	.word	0x08003e60
 80034d8:	200012f8 	.word	0x200012f8
 80034dc:	08003ef4 	.word	0x08003ef4
 80034e0:	200013d8 	.word	0x200013d8
 80034e4:	08003f18 	.word	0x08003f18
	...

080034f0 <MifareCalculateCRC.constprop.11>:
 *
 * @param[in] MFRC522p
 *
 * @api
 */
void MifareCalculateCRC(MFRC522Driver* mfrc522p, uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	460d      	mov	r5, r1
 80034f4:	4604      	mov	r4, r0
{
    MFRC522ClearBitMask(mfrc522p, MifareREG_DIV_IRQ, 0x04);         //CRCIrq = 0
 80034f6:	2104      	movs	r1, #4
 80034f8:	2005      	movs	r0, #5
 *
 * @param[in] MFRC522p
 *
 * @api
 */
void MifareCalculateCRC(MFRC522Driver* mfrc522p, uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
 80034fa:	4616      	mov	r6, r2
{
    MFRC522ClearBitMask(mfrc522p, MifareREG_DIV_IRQ, 0x04);         //CRCIrq = 0
 80034fc:	f7ff fb38 	bl	8002b70 <MFRC522ClearBitMask.constprop.17>
    MFRC522SetBitMask(mfrc522p, MifareREG_FIFO_LEVEL, 0x80);            //Clear the FIFO pointer
 8003500:	200a      	movs	r0, #10
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	f7ff fb24 	bl	8002b50 <MFRC522SetBitMask.constprop.18>

    //Writing data to the FIFO
    uint8_t i;
    for (i = 0; i < len; i++) {
 8003508:	b155      	cbz	r5, 8003520 <MifareCalculateCRC.constprop.11+0x30>
 800350a:	3d01      	subs	r5, #1
 800350c:	fa54 f585 	uxtab	r5, r4, r5
 8003510:	3c01      	subs	r4, #1
        MFRC522WriteRegister(mfrc522p, MifareREG_FIFO_DATA, *(pIndata+i));
 8003512:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003516:	2009      	movs	r0, #9
 8003518:	f7ff fa52 	bl	80029c0 <MFRC522WriteRegister.constprop.20>
    MFRC522ClearBitMask(mfrc522p, MifareREG_DIV_IRQ, 0x04);         //CRCIrq = 0
    MFRC522SetBitMask(mfrc522p, MifareREG_FIFO_LEVEL, 0x80);            //Clear the FIFO pointer

    //Writing data to the FIFO
    uint8_t i;
    for (i = 0; i < len; i++) {
 800351c:	42ac      	cmp	r4, r5
 800351e:	d1f8      	bne.n	8003512 <MifareCalculateCRC.constprop.11+0x22>
        MFRC522WriteRegister(mfrc522p, MifareREG_FIFO_DATA, *(pIndata+i));
    }
    MFRC522WriteRegister(mfrc522p, MifareREG_COMMAND, PCD_CALCCRC);
 8003520:	2001      	movs	r0, #1
 8003522:	2103      	movs	r1, #3
 8003524:	f7ff fa4c 	bl	80029c0 <MFRC522WriteRegister.constprop.20>

    //Wait CRC calculation is complete
    uint8_t n;
    i = 0xFF;
    do {
        n = MFRC522ReadRegister(mfrc522p, MifareREG_DIV_IRQ);
 8003528:	2005      	movs	r0, #5
 800352a:	f7ff faa9 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 800352e:	24fe      	movs	r4, #254	; 0xfe
 8003530:	4602      	mov	r2, r0
 8003532:	e006      	b.n	8003542 <MifareCalculateCRC.constprop.11+0x52>
 8003534:	f7ff faa4 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8003538:	1e63      	subs	r3, r4, #1
        i--;
    } while ((i!=0) && !(n&0x04));          //CRCIrq = 1
 800353a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff

    //Wait CRC calculation is complete
    uint8_t n;
    i = 0xFF;
    do {
        n = MFRC522ReadRegister(mfrc522p, MifareREG_DIV_IRQ);
 800353e:	4602      	mov	r2, r0
        i--;
    } while ((i!=0) && !(n&0x04));          //CRCIrq = 1
 8003540:	d003      	beq.n	800354a <MifareCalculateCRC.constprop.11+0x5a>
 8003542:	0753      	lsls	r3, r2, #29

    //Wait CRC calculation is complete
    uint8_t n;
    i = 0xFF;
    do {
        n = MFRC522ReadRegister(mfrc522p, MifareREG_DIV_IRQ);
 8003544:	f04f 0005 	mov.w	r0, #5
        i--;
    } while ((i!=0) && !(n&0x04));          //CRCIrq = 1
 8003548:	d5f4      	bpl.n	8003534 <MifareCalculateCRC.constprop.11+0x44>

    //Read CRC calculation result
    pOutData[0] = MFRC522ReadRegister(mfrc522p, MifareREG_CRC_RESULT_L);
 800354a:	2022      	movs	r0, #34	; 0x22
 800354c:	f7ff fa98 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8003550:	7030      	strb	r0, [r6, #0]
    pOutData[1] = MFRC522ReadRegister(mfrc522p, MifareREG_CRC_RESULT_M);
 8003552:	2021      	movs	r0, #33	; 0x21
 8003554:	f7ff fa94 	bl	8002a80 <MFRC522ReadRegister.constprop.19>
 8003558:	7070      	strb	r0, [r6, #1]
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	0000      	movs	r0, r0
	...

08003560 <MFRC522AntiCollisionLoop.constprop.9>:
    }

    return status;
}

uint8_t MFRC522AntiCollisionLoop(MFRC522Driver* mfrc522p, uint8_t selcommand, uint8_t* serNum)
 8003560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003564:	b08a      	sub	sp, #40	; 0x28
    uint8_t SAK = 0xff;


    command[0] = selcommand; // SEL
    command[1] = 0x20; // NVB
    status = MifareToPICC(mfrc522p, PCD_TRANSCEIVE, command, 2, cascadeLevel, sizeof(cascadeLevel), &unLen);
 8003566:	ab04      	add	r3, sp, #16
    }

    return status;
}

uint8_t MFRC522AntiCollisionLoop(MFRC522Driver* mfrc522p, uint8_t selcommand, uint8_t* serNum)
 8003568:	4604      	mov	r4, r0
 800356a:	460e      	mov	r6, r1
    uint8_t SAK = 0xff;


    command[0] = selcommand; // SEL
    command[1] = 0x20; // NVB
    status = MifareToPICC(mfrc522p, PCD_TRANSCEIVE, command, 2, cascadeLevel, sizeof(cascadeLevel), &unLen);
 800356c:	9300      	str	r3, [sp, #0]
    uint8_t command[2];
    uint8_t SAK = 0xff;


    command[0] = selcommand; // SEL
    command[1] = 0x20; // NVB
 800356e:	2520      	movs	r5, #32
    status = MifareToPICC(mfrc522p, PCD_TRANSCEIVE, command, 2, cascadeLevel, sizeof(cascadeLevel), &unLen);
 8003570:	aa05      	add	r2, sp, #20
 8003572:	a803      	add	r0, sp, #12
 8003574:	2102      	movs	r1, #2
 8003576:	2305      	movs	r3, #5
    uint8_t cascadeLevel[5];
    uint8_t command[2];
    uint8_t SAK = 0xff;


    command[0] = selcommand; // SEL
 8003578:	f88d 400c 	strb.w	r4, [sp, #12]
    command[1] = 0x20; // NVB
 800357c:	f88d 500d 	strb.w	r5, [sp, #13]
    status = MifareToPICC(mfrc522p, PCD_TRANSCEIVE, command, 2, cascadeLevel, sizeof(cascadeLevel), &unLen);
 8003580:	f7ff fb06 	bl	8002b90 <MifareToPICC.constprop.16>

    if (status == MIFARE_OK) {
 8003584:	b980      	cbnz	r0, 80035a8 <MFRC522AntiCollisionLoop.constprop.9+0x48>
        //calc bcc
        int8_t i = 0;
        for (i = 0; i < 4; i++) {
            serNumCheck ^= cascadeLevel[i];
 8003586:	f89d 8014 	ldrb.w	r8, [sp, #20]
 800358a:	f89d c015 	ldrb.w	ip, [sp, #21]
 800358e:	f89d e016 	ldrb.w	lr, [sp, #22]
 8003592:	f89d 7017 	ldrb.w	r7, [sp, #23]
        }

        if (serNumCheck != cascadeLevel[i]) {
 8003596:	f89d 5018 	ldrb.w	r5, [sp, #24]

    if (status == MIFARE_OK) {
        //calc bcc
        int8_t i = 0;
        for (i = 0; i < 4; i++) {
            serNumCheck ^= cascadeLevel[i];
 800359a:	ea88 030c 	eor.w	r3, r8, ip
 800359e:	ea83 030e 	eor.w	r3, r3, lr
 80035a2:	407b      	eors	r3, r7
        }

        if (serNumCheck != cascadeLevel[i]) {
 80035a4:	429d      	cmp	r5, r3
 80035a6:	d003      	beq.n	80035b0 <MFRC522AntiCollisionLoop.constprop.9+0x50>
    MIFARE_Status_t status;
    uint8_t serNumCheck = 0;
    uint16_t unLen;
    uint8_t cascadeLevel[5];
    uint8_t command[2];
    uint8_t SAK = 0xff;
 80035a8:	20ff      	movs	r0, #255	; 0xff
            serNum[2] = cascadeLevel[3];
        }
    }

    return SAK;
}
 80035aa:	b00a      	add	sp, #40	; 0x28
 80035ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t SAK;
    uint16_t recvBits;
    uint8_t buffer[9];

    buffer[0] = command;
    buffer[1] = 0x70;
 80035b0:	2370      	movs	r3, #112	; 0x70
    for (i = 0; i < 5; i++) {
        buffer[i+2] = *(serNum+i);
    }
    MifareCalculateCRC(mfrc522p, buffer, 7, &buffer[7]);     //??
 80035b2:	a807      	add	r0, sp, #28
 80035b4:	2107      	movs	r1, #7
 80035b6:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    uint8_t SAK;
    uint16_t recvBits;
    uint8_t buffer[9];

    buffer[0] = command;
    buffer[1] = 0x70;
 80035ba:	f88d 301d 	strb.w	r3, [sp, #29]
    MIFARE_Status_t status;
    uint8_t SAK;
    uint16_t recvBits;
    uint8_t buffer[9];

    buffer[0] = command;
 80035be:	f88d 401c 	strb.w	r4, [sp, #28]
    buffer[1] = 0x70;
    for (i = 0; i < 5; i++) {
        buffer[i+2] = *(serNum+i);
 80035c2:	f88d 801e 	strb.w	r8, [sp, #30]
 80035c6:	f88d c01f 	strb.w	ip, [sp, #31]
 80035ca:	f88d e020 	strb.w	lr, [sp, #32]
 80035ce:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80035d2:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    }
    MifareCalculateCRC(mfrc522p, buffer, 7, &buffer[7]);     //??
 80035d6:	f7ff ff8b 	bl	80034f0 <MifareCalculateCRC.constprop.11>
    status = MifareToPICC(mfrc522p, PCD_TRANSCEIVE, buffer, 9, buffer, 9, &recvBits);
 80035da:	f10d 0312 	add.w	r3, sp, #18
 80035de:	2109      	movs	r1, #9
 80035e0:	a807      	add	r0, sp, #28
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	f7ff fad2 	bl	8002b90 <MifareToPICC.constprop.16>

    if ((status == MIFARE_OK) && (recvBits == 0x18)) {
 80035ec:	b150      	cbz	r0, 8003604 <MFRC522AntiCollisionLoop.constprop.9+0xa4>
 80035ee:	20ff      	movs	r0, #255	; 0xff
                serNum[i] = cascadeLevel[i];
            }
        }
        else
        {
            serNum[0] = cascadeLevel[1];
 80035f0:	f89d 1015 	ldrb.w	r1, [sp, #21]
            serNum[1] = cascadeLevel[2];
 80035f4:	f89d 2016 	ldrb.w	r2, [sp, #22]
            serNum[2] = cascadeLevel[3];
 80035f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
                serNum[i] = cascadeLevel[i];
            }
        }
        else
        {
            serNum[0] = cascadeLevel[1];
 80035fc:	7031      	strb	r1, [r6, #0]
            serNum[1] = cascadeLevel[2];
 80035fe:	7072      	strb	r2, [r6, #1]
            serNum[2] = cascadeLevel[3];
 8003600:	70b3      	strb	r3, [r6, #2]
 8003602:	e7d2      	b.n	80035aa <MFRC522AntiCollisionLoop.constprop.9+0x4a>
        buffer[i+2] = *(serNum+i);
    }
    MifareCalculateCRC(mfrc522p, buffer, 7, &buffer[7]);     //??
    status = MifareToPICC(mfrc522p, PCD_TRANSCEIVE, buffer, 9, buffer, 9, &recvBits);

    if ((status == MIFARE_OK) && (recvBits == 0x18)) {
 8003604:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8003608:	2b18      	cmp	r3, #24
 800360a:	d1f0      	bne.n	80035ee <MFRC522AntiCollisionLoop.constprop.9+0x8e>
        SAK = buffer[0];
 800360c:	f89d 001c 	ldrb.w	r0, [sp, #28]
            status = MIFARE_ERR;
            return SAK;
        }

        SAK = MifareSelectTag(mfrc522p, selcommand, cascadeLevel);
        if ((SAK & 0x04) == 0)
 8003610:	0743      	lsls	r3, r0, #29
 8003612:	d4ed      	bmi.n	80035f0 <MFRC522AntiCollisionLoop.constprop.9+0x90>
 8003614:	1e72      	subs	r2, r6, #1
 8003616:	ab05      	add	r3, sp, #20
 8003618:	3603      	adds	r6, #3
        {
            for (i = 0; i < 4; i++)
            {
                serNum[i] = cascadeLevel[i];
 800361a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800361e:	f802 1f01 	strb.w	r1, [r2, #1]!
        }

        SAK = MifareSelectTag(mfrc522p, selcommand, cascadeLevel);
        if ((SAK & 0x04) == 0)
        {
            for (i = 0; i < 4; i++)
 8003622:	42b2      	cmp	r2, r6
 8003624:	d1f9      	bne.n	800361a <MFRC522AntiCollisionLoop.constprop.9+0xba>
 8003626:	e7c0      	b.n	80035aa <MFRC522AntiCollisionLoop.constprop.9+0x4a>
	...

08003630 <MifareCheck.constprop.5>:
 *
 * @param[in] MFRC522p
 *
 * @api
 */
MIFARE_Status_t MifareCheck(MFRC522Driver* mfrc522p, struct MifareUID* id)
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003632:	b087      	sub	sp, #28
MIFARE_Status_t MifareRequest(MFRC522Driver* mfrc522p, uint8_t reqMode, uint8_t* tagType, uint8_t tagTypeLen) {
    MIFARE_Status_t status;
    uint16_t backBits;          //The received data bits
    uint8_t request[1];

    MFRC522WriteRegister(mfrc522p, MifareREG_BIT_FRAMING, 0x07);        //TxLastBists = BitFramingReg[2..0] ???
 8003634:	200d      	movs	r0, #13
 8003636:	2107      	movs	r1, #7

    request[0] = reqMode;
 8003638:	ac06      	add	r4, sp, #24
MIFARE_Status_t MifareRequest(MFRC522Driver* mfrc522p, uint8_t reqMode, uint8_t* tagType, uint8_t tagTypeLen) {
    MIFARE_Status_t status;
    uint16_t backBits;          //The received data bits
    uint8_t request[1];

    MFRC522WriteRegister(mfrc522p, MifareREG_BIT_FRAMING, 0x07);        //TxLastBists = BitFramingReg[2..0] ???
 800363a:	f7ff f9c1 	bl	80029c0 <MFRC522WriteRegister.constprop.20>

    request[0] = reqMode;
 800363e:	2352      	movs	r3, #82	; 0x52
 8003640:	f804 3d08 	strb.w	r3, [r4, #-8]!
    status = MifareToPICC( mfrc522p, PCD_TRANSCEIVE, request, 1, tagType, tagTypeLen, &backBits);
 8003644:	ae05      	add	r6, sp, #20
 8003646:	4620      	mov	r0, r4
 8003648:	9600      	str	r6, [sp, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	aa03      	add	r2, sp, #12
 800364e:	2302      	movs	r3, #2
 8003650:	f7ff fa9e 	bl	8002b90 <MifareToPICC.constprop.16>

    if ((status != MIFARE_OK) || (backBits != 0x10)) {
 8003654:	4605      	mov	r5, r0
 8003656:	b1b0      	cbz	r0, 8003686 <MifareCheck.constprop.5+0x56>
 8003658:	2502      	movs	r5, #2
MIFARE_Status_t MifareHalt(MFRC522Driver* mfrc522p) {
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_HALT;
    buff[1] = 0;
 800365a:	2300      	movs	r3, #0
    MifareCalculateCRC(mfrc522p, buff, 2, &buff[2]);
 800365c:	4630      	mov	r0, r6
 800365e:	f10d 0216 	add.w	r2, sp, #22

MIFARE_Status_t MifareHalt(MFRC522Driver* mfrc522p) {
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_HALT;
 8003662:	2750      	movs	r7, #80	; 0x50
    buff[1] = 0;
    MifareCalculateCRC(mfrc522p, buff, 2, &buff[2]);
 8003664:	2102      	movs	r1, #2
MIFARE_Status_t MifareHalt(MFRC522Driver* mfrc522p) {
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_HALT;
    buff[1] = 0;
 8003666:	f88d 3015 	strb.w	r3, [sp, #21]

MIFARE_Status_t MifareHalt(MFRC522Driver* mfrc522p) {
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_HALT;
 800366a:	f88d 7014 	strb.w	r7, [sp, #20]
    buff[1] = 0;
    MifareCalculateCRC(mfrc522p, buff, 2, &buff[2]);
 800366e:	f7ff ff3f 	bl	80034f0 <MifareCalculateCRC.constprop.11>

    return MifareToPICC(mfrc522p, PCD_TRANSCEIVE, buff, 4, buff, 4, &unLen);
 8003672:	2104      	movs	r1, #4
 8003674:	9400      	str	r4, [sp, #0]
 8003676:	460b      	mov	r3, r1
 8003678:	4630      	mov	r0, r6
 800367a:	4632      	mov	r2, r6
 800367c:	f7ff fa88 	bl	8002b90 <MifareToPICC.constprop.16>
        status = MifareAnticoll(mfrc522p, id);
    }
    MifareHalt(mfrc522p);          //Command card into hibernation

    return status;
}
 8003680:	4628      	mov	r0, r5
 8003682:	b007      	add	sp, #28
 8003684:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MFRC522WriteRegister(mfrc522p, MifareREG_BIT_FRAMING, 0x07);        //TxLastBists = BitFramingReg[2..0] ???

    request[0] = reqMode;
    status = MifareToPICC( mfrc522p, PCD_TRANSCEIVE, request, 1, tagType, tagTypeLen, &backBits);

    if ((status != MIFARE_OK) || (backBits != 0x10)) {
 8003686:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800368a:	2b10      	cmp	r3, #16
 800368c:	d1e4      	bne.n	8003658 <MifareCheck.constprop.5+0x28>
    uint8_t SAK = 0;

    MFRC522WriteRegister(mfrc522p, MifareREG_BIT_FRAMING, 0x00);        //TxLastBists = BitFramingReg[2..0]

    // cascade level 1
    SAK = MFRC522AntiCollisionLoop(mfrc522p, PICC_ANTICOLL_CL1, id->bytes);
 800368e:	4f10      	ldr	r7, [pc, #64]	; (80036d0 <MifareCheck.constprop.5+0xa0>)

MIFARE_Status_t MifareAnticoll(MFRC522Driver* mfrc522p, struct MifareUID* id) {

    uint8_t SAK = 0;

    MFRC522WriteRegister(mfrc522p, MifareREG_BIT_FRAMING, 0x00);        //TxLastBists = BitFramingReg[2..0]
 8003690:	200d      	movs	r0, #13
 8003692:	4629      	mov	r1, r5
 8003694:	f7ff f994 	bl	80029c0 <MFRC522WriteRegister.constprop.20>

    // cascade level 1
    SAK = MFRC522AntiCollisionLoop(mfrc522p, PICC_ANTICOLL_CL1, id->bytes);
 8003698:	1c79      	adds	r1, r7, #1
 800369a:	2093      	movs	r0, #147	; 0x93
 800369c:	f7ff ff60 	bl	8003560 <MFRC522AntiCollisionLoop.constprop.9>
    if ((SAK & 0x04) == 0)
 80036a0:	0743      	lsls	r3, r0, #29
 80036a2:	d402      	bmi.n	80036aa <MifareCheck.constprop.5+0x7a>
    {
        id->size = 4;
 80036a4:	2304      	movs	r3, #4
 80036a6:	703b      	strb	r3, [r7, #0]
 80036a8:	e7d7      	b.n	800365a <MifareCheck.constprop.5+0x2a>
        return MIFARE_OK;
    }

    SAK = MFRC522AntiCollisionLoop(mfrc522p, PICC_ANTICOLL_CL2, id->bytes + 3);
 80036aa:	1d39      	adds	r1, r7, #4
 80036ac:	2095      	movs	r0, #149	; 0x95
 80036ae:	f7ff ff57 	bl	8003560 <MFRC522AntiCollisionLoop.constprop.9>
    if ((SAK & 0x04) == 0)
 80036b2:	0741      	lsls	r1, r0, #29
 80036b4:	d402      	bmi.n	80036bc <MifareCheck.constprop.5+0x8c>
    {
        id->size = 7;
 80036b6:	2307      	movs	r3, #7
 80036b8:	703b      	strb	r3, [r7, #0]
 80036ba:	e7ce      	b.n	800365a <MifareCheck.constprop.5+0x2a>
        return MIFARE_OK;
    }

    SAK = MFRC522AntiCollisionLoop(mfrc522p, PICC_ANTICOLL_CL3, id->bytes + 6);
 80036bc:	2097      	movs	r0, #151	; 0x97
 80036be:	1df9      	adds	r1, r7, #7
 80036c0:	f7ff ff4e 	bl	8003560 <MFRC522AntiCollisionLoop.constprop.9>
    if ((SAK & 0x04) != 0)
 80036c4:	0742      	lsls	r2, r0, #29
 80036c6:	d4c7      	bmi.n	8003658 <MifareCheck.constprop.5+0x28>
    {
        return MIFARE_ERR;
    }

    id->size = 10;
 80036c8:	230a      	movs	r3, #10
 80036ca:	703b      	strb	r3, [r7, #0]
 80036cc:	e7c5      	b.n	800365a <MifareCheck.constprop.5+0x2a>
 80036ce:	bf00      	nop
 80036d0:	200013d8 	.word	0x200013d8
	...

080036e0 <codeIndex.constprop.0>:
#include "rfidcodes.h"

#if USERLIB_USE_RFIDCODES || defined(__DOXYGEN__)


int8_t codeIndex(RfidCodes *validCodes, MifareUID *code){
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t i=0;

  while(i<validCodes->size){
 80036e2:	4e1a      	ldr	r6, [pc, #104]	; (800374c <codeIndex.constprop.0+0x6c>)
 80036e4:	f896 e0dc 	ldrb.w	lr, [r6, #220]	; 0xdc
 80036e8:	f1be 0f00 	cmp.w	lr, #0
 80036ec:	d02a      	beq.n	8003744 <codeIndex.constprop.0+0x64>
 80036ee:	4d18      	ldr	r5, [pc, #96]	; (8003750 <codeIndex.constprop.0+0x70>)
 80036f0:	782f      	ldrb	r7, [r5, #0]
 80036f2:	1e7b      	subs	r3, r7, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	2000      	movs	r0, #0
 80036fa:	441d      	add	r5, r3
 80036fc:	4603      	mov	r3, r0
 80036fe:	e004      	b.n	800370a <codeIndex.constprop.0+0x2a>
 8003700:	3001      	adds	r0, #1
 8003702:	b2c0      	uxtb	r0, r0
 8003704:	b243      	sxtb	r3, r0
 8003706:	4573      	cmp	r3, lr
 8003708:	da1c      	bge.n	8003744 <codeIndex.constprop.0+0x64>

bool equalCodes(MifareUID *code1, MifareUID *code2){

  uint8_t i=0;
  bool flag=true;
  if(code1->size!=code2->size){
 800370a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800370e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003712:	18f1      	adds	r1, r6, r3
 8003714:	5cf3      	ldrb	r3, [r6, r3]
 8003716:	42bb      	cmp	r3, r7
 8003718:	d1f2      	bne.n	8003700 <codeIndex.constprop.0+0x20>
      return false;
  }

  while(i<code1->size && flag){
 800371a:	b18f      	cbz	r7, 8003740 <codeIndex.constprop.0+0x60>
 800371c:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <codeIndex.constprop.0+0x70>)
 800371e:	e001      	b.n	8003724 <codeIndex.constprop.0+0x44>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ed      	beq.n	8003700 <codeIndex.constprop.0+0x20>
    if(code1->bytes[i]!=code2->bytes[i])
 8003724:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003728:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  bool flag=true;
  if(code1->size!=code2->size){
      return false;
  }

  while(i<code1->size && flag){
 800372c:	42aa      	cmp	r2, r5
    if(code1->bytes[i]!=code2->bytes[i])
 800372e:	eba3 0304 	sub.w	r3, r3, r4
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	ea4f 1353 	mov.w	r3, r3, lsr #5
  bool flag=true;
  if(code1->size!=code2->size){
      return false;
  }

  while(i<code1->size && flag){
 800373a:	d1f1      	bne.n	8003720 <codeIndex.constprop.0+0x40>

int8_t codeIndex(RfidCodes *validCodes, MifareUID *code){
  int8_t i=0;

  while(i<validCodes->size){
    if(equalCodes(code,&validCodes->validId[i]))
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0df      	beq.n	8003700 <codeIndex.constprop.0+0x20>
    i++;
  }

  return -1;

}
 8003740:	b240      	sxtb	r0, r0
 8003742:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(equalCodes(code,&validCodes->validId[i]))
      return i;
    i++;
  }

  return -1;
 8003744:	20ff      	movs	r0, #255	; 0xff

}
 8003746:	b240      	sxtb	r0, r0
 8003748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374a:	bf00      	nop
 800374c:	200012f8 	.word	0x200012f8
 8003750:	200013d8 	.word	0x200013d8
	...

08003760 <strpbrk>:
 8003760:	b430      	push	{r4, r5}
 8003762:	7804      	ldrb	r4, [r0, #0]
 8003764:	b1ec      	cbz	r4, 80037a2 <strpbrk+0x42>
 8003766:	780d      	ldrb	r5, [r1, #0]
 8003768:	b1ad      	cbz	r5, 8003796 <strpbrk+0x36>
 800376a:	42ac      	cmp	r4, r5
 800376c:	d00e      	beq.n	800378c <strpbrk+0x2c>
 800376e:	460a      	mov	r2, r1
 8003770:	e001      	b.n	8003776 <strpbrk+0x16>
 8003772:	429c      	cmp	r4, r3
 8003774:	d009      	beq.n	800378a <strpbrk+0x2a>
 8003776:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f9      	bne.n	8003772 <strpbrk+0x12>
 800377e:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8003782:	2c00      	cmp	r4, #0
 8003784:	d1f0      	bne.n	8003768 <strpbrk+0x8>
 8003786:	7815      	ldrb	r5, [r2, #0]
 8003788:	e000      	b.n	800378c <strpbrk+0x2c>
 800378a:	4625      	mov	r5, r4
 800378c:	2d00      	cmp	r5, #0
 800378e:	bf08      	it	eq
 8003790:	2000      	moveq	r0, #0
 8003792:	bc30      	pop	{r4, r5}
 8003794:	4770      	bx	lr
 8003796:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800379a:	460a      	mov	r2, r1
 800379c:	2c00      	cmp	r4, #0
 800379e:	d1e3      	bne.n	8003768 <strpbrk+0x8>
 80037a0:	e7f1      	b.n	8003786 <strpbrk+0x26>
 80037a2:	4620      	mov	r0, r4
 80037a4:	bc30      	pop	{r4, r5}
 80037a6:	4770      	bx	lr
	...

080037b0 <strspn>:
 80037b0:	b470      	push	{r4, r5, r6}
 80037b2:	7804      	ldrb	r4, [r0, #0]
 80037b4:	b1a4      	cbz	r4, 80037e0 <strspn+0x30>
 80037b6:	780e      	ldrb	r6, [r1, #0]
 80037b8:	4605      	mov	r5, r0
 80037ba:	b14e      	cbz	r6, 80037d0 <strspn+0x20>
 80037bc:	42b4      	cmp	r4, r6
 80037be:	d00a      	beq.n	80037d6 <strspn+0x26>
 80037c0:	460a      	mov	r2, r1
 80037c2:	e001      	b.n	80037c8 <strspn+0x18>
 80037c4:	429c      	cmp	r4, r3
 80037c6:	d006      	beq.n	80037d6 <strspn+0x26>
 80037c8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f9      	bne.n	80037c4 <strspn+0x14>
 80037d0:	1a28      	subs	r0, r5, r0
 80037d2:	bc70      	pop	{r4, r5, r6}
 80037d4:	4770      	bx	lr
 80037d6:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80037da:	2c00      	cmp	r4, #0
 80037dc:	d1ed      	bne.n	80037ba <strspn+0xa>
 80037de:	e7f7      	b.n	80037d0 <strspn+0x20>
 80037e0:	4620      	mov	r0, r4
 80037e2:	e7f6      	b.n	80037d2 <strspn+0x22>
	...
 80037f0:	20414d44 	.word	0x20414d44
 80037f4:	6c696166 	.word	0x6c696166
 80037f8:	00657275 	.word	0x00657275
 80037fc:	67617355 	.word	0x67617355
 8003800:	25203a65 	.word	0x25203a65
 8003804:	000a0d73 	.word	0x000a0d73
 8003808:	74737973 	.word	0x74737973
 800380c:	00656d69 	.word	0x00656d69
 8003810:	0d756c25 	.word	0x0d756c25
 8003814:	0000000a 	.word	0x0000000a
 8003818:	6f666e69 	.word	0x6f666e69
 800381c:	00000000 	.word	0x00000000
 8003820:	6e72654b 	.word	0x6e72654b
 8003824:	203a6c65 	.word	0x203a6c65
 8003828:	20202020 	.word	0x20202020
 800382c:	73252020 	.word	0x73252020
 8003830:	00000a0d 	.word	0x00000a0d
 8003834:	2e312e33 	.word	0x2e312e33
 8003838:	00000033 	.word	0x00000033
 800383c:	706d6f43 	.word	0x706d6f43
 8003840:	72656c69 	.word	0x72656c69
 8003844:	2020203a 	.word	0x2020203a
 8003848:	73252020 	.word	0x73252020
 800384c:	00000a0d 	.word	0x00000a0d
 8003850:	20434347 	.word	0x20434347
 8003854:	2e392e34 	.word	0x2e392e34
 8003858:	30322033 	.word	0x30322033
 800385c:	35303531 	.word	0x35303531
 8003860:	28203932 	.word	0x28203932
 8003864:	656c6572 	.word	0x656c6572
 8003868:	29657361 	.word	0x29657361
 800386c:	52415b20 	.word	0x52415b20
 8003870:	6d652f4d 	.word	0x6d652f4d
 8003874:	64646562 	.word	0x64646562
 8003878:	342d6465 	.word	0x342d6465
 800387c:	622d395f 	.word	0x622d395f
 8003880:	636e6172 	.word	0x636e6172
 8003884:	65722068 	.word	0x65722068
 8003888:	69736976 	.word	0x69736976
 800388c:	32206e6f 	.word	0x32206e6f
 8003890:	37393732 	.word	0x37393732
 8003894:	00005d37 	.word	0x00005d37
 8003898:	68637241 	.word	0x68637241
 800389c:	63657469 	.word	0x63657469
 80038a0:	65727574 	.word	0x65727574
 80038a4:	7325203a 	.word	0x7325203a
 80038a8:	00000a0d 	.word	0x00000a0d
 80038ac:	764d5241 	.word	0x764d5241
 80038b0:	4d2d4537 	.word	0x4d2d4537
 80038b4:	00000000 	.word	0x00000000
 80038b8:	65726f43 	.word	0x65726f43
 80038bc:	72615620 	.word	0x72615620
 80038c0:	746e6169 	.word	0x746e6169
 80038c4:	7325203a 	.word	0x7325203a
 80038c8:	00000a0d 	.word	0x00000a0d
 80038cc:	74726f43 	.word	0x74726f43
 80038d0:	4d2d7865 	.word	0x4d2d7865
 80038d4:	00000034 	.word	0x00000034
 80038d8:	74726f50 	.word	0x74726f50
 80038dc:	666e4920 	.word	0x666e4920
 80038e0:	20203a6f 	.word	0x20203a6f
 80038e4:	73252020 	.word	0x73252020
 80038e8:	00000a0d 	.word	0x00000a0d
 80038ec:	61766441 	.word	0x61766441
 80038f0:	6465636e 	.word	0x6465636e
 80038f4:	72656b20 	.word	0x72656b20
 80038f8:	206c656e 	.word	0x206c656e
 80038fc:	65646f6d 	.word	0x65646f6d
 8003900:	00000000 	.word	0x00000000
 8003904:	74616c50 	.word	0x74616c50
 8003908:	6d726f66 	.word	0x6d726f66
 800390c:	2020203a 	.word	0x2020203a
 8003910:	73252020 	.word	0x73252020
 8003914:	00000a0d 	.word	0x00000a0d
 8003918:	334d5453 	.word	0x334d5453
 800391c:	30334632 	.word	0x30334632
 8003920:	20437833 	.word	0x20437833
 8003924:	6c616e41 	.word	0x6c616e41
 8003928:	2620676f 	.word	0x2620676f
 800392c:	50534420 	.word	0x50534420
 8003930:	00000000 	.word	0x00000000
 8003934:	72616f42 	.word	0x72616f42
 8003938:	20203a64 	.word	0x20203a64
 800393c:	20202020 	.word	0x20202020
 8003940:	73252020 	.word	0x73252020
 8003944:	00000a0d 	.word	0x00000a0d
 8003948:	694d5453 	.word	0x694d5453
 800394c:	656f7263 	.word	0x656f7263
 8003950:	7463656c 	.word	0x7463656c
 8003954:	696e6f72 	.word	0x696e6f72
 8003958:	53207363 	.word	0x53207363
 800395c:	32334d54 	.word	0x32334d54
 8003960:	442d3346 	.word	0x442d3346
 8003964:	6f637369 	.word	0x6f637369
 8003968:	79726576 	.word	0x79726576
 800396c:	00000000 	.word	0x00000000
 8003970:	6c697542 	.word	0x6c697542
 8003974:	69742064 	.word	0x69742064
 8003978:	203a656d 	.word	0x203a656d
 800397c:	73252020 	.word	0x73252020
 8003980:	73257325 	.word	0x73257325
 8003984:	00000a0d 	.word	0x00000a0d
 8003988:	206e614a 	.word	0x206e614a
 800398c:	32203532 	.word	0x32203532
 8003990:	00373130 	.word	0x00373130
 8003994:	00202d20 	.word	0x00202d20
 8003998:	333a3131 	.word	0x333a3131
 800399c:	37353a34 	.word	0x37353a34
 80039a0:	00000000 	.word	0x00000000
 80039a4:	6c656873 	.word	0x6c656873
 80039a8:	0000006c 	.word	0x0000006c
 80039ac:	68430a0d 	.word	0x68430a0d
 80039b0:	4f696269 	.word	0x4f696269
 80039b4:	54522f53 	.word	0x54522f53
 80039b8:	65685320 	.word	0x65685320
 80039bc:	0d0a6c6c 	.word	0x0d0a6c6c
 80039c0:	756e616d 	.word	0x756e616d
 80039c4:	63206c61 	.word	0x63206c61
 80039c8:	616d6d6f 	.word	0x616d6d6f
 80039cc:	6620646e 	.word	0x6620646e
 80039d0:	6920726f 	.word	0x6920726f
 80039d4:	7274736e 	.word	0x7274736e
 80039d8:	69746375 	.word	0x69746375
 80039dc:	0a736e6f 	.word	0x0a736e6f
 80039e0:	0000000d 	.word	0x0000000d
 80039e4:	203e6863 	.word	0x203e6863
 80039e8:	00000000 	.word	0x00000000
 80039ec:	0000445e 	.word	0x0000445e
 80039f0:	206f6f74 	.word	0x206f6f74
 80039f4:	796e616d 	.word	0x796e616d
 80039f8:	67726120 	.word	0x67726120
 80039fc:	6e656d75 	.word	0x6e656d75
 8003a00:	0a0d7374 	.word	0x0a0d7374
 8003a04:	00000000 	.word	0x00000000
 8003a08:	74697865 	.word	0x74697865
 8003a0c:	00000000 	.word	0x00000000
 8003a10:	706c6568 	.word	0x706c6568
 8003a14:	00000000 	.word	0x00000000
 8003a18:	6d6d6f43 	.word	0x6d6d6f43
 8003a1c:	73646e61 	.word	0x73646e61
 8003a20:	6568203a 	.word	0x6568203a
 8003a24:	6520706c 	.word	0x6520706c
 8003a28:	20746978 	.word	0x20746978
 8003a2c:	00000000 	.word	0x00000000
 8003a30:	00207325 	.word	0x00207325
 8003a34:	00007325 	.word	0x00007325
 8003a38:	0a0d3f20 	.word	0x0a0d3f20
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	6f6c0a0d 	.word	0x6f6c0a0d
 8003a44:	74756f67 	.word	0x74756f67
	...

08003a50 <ram_areas>:
 8003a50:	08003fb4 200013e4 200013e4 200013e4     .?..... ... ... 
 8003a60:	08003fb4 00000000 00000000 00000000     .?..............
 8003a70:	08003fb4 00000000 00000000 00000000     .?..............
 8003a80:	08003fb4 00000000 00000000 00000000     .?..............
 8003a90:	08003fb4 10000000 10000000 10000000     .?..............
 8003aa0:	08003fb4 00000000 00000000 00000000     .?..............
 8003ab0:	08003fb4 00000000 00000000 00000000     .?..............
 8003ac0:	08003fb4 00000000 00000000 00000000     .?..............

08003ad0 <lcdpins>:
 8003ad0:	48000004 48000001 48000003 48000008     ...H...H...H...H
 8003ae0:	48000800 48000801 48000802 48000803     ...H...H...H...H
 8003af0:	48000400 4800040a 48000806 48000807     ...H...H...H...H

08003b00 <vmt>:
 8003b00:	080015a1 080016c1 08001621 08001731     ........!...1...
 8003b10:	08001611 08001721 08001591 080016b1     ....!...........

08003b20 <_stm32_dma_streams>:
 8003b20:	40020000 40020008 00000001 00000000     ...@...@........
 8003b30:	000b0000 40020000 4002001c 00000002     .......@...@....
 8003b40:	00000000 000c0104 40020000 40020030     ...........@0..@
 8003b50:	00000004 00000000 000d0208 40020000     ...............@
 8003b60:	40020044 00000008 00000000 000e030c     D..@............
 8003b70:	40020000 40020058 00000010 00000000     ...@X..@........
 8003b80:	000f0410 40020000 4002006c 00000020     .......@l..@ ...
 8003b90:	00000000 00100514 40020000 40020080     ...........@...@
 8003ba0:	00000040 00000000 00110618 40020400     @..............@
 8003bb0:	40020408 00000080 00000000 00380700     ...@..........8.
 8003bc0:	40020400 4002041c 00000100 00000000     ...@...@........
 8003bd0:	00390804 40020400 40020430 00000200     ..9....@0..@....
 8003be0:	00000000 003a0908 40020400 40020444     ......:....@D..@
 8003bf0:	00000400 00000000 003b0a0c 40020400     ..........;....@
 8003c00:	40020458 00000800 00000000 003c0b10     X..@..........<.

08003c10 <SPI2cfg>:
 8003c10:	00000000 48000c00 0018000b 00000700     .......H........

08003c20 <ch_debug>:
 8003c20:	6e69616d 18431600 08440404 1814100c     main..C...D.....
 8003c30:	1e1d1c00 00000000 00000000 00000000     ................
 8003c40:	656c6469 00000000 6e6f7542 726f6967     idle....Buongior
 8003c50:	202e6f6e 20202020 00000000 31534143     no.     ....CAS1
 8003c60:	20202037 20202020 20202020 00000000     7           ....
 8003c70:	63646461 00647261 63766d72 00647261     addcard.rmvcard.
 8003c80:	65646f63 00000073 756e616d 00006c61     codes...manual..

08003c90 <commands>:
 8003c90:	08003c70 080032e1 08003c78 08003431     p<...2..x<..14..
 8003ca0:	08003c80 080033a1 08003c88 080032c1     .<...3...<...2..
	...

08003cc0 <lcdcfg>:
 8003cc0:	08040000 08003ad0 00000064 00000000     .....:..d.......

08003cd0 <shell_cfg1>:
 8003cd0:	20000b30 08003c90 00000000 00000000     0.. .<..........
 8003ce0:	00000920 00000000 00000000 00000000      ...............
 8003cf0:	6573614c 614d2072 6567616e 00000072     Laser Manager...
 8003d00:	6f746f4d 6f432072 6f72746e 72656c6c     Motor Controller
 8003d10:	00000000 74747542 4d206e6f 67616e61     ....Button Manag
 8003d20:	00007265 6e696c42 0072656b 69736f50     er..Blinker.Posi
 8003d30:	6e6f6974 6e614d20 72656761 00000000     tion Manager....
 8003d40:	44494652 6e616d20 72656761 00000000     RFID manager....
 8003d50:	65636341 206f7373 696c6156 202e6f64     Accesso Valido. 
 8003d60:	00000000 65636341 206f7373 6167654e     ....Accesso Nega
 8003d70:	202e6f74 00000000 6c756e28 0000296c     to. ....(null)..
 8003d80:	67617355 61203a65 61636464 0a0d6472     Usage: addcard..
 8003d90:	00000000 63646461 3a647261 67676120     ....addcard: agg
 8003da0:	676e7569 6e752065 756e2061 2061766f     iunge una nuova 
 8003db0:	74726163 6c612061 73697320 616d6574     carta al sistema
 8003dc0:	20696420 65636361 0d697373 766d720a      di accessi..rmv
 8003dd0:	64726163 6972203a 766f756d 6e752065     card: rimuove un
 8003de0:	61632061 20617472 206c6164 74736973     a carta dal sist
 8003df0:	20616d65 61206964 73656363 0d0a6973     ema di accessi..
 8003e00:	65646f63 6d203a73 7274736f 75742061     codes: mostra tu
 8003e10:	20697474 6f632069 69636964 206c6120     tti i codici al 
 8003e20:	656d6f6d 206f746e 6f747561 7a7a6972     momento autorizz
 8003e30:	0a697461 0000000d 4e200a0d 72656d75     ati....... Numer
 8003e40:	616d206f 6d697373 6964206f 72616320     o massimo di car
 8003e50:	72206574 69676761 6f746e75 0000002e     te raggiunto....
 8003e60:	76410a0d 69636976 6572616e 20616c20     ..Avvicinare la 
 8003e70:	74726163 6c612061 74656c20 65726f74     carta al lettore
 8003e80:	000a0d2e 61430a0d 20617472 65736e69     ......Carta inse
 8003e90:	61746972 726f6320 74746572 6e656d61     rita correttamen
 8003ea0:	0d2e6574 0000000a 61430a0d 20617472     te........Carta 
 8003eb0:	27616967 65727020 746e6573 000a0d65     gia' presente...
 8003ec0:	69646f43 25206563 00203a64 00006425     Codice %d: .%d..
 8003ed0:	67617355 63203a65 7365646f 00000a0d     Usage: codes....
 8003ee0:	67617355 72203a65 6163766d 0a0d6472     Usage: rmvcard..
 8003ef0:	00000000 61430a0d 20617472 6d696c65     ......Carta elim
 8003f00:	74616e69 6f632061 74657272 656d6174     inata correttame
 8003f10:	2e65746e 00000a0d 61430a0d 20617472     nte.......Carta 
 8003f20:	206e6f6e 73657270 65746e65 6c656e20     non presente nel
 8003f30:	73697320 616d6574 000a0d2e               sistema....
